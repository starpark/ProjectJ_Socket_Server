#pragma warning(disable:4800)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2eproto;
namespace ProjectJ {
class C_LOBBY_CHAT;
struct C_LOBBY_CHATDefaultTypeInternal;
extern C_LOBBY_CHATDefaultTypeInternal _C_LOBBY_CHAT_default_instance_;
class C_LOBBY_CREATE_ROOM;
struct C_LOBBY_CREATE_ROOMDefaultTypeInternal;
extern C_LOBBY_CREATE_ROOMDefaultTypeInternal _C_LOBBY_CREATE_ROOM_default_instance_;
class C_LOBBY_ENTER_ROOM;
struct C_LOBBY_ENTER_ROOMDefaultTypeInternal;
extern C_LOBBY_ENTER_ROOMDefaultTypeInternal _C_LOBBY_ENTER_ROOM_default_instance_;
class C_LOBBY_REFRESH_ROOM;
struct C_LOBBY_REFRESH_ROOMDefaultTypeInternal;
extern C_LOBBY_REFRESH_ROOMDefaultTypeInternal _C_LOBBY_REFRESH_ROOM_default_instance_;
class C_MATCH_CHASER_ATTACK;
struct C_MATCH_CHASER_ATTACKDefaultTypeInternal;
extern C_MATCH_CHASER_ATTACKDefaultTypeInternal _C_MATCH_CHASER_ATTACK_default_instance_;
class C_MATCH_CHASER_HIT;
struct C_MATCH_CHASER_HITDefaultTypeInternal;
extern C_MATCH_CHASER_HITDefaultTypeInternal _C_MATCH_CHASER_HIT_default_instance_;
class C_MATCH_INFO;
struct C_MATCH_INFODefaultTypeInternal;
extern C_MATCH_INFODefaultTypeInternal _C_MATCH_INFO_default_instance_;
class C_MATCH_INFO_MyInfo;
struct C_MATCH_INFO_MyInfoDefaultTypeInternal;
extern C_MATCH_INFO_MyInfoDefaultTypeInternal _C_MATCH_INFO_MyInfo_default_instance_;
class C_MATCH_ITEM_DROP;
struct C_MATCH_ITEM_DROPDefaultTypeInternal;
extern C_MATCH_ITEM_DROPDefaultTypeInternal _C_MATCH_ITEM_DROP_default_instance_;
class C_MATCH_ITEM_MOVE;
struct C_MATCH_ITEM_MOVEDefaultTypeInternal;
extern C_MATCH_ITEM_MOVEDefaultTypeInternal _C_MATCH_ITEM_MOVE_default_instance_;
class C_MATCH_ITEM_PICKUP;
struct C_MATCH_ITEM_PICKUPDefaultTypeInternal;
extern C_MATCH_ITEM_PICKUPDefaultTypeInternal _C_MATCH_ITEM_PICKUP_default_instance_;
class C_MATCH_READY_TO_RECEIVE;
struct C_MATCH_READY_TO_RECEIVEDefaultTypeInternal;
extern C_MATCH_READY_TO_RECEIVEDefaultTypeInternal _C_MATCH_READY_TO_RECEIVE_default_instance_;
class C_MATCH_READY_TO_START;
struct C_MATCH_READY_TO_STARTDefaultTypeInternal;
extern C_MATCH_READY_TO_STARTDefaultTypeInternal _C_MATCH_READY_TO_START_default_instance_;
class C_ROOM_CHAT;
struct C_ROOM_CHATDefaultTypeInternal;
extern C_ROOM_CHATDefaultTypeInternal _C_ROOM_CHAT_default_instance_;
class C_ROOM_LEAVE;
struct C_ROOM_LEAVEDefaultTypeInternal;
extern C_ROOM_LEAVEDefaultTypeInternal _C_ROOM_LEAVE_default_instance_;
class C_ROOM_READY;
struct C_ROOM_READYDefaultTypeInternal;
extern C_ROOM_READYDefaultTypeInternal _C_ROOM_READY_default_instance_;
class C_ROOM_READY_TO_RECEIVE;
struct C_ROOM_READY_TO_RECEIVEDefaultTypeInternal;
extern C_ROOM_READY_TO_RECEIVEDefaultTypeInternal _C_ROOM_READY_TO_RECEIVE_default_instance_;
class C_VERIFY_TOKEN;
struct C_VERIFY_TOKENDefaultTypeInternal;
extern C_VERIFY_TOKENDefaultTypeInternal _C_VERIFY_TOKEN_default_instance_;
class S_LOBBY_CHAT;
struct S_LOBBY_CHATDefaultTypeInternal;
extern S_LOBBY_CHATDefaultTypeInternal _S_LOBBY_CHAT_default_instance_;
class S_LOBBY_CREATE_ROOM;
struct S_LOBBY_CREATE_ROOMDefaultTypeInternal;
extern S_LOBBY_CREATE_ROOMDefaultTypeInternal _S_LOBBY_CREATE_ROOM_default_instance_;
class S_LOBBY_ENTER_ROOM;
struct S_LOBBY_ENTER_ROOMDefaultTypeInternal;
extern S_LOBBY_ENTER_ROOMDefaultTypeInternal _S_LOBBY_ENTER_ROOM_default_instance_;
class S_LOBBY_REFRESH_ROOM;
struct S_LOBBY_REFRESH_ROOMDefaultTypeInternal;
extern S_LOBBY_REFRESH_ROOMDefaultTypeInternal _S_LOBBY_REFRESH_ROOM_default_instance_;
class S_MATCH_ALL_READY_TO_RECIEVE;
struct S_MATCH_ALL_READY_TO_RECIEVEDefaultTypeInternal;
extern S_MATCH_ALL_READY_TO_RECIEVEDefaultTypeInternal _S_MATCH_ALL_READY_TO_RECIEVE_default_instance_;
class S_MATCH_CHASER_ATTACK;
struct S_MATCH_CHASER_ATTACKDefaultTypeInternal;
extern S_MATCH_CHASER_ATTACKDefaultTypeInternal _S_MATCH_CHASER_ATTACK_default_instance_;
class S_MATCH_CHASER_HIT;
struct S_MATCH_CHASER_HITDefaultTypeInternal;
extern S_MATCH_CHASER_HITDefaultTypeInternal _S_MATCH_CHASER_HIT_default_instance_;
class S_MATCH_END;
struct S_MATCH_ENDDefaultTypeInternal;
extern S_MATCH_ENDDefaultTypeInternal _S_MATCH_END_default_instance_;
class S_MATCH_INFO;
struct S_MATCH_INFODefaultTypeInternal;
extern S_MATCH_INFODefaultTypeInternal _S_MATCH_INFO_default_instance_;
class S_MATCH_ITEM_GENERATED;
struct S_MATCH_ITEM_GENERATEDDefaultTypeInternal;
extern S_MATCH_ITEM_GENERATEDDefaultTypeInternal _S_MATCH_ITEM_GENERATED_default_instance_;
class S_MATCH_ITEM_SOMEONE_DROP;
struct S_MATCH_ITEM_SOMEONE_DROPDefaultTypeInternal;
extern S_MATCH_ITEM_SOMEONE_DROPDefaultTypeInternal _S_MATCH_ITEM_SOMEONE_DROP_default_instance_;
class S_MATCH_ITEM_SOMEONE_MOVE;
struct S_MATCH_ITEM_SOMEONE_MOVEDefaultTypeInternal;
extern S_MATCH_ITEM_SOMEONE_MOVEDefaultTypeInternal _S_MATCH_ITEM_SOMEONE_MOVE_default_instance_;
class S_MATCH_ITEM_SOMEONE_PICKUP;
struct S_MATCH_ITEM_SOMEONE_PICKUPDefaultTypeInternal;
extern S_MATCH_ITEM_SOMEONE_PICKUPDefaultTypeInternal _S_MATCH_ITEM_SOMEONE_PICKUP_default_instance_;
class S_MATCH_SCALE_ON_CHANGED;
struct S_MATCH_SCALE_ON_CHANGEDDefaultTypeInternal;
extern S_MATCH_SCALE_ON_CHANGEDDefaultTypeInternal _S_MATCH_SCALE_ON_CHANGED_default_instance_;
class S_MATCH_START;
struct S_MATCH_STARTDefaultTypeInternal;
extern S_MATCH_STARTDefaultTypeInternal _S_MATCH_START_default_instance_;
class S_ROOM_CHAT;
struct S_ROOM_CHATDefaultTypeInternal;
extern S_ROOM_CHATDefaultTypeInternal _S_ROOM_CHAT_default_instance_;
class S_ROOM_INFO;
struct S_ROOM_INFODefaultTypeInternal;
extern S_ROOM_INFODefaultTypeInternal _S_ROOM_INFO_default_instance_;
class S_ROOM_LEAVE;
struct S_ROOM_LEAVEDefaultTypeInternal;
extern S_ROOM_LEAVEDefaultTypeInternal _S_ROOM_LEAVE_default_instance_;
class S_ROOM_OTHER_ENTER;
struct S_ROOM_OTHER_ENTERDefaultTypeInternal;
extern S_ROOM_OTHER_ENTERDefaultTypeInternal _S_ROOM_OTHER_ENTER_default_instance_;
class S_ROOM_OTHER_LEAVE;
struct S_ROOM_OTHER_LEAVEDefaultTypeInternal;
extern S_ROOM_OTHER_LEAVEDefaultTypeInternal _S_ROOM_OTHER_LEAVE_default_instance_;
class S_ROOM_READY;
struct S_ROOM_READYDefaultTypeInternal;
extern S_ROOM_READYDefaultTypeInternal _S_ROOM_READY_default_instance_;
class S_ROOM_STANDBY_MATCH;
struct S_ROOM_STANDBY_MATCHDefaultTypeInternal;
extern S_ROOM_STANDBY_MATCHDefaultTypeInternal _S_ROOM_STANDBY_MATCH_default_instance_;
class S_ROOM_START_MATCH;
struct S_ROOM_START_MATCHDefaultTypeInternal;
extern S_ROOM_START_MATCHDefaultTypeInternal _S_ROOM_START_MATCH_default_instance_;
class S_VERIFY_TOKEN;
struct S_VERIFY_TOKENDefaultTypeInternal;
extern S_VERIFY_TOKENDefaultTypeInternal _S_VERIFY_TOKEN_default_instance_;
}  // namespace ProjectJ
PROTOBUF_NAMESPACE_OPEN
template<> ::ProjectJ::C_LOBBY_CHAT* Arena::CreateMaybeMessage<::ProjectJ::C_LOBBY_CHAT>(Arena*);
template<> ::ProjectJ::C_LOBBY_CREATE_ROOM* Arena::CreateMaybeMessage<::ProjectJ::C_LOBBY_CREATE_ROOM>(Arena*);
template<> ::ProjectJ::C_LOBBY_ENTER_ROOM* Arena::CreateMaybeMessage<::ProjectJ::C_LOBBY_ENTER_ROOM>(Arena*);
template<> ::ProjectJ::C_LOBBY_REFRESH_ROOM* Arena::CreateMaybeMessage<::ProjectJ::C_LOBBY_REFRESH_ROOM>(Arena*);
template<> ::ProjectJ::C_MATCH_CHASER_ATTACK* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_CHASER_ATTACK>(Arena*);
template<> ::ProjectJ::C_MATCH_CHASER_HIT* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_CHASER_HIT>(Arena*);
template<> ::ProjectJ::C_MATCH_INFO* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_INFO>(Arena*);
template<> ::ProjectJ::C_MATCH_INFO_MyInfo* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_INFO_MyInfo>(Arena*);
template<> ::ProjectJ::C_MATCH_ITEM_DROP* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_ITEM_DROP>(Arena*);
template<> ::ProjectJ::C_MATCH_ITEM_MOVE* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_ITEM_MOVE>(Arena*);
template<> ::ProjectJ::C_MATCH_ITEM_PICKUP* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_ITEM_PICKUP>(Arena*);
template<> ::ProjectJ::C_MATCH_READY_TO_RECEIVE* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_READY_TO_RECEIVE>(Arena*);
template<> ::ProjectJ::C_MATCH_READY_TO_START* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_READY_TO_START>(Arena*);
template<> ::ProjectJ::C_ROOM_CHAT* Arena::CreateMaybeMessage<::ProjectJ::C_ROOM_CHAT>(Arena*);
template<> ::ProjectJ::C_ROOM_LEAVE* Arena::CreateMaybeMessage<::ProjectJ::C_ROOM_LEAVE>(Arena*);
template<> ::ProjectJ::C_ROOM_READY* Arena::CreateMaybeMessage<::ProjectJ::C_ROOM_READY>(Arena*);
template<> ::ProjectJ::C_ROOM_READY_TO_RECEIVE* Arena::CreateMaybeMessage<::ProjectJ::C_ROOM_READY_TO_RECEIVE>(Arena*);
template<> ::ProjectJ::C_VERIFY_TOKEN* Arena::CreateMaybeMessage<::ProjectJ::C_VERIFY_TOKEN>(Arena*);
template<> ::ProjectJ::S_LOBBY_CHAT* Arena::CreateMaybeMessage<::ProjectJ::S_LOBBY_CHAT>(Arena*);
template<> ::ProjectJ::S_LOBBY_CREATE_ROOM* Arena::CreateMaybeMessage<::ProjectJ::S_LOBBY_CREATE_ROOM>(Arena*);
template<> ::ProjectJ::S_LOBBY_ENTER_ROOM* Arena::CreateMaybeMessage<::ProjectJ::S_LOBBY_ENTER_ROOM>(Arena*);
template<> ::ProjectJ::S_LOBBY_REFRESH_ROOM* Arena::CreateMaybeMessage<::ProjectJ::S_LOBBY_REFRESH_ROOM>(Arena*);
template<> ::ProjectJ::S_MATCH_ALL_READY_TO_RECIEVE* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_ALL_READY_TO_RECIEVE>(Arena*);
template<> ::ProjectJ::S_MATCH_CHASER_ATTACK* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_CHASER_ATTACK>(Arena*);
template<> ::ProjectJ::S_MATCH_CHASER_HIT* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_CHASER_HIT>(Arena*);
template<> ::ProjectJ::S_MATCH_END* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_END>(Arena*);
template<> ::ProjectJ::S_MATCH_INFO* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_INFO>(Arena*);
template<> ::ProjectJ::S_MATCH_ITEM_GENERATED* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_ITEM_GENERATED>(Arena*);
template<> ::ProjectJ::S_MATCH_ITEM_SOMEONE_DROP* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_ITEM_SOMEONE_DROP>(Arena*);
template<> ::ProjectJ::S_MATCH_ITEM_SOMEONE_MOVE* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_ITEM_SOMEONE_MOVE>(Arena*);
template<> ::ProjectJ::S_MATCH_ITEM_SOMEONE_PICKUP* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_ITEM_SOMEONE_PICKUP>(Arena*);
template<> ::ProjectJ::S_MATCH_SCALE_ON_CHANGED* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_SCALE_ON_CHANGED>(Arena*);
template<> ::ProjectJ::S_MATCH_START* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_START>(Arena*);
template<> ::ProjectJ::S_ROOM_CHAT* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_CHAT>(Arena*);
template<> ::ProjectJ::S_ROOM_INFO* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_INFO>(Arena*);
template<> ::ProjectJ::S_ROOM_LEAVE* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_LEAVE>(Arena*);
template<> ::ProjectJ::S_ROOM_OTHER_ENTER* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_OTHER_ENTER>(Arena*);
template<> ::ProjectJ::S_ROOM_OTHER_LEAVE* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_OTHER_LEAVE>(Arena*);
template<> ::ProjectJ::S_ROOM_READY* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_READY>(Arena*);
template<> ::ProjectJ::S_ROOM_STANDBY_MATCH* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_STANDBY_MATCH>(Arena*);
template<> ::ProjectJ::S_ROOM_START_MATCH* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_START_MATCH>(Arena*);
template<> ::ProjectJ::S_VERIFY_TOKEN* Arena::CreateMaybeMessage<::ProjectJ::S_VERIFY_TOKEN>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProjectJ {

// ===================================================================

class C_VERIFY_TOKEN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_VERIFY_TOKEN) */ {
 public:
  inline C_VERIFY_TOKEN() : C_VERIFY_TOKEN(nullptr) {}
  ~C_VERIFY_TOKEN() override;
  explicit PROTOBUF_CONSTEXPR C_VERIFY_TOKEN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_VERIFY_TOKEN(const C_VERIFY_TOKEN& from);
  C_VERIFY_TOKEN(C_VERIFY_TOKEN&& from) noexcept
    : C_VERIFY_TOKEN() {
    *this = ::std::move(from);
  }

  inline C_VERIFY_TOKEN& operator=(const C_VERIFY_TOKEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_VERIFY_TOKEN& operator=(C_VERIFY_TOKEN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_VERIFY_TOKEN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_VERIFY_TOKEN* internal_default_instance() {
    return reinterpret_cast<const C_VERIFY_TOKEN*>(
               &_C_VERIFY_TOKEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_VERIFY_TOKEN& a, C_VERIFY_TOKEN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_VERIFY_TOKEN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_VERIFY_TOKEN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_VERIFY_TOKEN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_VERIFY_TOKEN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_VERIFY_TOKEN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_VERIFY_TOKEN& from) {
    C_VERIFY_TOKEN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_VERIFY_TOKEN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_VERIFY_TOKEN";
  }
  protected:
  explicit C_VERIFY_TOKEN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_VERIFY_TOKEN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_VERIFY_TOKEN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_VERIFY_TOKEN) */ {
 public:
  inline S_VERIFY_TOKEN() : S_VERIFY_TOKEN(nullptr) {}
  ~S_VERIFY_TOKEN() override;
  explicit PROTOBUF_CONSTEXPR S_VERIFY_TOKEN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_VERIFY_TOKEN(const S_VERIFY_TOKEN& from);
  S_VERIFY_TOKEN(S_VERIFY_TOKEN&& from) noexcept
    : S_VERIFY_TOKEN() {
    *this = ::std::move(from);
  }

  inline S_VERIFY_TOKEN& operator=(const S_VERIFY_TOKEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_VERIFY_TOKEN& operator=(S_VERIFY_TOKEN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_VERIFY_TOKEN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_VERIFY_TOKEN* internal_default_instance() {
    return reinterpret_cast<const S_VERIFY_TOKEN*>(
               &_S_VERIFY_TOKEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_VERIFY_TOKEN& a, S_VERIFY_TOKEN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_VERIFY_TOKEN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_VERIFY_TOKEN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_VERIFY_TOKEN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_VERIFY_TOKEN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_VERIFY_TOKEN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_VERIFY_TOKEN& from) {
    S_VERIFY_TOKEN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_VERIFY_TOKEN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_VERIFY_TOKEN";
  }
  protected:
  explicit S_VERIFY_TOKEN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_VERIFY_TOKEN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_LOBBY_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_LOBBY_CHAT) */ {
 public:
  inline C_LOBBY_CHAT() : C_LOBBY_CHAT(nullptr) {}
  ~C_LOBBY_CHAT() override;
  explicit PROTOBUF_CONSTEXPR C_LOBBY_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOBBY_CHAT(const C_LOBBY_CHAT& from);
  C_LOBBY_CHAT(C_LOBBY_CHAT&& from) noexcept
    : C_LOBBY_CHAT() {
    *this = ::std::move(from);
  }

  inline C_LOBBY_CHAT& operator=(const C_LOBBY_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOBBY_CHAT& operator=(C_LOBBY_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOBBY_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOBBY_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_LOBBY_CHAT*>(
               &_C_LOBBY_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_LOBBY_CHAT& a, C_LOBBY_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOBBY_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOBBY_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOBBY_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOBBY_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOBBY_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOBBY_CHAT& from) {
    C_LOBBY_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOBBY_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_LOBBY_CHAT";
  }
  protected:
  explicit C_LOBBY_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kChatFieldNumber = 3,
    kAccountIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string chat = 3;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_LOBBY_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_LOBBY_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_LOBBY_CHAT) */ {
 public:
  inline S_LOBBY_CHAT() : S_LOBBY_CHAT(nullptr) {}
  ~S_LOBBY_CHAT() override;
  explicit PROTOBUF_CONSTEXPR S_LOBBY_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOBBY_CHAT(const S_LOBBY_CHAT& from);
  S_LOBBY_CHAT(S_LOBBY_CHAT&& from) noexcept
    : S_LOBBY_CHAT() {
    *this = ::std::move(from);
  }

  inline S_LOBBY_CHAT& operator=(const S_LOBBY_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOBBY_CHAT& operator=(S_LOBBY_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOBBY_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOBBY_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_LOBBY_CHAT*>(
               &_S_LOBBY_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_LOBBY_CHAT& a, S_LOBBY_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOBBY_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOBBY_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOBBY_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOBBY_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOBBY_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOBBY_CHAT& from) {
    S_LOBBY_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOBBY_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_LOBBY_CHAT";
  }
  protected:
  explicit S_LOBBY_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kChatFieldNumber = 3,
    kAccountIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string chat = 3;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_LOBBY_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_LOBBY_REFRESH_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_LOBBY_REFRESH_ROOM) */ {
 public:
  inline C_LOBBY_REFRESH_ROOM() : C_LOBBY_REFRESH_ROOM(nullptr) {}
  ~C_LOBBY_REFRESH_ROOM() override;
  explicit PROTOBUF_CONSTEXPR C_LOBBY_REFRESH_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOBBY_REFRESH_ROOM(const C_LOBBY_REFRESH_ROOM& from);
  C_LOBBY_REFRESH_ROOM(C_LOBBY_REFRESH_ROOM&& from) noexcept
    : C_LOBBY_REFRESH_ROOM() {
    *this = ::std::move(from);
  }

  inline C_LOBBY_REFRESH_ROOM& operator=(const C_LOBBY_REFRESH_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOBBY_REFRESH_ROOM& operator=(C_LOBBY_REFRESH_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOBBY_REFRESH_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOBBY_REFRESH_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_LOBBY_REFRESH_ROOM*>(
               &_C_LOBBY_REFRESH_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_LOBBY_REFRESH_ROOM& a, C_LOBBY_REFRESH_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOBBY_REFRESH_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOBBY_REFRESH_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOBBY_REFRESH_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOBBY_REFRESH_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOBBY_REFRESH_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOBBY_REFRESH_ROOM& from) {
    C_LOBBY_REFRESH_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOBBY_REFRESH_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_LOBBY_REFRESH_ROOM";
  }
  protected:
  explicit C_LOBBY_REFRESH_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_LOBBY_REFRESH_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_LOBBY_REFRESH_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_LOBBY_REFRESH_ROOM) */ {
 public:
  inline S_LOBBY_REFRESH_ROOM() : S_LOBBY_REFRESH_ROOM(nullptr) {}
  ~S_LOBBY_REFRESH_ROOM() override;
  explicit PROTOBUF_CONSTEXPR S_LOBBY_REFRESH_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOBBY_REFRESH_ROOM(const S_LOBBY_REFRESH_ROOM& from);
  S_LOBBY_REFRESH_ROOM(S_LOBBY_REFRESH_ROOM&& from) noexcept
    : S_LOBBY_REFRESH_ROOM() {
    *this = ::std::move(from);
  }

  inline S_LOBBY_REFRESH_ROOM& operator=(const S_LOBBY_REFRESH_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOBBY_REFRESH_ROOM& operator=(S_LOBBY_REFRESH_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOBBY_REFRESH_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOBBY_REFRESH_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_LOBBY_REFRESH_ROOM*>(
               &_S_LOBBY_REFRESH_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_LOBBY_REFRESH_ROOM& a, S_LOBBY_REFRESH_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOBBY_REFRESH_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOBBY_REFRESH_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOBBY_REFRESH_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOBBY_REFRESH_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOBBY_REFRESH_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOBBY_REFRESH_ROOM& from) {
    S_LOBBY_REFRESH_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOBBY_REFRESH_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_LOBBY_REFRESH_ROOM";
  }
  protected:
  explicit S_LOBBY_REFRESH_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 1,
  };
  // repeated .ProjectJ.Room rooms = 1;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::ProjectJ::Room* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Room >*
      mutable_rooms();
  private:
  const ::ProjectJ::Room& _internal_rooms(int index) const;
  ::ProjectJ::Room* _internal_add_rooms();
  public:
  const ::ProjectJ::Room& rooms(int index) const;
  ::ProjectJ::Room* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Room >&
      rooms() const;

  // @@protoc_insertion_point(class_scope:ProjectJ.S_LOBBY_REFRESH_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Room > rooms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_LOBBY_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_LOBBY_CREATE_ROOM) */ {
 public:
  inline C_LOBBY_CREATE_ROOM() : C_LOBBY_CREATE_ROOM(nullptr) {}
  ~C_LOBBY_CREATE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR C_LOBBY_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOBBY_CREATE_ROOM(const C_LOBBY_CREATE_ROOM& from);
  C_LOBBY_CREATE_ROOM(C_LOBBY_CREATE_ROOM&& from) noexcept
    : C_LOBBY_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline C_LOBBY_CREATE_ROOM& operator=(const C_LOBBY_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOBBY_CREATE_ROOM& operator=(C_LOBBY_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOBBY_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOBBY_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_LOBBY_CREATE_ROOM*>(
               &_C_LOBBY_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_LOBBY_CREATE_ROOM& a, C_LOBBY_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOBBY_CREATE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOBBY_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOBBY_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOBBY_CREATE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOBBY_CREATE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOBBY_CREATE_ROOM& from) {
    C_LOBBY_CREATE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOBBY_CREATE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_LOBBY_CREATE_ROOM";
  }
  protected:
  explicit C_LOBBY_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_LOBBY_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_LOBBY_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_LOBBY_CREATE_ROOM) */ {
 public:
  inline S_LOBBY_CREATE_ROOM() : S_LOBBY_CREATE_ROOM(nullptr) {}
  ~S_LOBBY_CREATE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR S_LOBBY_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOBBY_CREATE_ROOM(const S_LOBBY_CREATE_ROOM& from);
  S_LOBBY_CREATE_ROOM(S_LOBBY_CREATE_ROOM&& from) noexcept
    : S_LOBBY_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline S_LOBBY_CREATE_ROOM& operator=(const S_LOBBY_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOBBY_CREATE_ROOM& operator=(S_LOBBY_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOBBY_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOBBY_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_LOBBY_CREATE_ROOM*>(
               &_S_LOBBY_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_LOBBY_CREATE_ROOM& a, S_LOBBY_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOBBY_CREATE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOBBY_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOBBY_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOBBY_CREATE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOBBY_CREATE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOBBY_CREATE_ROOM& from) {
    S_LOBBY_CREATE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOBBY_CREATE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_LOBBY_CREATE_ROOM";
  }
  protected:
  explicit S_LOBBY_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kSlotIndexFieldNumber = 3,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // int32 slot_index = 3;
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_LOBBY_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    int32_t room_id_;
    int32_t slot_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_LOBBY_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_LOBBY_ENTER_ROOM) */ {
 public:
  inline C_LOBBY_ENTER_ROOM() : C_LOBBY_ENTER_ROOM(nullptr) {}
  ~C_LOBBY_ENTER_ROOM() override;
  explicit PROTOBUF_CONSTEXPR C_LOBBY_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOBBY_ENTER_ROOM(const C_LOBBY_ENTER_ROOM& from);
  C_LOBBY_ENTER_ROOM(C_LOBBY_ENTER_ROOM&& from) noexcept
    : C_LOBBY_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline C_LOBBY_ENTER_ROOM& operator=(const C_LOBBY_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOBBY_ENTER_ROOM& operator=(C_LOBBY_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOBBY_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOBBY_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_LOBBY_ENTER_ROOM*>(
               &_C_LOBBY_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_LOBBY_ENTER_ROOM& a, C_LOBBY_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOBBY_ENTER_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOBBY_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOBBY_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOBBY_ENTER_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOBBY_ENTER_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOBBY_ENTER_ROOM& from) {
    C_LOBBY_ENTER_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOBBY_ENTER_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_LOBBY_ENTER_ROOM";
  }
  protected:
  explicit C_LOBBY_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
  };
  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_LOBBY_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t account_id_;
    int32_t room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_LOBBY_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_LOBBY_ENTER_ROOM) */ {
 public:
  inline S_LOBBY_ENTER_ROOM() : S_LOBBY_ENTER_ROOM(nullptr) {}
  ~S_LOBBY_ENTER_ROOM() override;
  explicit PROTOBUF_CONSTEXPR S_LOBBY_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOBBY_ENTER_ROOM(const S_LOBBY_ENTER_ROOM& from);
  S_LOBBY_ENTER_ROOM(S_LOBBY_ENTER_ROOM&& from) noexcept
    : S_LOBBY_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline S_LOBBY_ENTER_ROOM& operator=(const S_LOBBY_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOBBY_ENTER_ROOM& operator=(S_LOBBY_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOBBY_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOBBY_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_LOBBY_ENTER_ROOM*>(
               &_S_LOBBY_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_LOBBY_ENTER_ROOM& a, S_LOBBY_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOBBY_ENTER_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOBBY_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOBBY_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOBBY_ENTER_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOBBY_ENTER_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOBBY_ENTER_ROOM& from) {
    S_LOBBY_ENTER_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOBBY_ENTER_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_LOBBY_ENTER_ROOM";
  }
  protected:
  explicit S_LOBBY_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kSlotIndexFieldNumber = 3,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // int32 slot_index = 3;
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_LOBBY_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    int32_t room_id_;
    int32_t slot_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_READY_TO_RECEIVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_ROOM_READY_TO_RECEIVE) */ {
 public:
  inline C_ROOM_READY_TO_RECEIVE() : C_ROOM_READY_TO_RECEIVE(nullptr) {}
  ~C_ROOM_READY_TO_RECEIVE() override;
  explicit PROTOBUF_CONSTEXPR C_ROOM_READY_TO_RECEIVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_READY_TO_RECEIVE(const C_ROOM_READY_TO_RECEIVE& from);
  C_ROOM_READY_TO_RECEIVE(C_ROOM_READY_TO_RECEIVE&& from) noexcept
    : C_ROOM_READY_TO_RECEIVE() {
    *this = ::std::move(from);
  }

  inline C_ROOM_READY_TO_RECEIVE& operator=(const C_ROOM_READY_TO_RECEIVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_READY_TO_RECEIVE& operator=(C_ROOM_READY_TO_RECEIVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_READY_TO_RECEIVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_READY_TO_RECEIVE* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_READY_TO_RECEIVE*>(
               &_C_ROOM_READY_TO_RECEIVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_ROOM_READY_TO_RECEIVE& a, C_ROOM_READY_TO_RECEIVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_READY_TO_RECEIVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_READY_TO_RECEIVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOM_READY_TO_RECEIVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOM_READY_TO_RECEIVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ROOM_READY_TO_RECEIVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ROOM_READY_TO_RECEIVE& from) {
    C_ROOM_READY_TO_RECEIVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_READY_TO_RECEIVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_ROOM_READY_TO_RECEIVE";
  }
  protected:
  explicit C_ROOM_READY_TO_RECEIVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kSlotIndexFieldNumber = 3,
  };
  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // int32 slot_index = 3;
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_ROOM_READY_TO_RECEIVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t account_id_;
    int32_t room_id_;
    int32_t slot_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_INFO) */ {
 public:
  inline S_ROOM_INFO() : S_ROOM_INFO(nullptr) {}
  ~S_ROOM_INFO() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_INFO(const S_ROOM_INFO& from);
  S_ROOM_INFO(S_ROOM_INFO&& from) noexcept
    : S_ROOM_INFO() {
    *this = ::std::move(from);
  }

  inline S_ROOM_INFO& operator=(const S_ROOM_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_INFO& operator=(S_ROOM_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_INFO* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_INFO*>(
               &_S_ROOM_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_ROOM_INFO& a, S_ROOM_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_INFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_INFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_INFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_INFO& from) {
    S_ROOM_INFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_INFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_INFO";
  }
  protected:
  explicit S_ROOM_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .ProjectJ.RoomInfo info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ProjectJ::RoomInfo& info() const;
  PROTOBUF_NODISCARD ::ProjectJ::RoomInfo* release_info();
  ::ProjectJ::RoomInfo* mutable_info();
  void set_allocated_info(::ProjectJ::RoomInfo* info);
  private:
  const ::ProjectJ::RoomInfo& _internal_info() const;
  ::ProjectJ::RoomInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ProjectJ::RoomInfo* info);
  ::ProjectJ::RoomInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::RoomInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_LEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_ROOM_LEAVE) */ {
 public:
  inline C_ROOM_LEAVE() : C_ROOM_LEAVE(nullptr) {}
  ~C_ROOM_LEAVE() override;
  explicit PROTOBUF_CONSTEXPR C_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_LEAVE(const C_ROOM_LEAVE& from);
  C_ROOM_LEAVE(C_ROOM_LEAVE&& from) noexcept
    : C_ROOM_LEAVE() {
    *this = ::std::move(from);
  }

  inline C_ROOM_LEAVE& operator=(const C_ROOM_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_LEAVE& operator=(C_ROOM_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_LEAVE* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_LEAVE*>(
               &_C_ROOM_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(C_ROOM_LEAVE& a, C_ROOM_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_LEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOM_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOM_LEAVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ROOM_LEAVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ROOM_LEAVE& from) {
    C_ROOM_LEAVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_LEAVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_ROOM_LEAVE";
  }
  protected:
  explicit C_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kSlotIndexFieldNumber = 3,
  };
  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // int32 slot_index = 3;
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_ROOM_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t account_id_;
    int32_t room_id_;
    int32_t slot_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_LEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_LEAVE) */ {
 public:
  inline S_ROOM_LEAVE() : S_ROOM_LEAVE(nullptr) {}
  ~S_ROOM_LEAVE() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_LEAVE(const S_ROOM_LEAVE& from);
  S_ROOM_LEAVE(S_ROOM_LEAVE&& from) noexcept
    : S_ROOM_LEAVE() {
    *this = ::std::move(from);
  }

  inline S_ROOM_LEAVE& operator=(const S_ROOM_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_LEAVE& operator=(S_ROOM_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_LEAVE* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_LEAVE*>(
               &_S_ROOM_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_ROOM_LEAVE& a, S_ROOM_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_LEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_LEAVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_LEAVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_LEAVE& from) {
    S_ROOM_LEAVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_LEAVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_LEAVE";
  }
  protected:
  explicit S_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_OTHER_ENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_OTHER_ENTER) */ {
 public:
  inline S_ROOM_OTHER_ENTER() : S_ROOM_OTHER_ENTER(nullptr) {}
  ~S_ROOM_OTHER_ENTER() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_OTHER_ENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_OTHER_ENTER(const S_ROOM_OTHER_ENTER& from);
  S_ROOM_OTHER_ENTER(S_ROOM_OTHER_ENTER&& from) noexcept
    : S_ROOM_OTHER_ENTER() {
    *this = ::std::move(from);
  }

  inline S_ROOM_OTHER_ENTER& operator=(const S_ROOM_OTHER_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_OTHER_ENTER& operator=(S_ROOM_OTHER_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_OTHER_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_OTHER_ENTER* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_OTHER_ENTER*>(
               &_S_ROOM_OTHER_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S_ROOM_OTHER_ENTER& a, S_ROOM_OTHER_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_OTHER_ENTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_OTHER_ENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_OTHER_ENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_OTHER_ENTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_OTHER_ENTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_OTHER_ENTER& from) {
    S_ROOM_OTHER_ENTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_OTHER_ENTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_OTHER_ENTER";
  }
  protected:
  explicit S_ROOM_OTHER_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherFieldNumber = 3,
    kRoomIdFieldNumber = 1,
    kSlotIndexFieldNumber = 2,
  };
  // .ProjectJ.Player other = 3;
  bool has_other() const;
  private:
  bool _internal_has_other() const;
  public:
  void clear_other();
  const ::ProjectJ::Player& other() const;
  PROTOBUF_NODISCARD ::ProjectJ::Player* release_other();
  ::ProjectJ::Player* mutable_other();
  void set_allocated_other(::ProjectJ::Player* other);
  private:
  const ::ProjectJ::Player& _internal_other() const;
  ::ProjectJ::Player* _internal_mutable_other();
  public:
  void unsafe_arena_set_allocated_other(
      ::ProjectJ::Player* other);
  ::ProjectJ::Player* unsafe_arena_release_other();

  // int32 room_id = 1;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // int32 slot_index = 2;
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_OTHER_ENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Player* other_;
    int32_t room_id_;
    int32_t slot_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_OTHER_LEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_OTHER_LEAVE) */ {
 public:
  inline S_ROOM_OTHER_LEAVE() : S_ROOM_OTHER_LEAVE(nullptr) {}
  ~S_ROOM_OTHER_LEAVE() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_OTHER_LEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_OTHER_LEAVE(const S_ROOM_OTHER_LEAVE& from);
  S_ROOM_OTHER_LEAVE(S_ROOM_OTHER_LEAVE&& from) noexcept
    : S_ROOM_OTHER_LEAVE() {
    *this = ::std::move(from);
  }

  inline S_ROOM_OTHER_LEAVE& operator=(const S_ROOM_OTHER_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_OTHER_LEAVE& operator=(S_ROOM_OTHER_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_OTHER_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_OTHER_LEAVE* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_OTHER_LEAVE*>(
               &_S_ROOM_OTHER_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_ROOM_OTHER_LEAVE& a, S_ROOM_OTHER_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_OTHER_LEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_OTHER_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_OTHER_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_OTHER_LEAVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_OTHER_LEAVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_OTHER_LEAVE& from) {
    S_ROOM_OTHER_LEAVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_OTHER_LEAVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_OTHER_LEAVE";
  }
  protected:
  explicit S_ROOM_OTHER_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kSlotIndexFieldNumber = 2,
  };
  // int32 room_id = 1;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // int32 slot_index = 2;
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_OTHER_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t room_id_;
    int32_t slot_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_READY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_ROOM_READY) */ {
 public:
  inline C_ROOM_READY() : C_ROOM_READY(nullptr) {}
  ~C_ROOM_READY() override;
  explicit PROTOBUF_CONSTEXPR C_ROOM_READY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_READY(const C_ROOM_READY& from);
  C_ROOM_READY(C_ROOM_READY&& from) noexcept
    : C_ROOM_READY() {
    *this = ::std::move(from);
  }

  inline C_ROOM_READY& operator=(const C_ROOM_READY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_READY& operator=(C_ROOM_READY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_READY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_READY* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_READY*>(
               &_C_ROOM_READY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(C_ROOM_READY& a, C_ROOM_READY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_READY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_READY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOM_READY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOM_READY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ROOM_READY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ROOM_READY& from) {
    C_ROOM_READY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_READY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_ROOM_READY";
  }
  protected:
  explicit C_ROOM_READY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kSlotIndexFieldNumber = 3,
  };
  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // int32 slot_index = 3;
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_ROOM_READY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t account_id_;
    int32_t room_id_;
    int32_t slot_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_READY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_READY) */ {
 public:
  inline S_ROOM_READY() : S_ROOM_READY(nullptr) {}
  ~S_ROOM_READY() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_READY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_READY(const S_ROOM_READY& from);
  S_ROOM_READY(S_ROOM_READY&& from) noexcept
    : S_ROOM_READY() {
    *this = ::std::move(from);
  }

  inline S_ROOM_READY& operator=(const S_ROOM_READY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_READY& operator=(S_ROOM_READY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_READY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_READY* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_READY*>(
               &_S_ROOM_READY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(S_ROOM_READY& a, S_ROOM_READY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_READY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_READY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_READY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_READY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_READY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_READY& from) {
    S_ROOM_READY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_READY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_READY";
  }
  protected:
  explicit S_ROOM_READY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlotIndexFieldNumber = 1,
    kIsReadyFieldNumber = 2,
  };
  // int32 slot_index = 1;
  void clear_slot_index();
  int32_t slot_index() const;
  void set_slot_index(int32_t value);
  private:
  int32_t _internal_slot_index() const;
  void _internal_set_slot_index(int32_t value);
  public:

  // bool is_ready = 2;
  void clear_is_ready();
  bool is_ready() const;
  void set_is_ready(bool value);
  private:
  bool _internal_is_ready() const;
  void _internal_set_is_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_READY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t slot_index_;
    bool is_ready_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_ROOM_CHAT) */ {
 public:
  inline C_ROOM_CHAT() : C_ROOM_CHAT(nullptr) {}
  ~C_ROOM_CHAT() override;
  explicit PROTOBUF_CONSTEXPR C_ROOM_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_CHAT(const C_ROOM_CHAT& from);
  C_ROOM_CHAT(C_ROOM_CHAT&& from) noexcept
    : C_ROOM_CHAT() {
    *this = ::std::move(from);
  }

  inline C_ROOM_CHAT& operator=(const C_ROOM_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_CHAT& operator=(C_ROOM_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_CHAT*>(
               &_C_ROOM_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(C_ROOM_CHAT& a, C_ROOM_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOM_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOM_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ROOM_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ROOM_CHAT& from) {
    C_ROOM_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_ROOM_CHAT";
  }
  protected:
  explicit C_ROOM_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kChatFieldNumber = 4,
    kAccountIdFieldNumber = 1,
    kRoomIdFieldNumber = 3,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string chat = 4;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // int32 room_id = 3;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_ROOM_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
    int32_t account_id_;
    int32_t room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_CHAT) */ {
 public:
  inline S_ROOM_CHAT() : S_ROOM_CHAT(nullptr) {}
  ~S_ROOM_CHAT() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_CHAT(const S_ROOM_CHAT& from);
  S_ROOM_CHAT(S_ROOM_CHAT&& from) noexcept
    : S_ROOM_CHAT() {
    *this = ::std::move(from);
  }

  inline S_ROOM_CHAT& operator=(const S_ROOM_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_CHAT& operator=(S_ROOM_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_CHAT*>(
               &_S_ROOM_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(S_ROOM_CHAT& a, S_ROOM_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_CHAT& from) {
    S_ROOM_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_CHAT";
  }
  protected:
  explicit S_ROOM_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kChatFieldNumber = 4,
    kAccountIdFieldNumber = 1,
    kRoomIdFieldNumber = 3,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string chat = 4;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // int32 room_id = 3;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
    int32_t account_id_;
    int32_t room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_STANDBY_MATCH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_STANDBY_MATCH) */ {
 public:
  inline S_ROOM_STANDBY_MATCH() : S_ROOM_STANDBY_MATCH(nullptr) {}
  ~S_ROOM_STANDBY_MATCH() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_STANDBY_MATCH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_STANDBY_MATCH(const S_ROOM_STANDBY_MATCH& from);
  S_ROOM_STANDBY_MATCH(S_ROOM_STANDBY_MATCH&& from) noexcept
    : S_ROOM_STANDBY_MATCH() {
    *this = ::std::move(from);
  }

  inline S_ROOM_STANDBY_MATCH& operator=(const S_ROOM_STANDBY_MATCH& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_STANDBY_MATCH& operator=(S_ROOM_STANDBY_MATCH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_STANDBY_MATCH& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_STANDBY_MATCH* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_STANDBY_MATCH*>(
               &_S_ROOM_STANDBY_MATCH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S_ROOM_STANDBY_MATCH& a, S_ROOM_STANDBY_MATCH& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_STANDBY_MATCH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_STANDBY_MATCH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_STANDBY_MATCH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_STANDBY_MATCH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_STANDBY_MATCH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_STANDBY_MATCH& from) {
    S_ROOM_STANDBY_MATCH::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_STANDBY_MATCH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_STANDBY_MATCH";
  }
  protected:
  explicit S_ROOM_STANDBY_MATCH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // uint32 count = 1;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_STANDBY_MATCH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_START_MATCH final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_START_MATCH) */ {
 public:
  inline S_ROOM_START_MATCH() : S_ROOM_START_MATCH(nullptr) {}
  ~S_ROOM_START_MATCH() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_START_MATCH(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_START_MATCH(const S_ROOM_START_MATCH& from);
  S_ROOM_START_MATCH(S_ROOM_START_MATCH&& from) noexcept
    : S_ROOM_START_MATCH() {
    *this = ::std::move(from);
  }

  inline S_ROOM_START_MATCH& operator=(const S_ROOM_START_MATCH& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_START_MATCH& operator=(S_ROOM_START_MATCH&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_START_MATCH& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_START_MATCH* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_START_MATCH*>(
               &_S_ROOM_START_MATCH_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(S_ROOM_START_MATCH& a, S_ROOM_START_MATCH& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_START_MATCH* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_START_MATCH* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_START_MATCH* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_START_MATCH>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_START_MATCH& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_START_MATCH& from) {
    S_ROOM_START_MATCH::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_START_MATCH* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_START_MATCH";
  }
  protected:
  explicit S_ROOM_START_MATCH(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
  };
  // bool start = 1;
  void clear_start();
  bool start() const;
  void set_start(bool value);
  private:
  bool _internal_start() const;
  void _internal_set_start(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_START_MATCH)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool start_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_READY_TO_RECEIVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_READY_TO_RECEIVE) */ {
 public:
  inline C_MATCH_READY_TO_RECEIVE() : C_MATCH_READY_TO_RECEIVE(nullptr) {}
  ~C_MATCH_READY_TO_RECEIVE() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_READY_TO_RECEIVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_READY_TO_RECEIVE(const C_MATCH_READY_TO_RECEIVE& from);
  C_MATCH_READY_TO_RECEIVE(C_MATCH_READY_TO_RECEIVE&& from) noexcept
    : C_MATCH_READY_TO_RECEIVE() {
    *this = ::std::move(from);
  }

  inline C_MATCH_READY_TO_RECEIVE& operator=(const C_MATCH_READY_TO_RECEIVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_READY_TO_RECEIVE& operator=(C_MATCH_READY_TO_RECEIVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_READY_TO_RECEIVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_READY_TO_RECEIVE* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_READY_TO_RECEIVE*>(
               &_C_MATCH_READY_TO_RECEIVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(C_MATCH_READY_TO_RECEIVE& a, C_MATCH_READY_TO_RECEIVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_READY_TO_RECEIVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_READY_TO_RECEIVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_READY_TO_RECEIVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_READY_TO_RECEIVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_READY_TO_RECEIVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_READY_TO_RECEIVE& from) {
    C_MATCH_READY_TO_RECEIVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_READY_TO_RECEIVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_READY_TO_RECEIVE";
  }
  protected:
  explicit C_MATCH_READY_TO_RECEIVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_READY_TO_RECEIVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_ALL_READY_TO_RECIEVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_ALL_READY_TO_RECIEVE) */ {
 public:
  inline S_MATCH_ALL_READY_TO_RECIEVE() : S_MATCH_ALL_READY_TO_RECIEVE(nullptr) {}
  ~S_MATCH_ALL_READY_TO_RECIEVE() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_ALL_READY_TO_RECIEVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_ALL_READY_TO_RECIEVE(const S_MATCH_ALL_READY_TO_RECIEVE& from);
  S_MATCH_ALL_READY_TO_RECIEVE(S_MATCH_ALL_READY_TO_RECIEVE&& from) noexcept
    : S_MATCH_ALL_READY_TO_RECIEVE() {
    *this = ::std::move(from);
  }

  inline S_MATCH_ALL_READY_TO_RECIEVE& operator=(const S_MATCH_ALL_READY_TO_RECIEVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_ALL_READY_TO_RECIEVE& operator=(S_MATCH_ALL_READY_TO_RECIEVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_ALL_READY_TO_RECIEVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_ALL_READY_TO_RECIEVE* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_ALL_READY_TO_RECIEVE*>(
               &_S_MATCH_ALL_READY_TO_RECIEVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(S_MATCH_ALL_READY_TO_RECIEVE& a, S_MATCH_ALL_READY_TO_RECIEVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_ALL_READY_TO_RECIEVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_ALL_READY_TO_RECIEVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_ALL_READY_TO_RECIEVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_ALL_READY_TO_RECIEVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_ALL_READY_TO_RECIEVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_ALL_READY_TO_RECIEVE& from) {
    S_MATCH_ALL_READY_TO_RECIEVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_ALL_READY_TO_RECIEVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_ALL_READY_TO_RECIEVE";
  }
  protected:
  explicit S_MATCH_ALL_READY_TO_RECIEVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kYourPlayerIndexFieldNumber = 1,
  };
  // .ProjectJ.MatchInitInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ProjectJ::MatchInitInfo& info() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInitInfo* release_info();
  ::ProjectJ::MatchInitInfo* mutable_info();
  void set_allocated_info(::ProjectJ::MatchInitInfo* info);
  private:
  const ::ProjectJ::MatchInitInfo& _internal_info() const;
  ::ProjectJ::MatchInitInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ProjectJ::MatchInitInfo* info);
  ::ProjectJ::MatchInitInfo* unsafe_arena_release_info();

  // int32 your_player_index = 1;
  void clear_your_player_index();
  int32_t your_player_index() const;
  void set_your_player_index(int32_t value);
  private:
  int32_t _internal_your_player_index() const;
  void _internal_set_your_player_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_ALL_READY_TO_RECIEVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::MatchInitInfo* info_;
    int32_t your_player_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_ITEM_GENERATED final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_ITEM_GENERATED) */ {
 public:
  inline S_MATCH_ITEM_GENERATED() : S_MATCH_ITEM_GENERATED(nullptr) {}
  ~S_MATCH_ITEM_GENERATED() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_ITEM_GENERATED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_ITEM_GENERATED(const S_MATCH_ITEM_GENERATED& from);
  S_MATCH_ITEM_GENERATED(S_MATCH_ITEM_GENERATED&& from) noexcept
    : S_MATCH_ITEM_GENERATED() {
    *this = ::std::move(from);
  }

  inline S_MATCH_ITEM_GENERATED& operator=(const S_MATCH_ITEM_GENERATED& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_ITEM_GENERATED& operator=(S_MATCH_ITEM_GENERATED&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_ITEM_GENERATED& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_ITEM_GENERATED* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_ITEM_GENERATED*>(
               &_S_MATCH_ITEM_GENERATED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(S_MATCH_ITEM_GENERATED& a, S_MATCH_ITEM_GENERATED& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_ITEM_GENERATED* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_ITEM_GENERATED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_ITEM_GENERATED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_ITEM_GENERATED>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_ITEM_GENERATED& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_ITEM_GENERATED& from) {
    S_MATCH_ITEM_GENERATED::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_ITEM_GENERATED* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_ITEM_GENERATED";
  }
  protected:
  explicit S_MATCH_ITEM_GENERATED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .ProjectJ.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::ProjectJ::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >*
      mutable_items();
  private:
  const ::ProjectJ::Item& _internal_items(int index) const;
  ::ProjectJ::Item* _internal_add_items();
  public:
  const ::ProjectJ::Item& items(int index) const;
  ::ProjectJ::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_ITEM_GENERATED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_READY_TO_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_READY_TO_START) */ {
 public:
  inline C_MATCH_READY_TO_START() : C_MATCH_READY_TO_START(nullptr) {}
  ~C_MATCH_READY_TO_START() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_READY_TO_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_READY_TO_START(const C_MATCH_READY_TO_START& from);
  C_MATCH_READY_TO_START(C_MATCH_READY_TO_START&& from) noexcept
    : C_MATCH_READY_TO_START() {
    *this = ::std::move(from);
  }

  inline C_MATCH_READY_TO_START& operator=(const C_MATCH_READY_TO_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_READY_TO_START& operator=(C_MATCH_READY_TO_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_READY_TO_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_READY_TO_START* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_READY_TO_START*>(
               &_C_MATCH_READY_TO_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(C_MATCH_READY_TO_START& a, C_MATCH_READY_TO_START& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_READY_TO_START* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_READY_TO_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_READY_TO_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_READY_TO_START>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_READY_TO_START& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_READY_TO_START& from) {
    C_MATCH_READY_TO_START::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_READY_TO_START* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_READY_TO_START";
  }
  protected:
  explicit C_MATCH_READY_TO_START(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
  };
  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_READY_TO_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t player_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_START final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_START) */ {
 public:
  inline S_MATCH_START() : S_MATCH_START(nullptr) {}
  ~S_MATCH_START() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_START(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_START(const S_MATCH_START& from);
  S_MATCH_START(S_MATCH_START&& from) noexcept
    : S_MATCH_START() {
    *this = ::std::move(from);
  }

  inline S_MATCH_START& operator=(const S_MATCH_START& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_START& operator=(S_MATCH_START&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_START& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_START* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_START*>(
               &_S_MATCH_START_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(S_MATCH_START& a, S_MATCH_START& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_START* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_START* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_START* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_START>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_START& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_START& from) {
    S_MATCH_START::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_START* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_START";
  }
  protected:
  explicit S_MATCH_START(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndTickFieldNumber = 1,
    kCurrentTickFieldNumber = 2,
  };
  // uint64 end_tick = 1;
  void clear_end_tick();
  uint64_t end_tick() const;
  void set_end_tick(uint64_t value);
  private:
  uint64_t _internal_end_tick() const;
  void _internal_set_end_tick(uint64_t value);
  public:

  // uint64 current_tick = 2;
  void clear_current_tick();
  uint64_t current_tick() const;
  void set_current_tick(uint64_t value);
  private:
  uint64_t _internal_current_tick() const;
  void _internal_set_current_tick(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_START)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t end_tick_;
    uint64_t current_tick_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_INFO_MyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_INFO.MyInfo) */ {
 public:
  inline C_MATCH_INFO_MyInfo() : C_MATCH_INFO_MyInfo(nullptr) {}
  ~C_MATCH_INFO_MyInfo() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_INFO_MyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_INFO_MyInfo(const C_MATCH_INFO_MyInfo& from);
  C_MATCH_INFO_MyInfo(C_MATCH_INFO_MyInfo&& from) noexcept
    : C_MATCH_INFO_MyInfo() {
    *this = ::std::move(from);
  }

  inline C_MATCH_INFO_MyInfo& operator=(const C_MATCH_INFO_MyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_INFO_MyInfo& operator=(C_MATCH_INFO_MyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_INFO_MyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_INFO_MyInfo* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_INFO_MyInfo*>(
               &_C_MATCH_INFO_MyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(C_MATCH_INFO_MyInfo& a, C_MATCH_INFO_MyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_INFO_MyInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_INFO_MyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_INFO_MyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_INFO_MyInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_INFO_MyInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_INFO_MyInfo& from) {
    C_MATCH_INFO_MyInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_INFO_MyInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_INFO.MyInfo";
  }
  protected:
  explicit C_MATCH_INFO_MyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kRotationFieldNumber = 2,
  };
  // .ProjectJ.Vector position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ProjectJ::Vector& position() const;
  PROTOBUF_NODISCARD ::ProjectJ::Vector* release_position();
  ::ProjectJ::Vector* mutable_position();
  void set_allocated_position(::ProjectJ::Vector* position);
  private:
  const ::ProjectJ::Vector& _internal_position() const;
  ::ProjectJ::Vector* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ProjectJ::Vector* position);
  ::ProjectJ::Vector* unsafe_arena_release_position();

  // .ProjectJ.Rotator rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::ProjectJ::Rotator& rotation() const;
  PROTOBUF_NODISCARD ::ProjectJ::Rotator* release_rotation();
  ::ProjectJ::Rotator* mutable_rotation();
  void set_allocated_rotation(::ProjectJ::Rotator* rotation);
  private:
  const ::ProjectJ::Rotator& _internal_rotation() const;
  ::ProjectJ::Rotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::ProjectJ::Rotator* rotation);
  ::ProjectJ::Rotator* unsafe_arena_release_rotation();

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_INFO.MyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Vector* position_;
    ::ProjectJ::Rotator* rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_INFO) */ {
 public:
  inline C_MATCH_INFO() : C_MATCH_INFO(nullptr) {}
  ~C_MATCH_INFO() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_INFO(const C_MATCH_INFO& from);
  C_MATCH_INFO(C_MATCH_INFO&& from) noexcept
    : C_MATCH_INFO() {
    *this = ::std::move(from);
  }

  inline C_MATCH_INFO& operator=(const C_MATCH_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_INFO& operator=(C_MATCH_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_INFO* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_INFO*>(
               &_C_MATCH_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(C_MATCH_INFO& a, C_MATCH_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_INFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_INFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_INFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_INFO& from) {
    C_MATCH_INFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_INFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_INFO";
  }
  protected:
  explicit C_MATCH_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef C_MATCH_INFO_MyInfo MyInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kPlayerIndexFieldNumber = 1,
  };
  // .ProjectJ.C_MATCH_INFO.MyInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ProjectJ::C_MATCH_INFO_MyInfo& info() const;
  PROTOBUF_NODISCARD ::ProjectJ::C_MATCH_INFO_MyInfo* release_info();
  ::ProjectJ::C_MATCH_INFO_MyInfo* mutable_info();
  void set_allocated_info(::ProjectJ::C_MATCH_INFO_MyInfo* info);
  private:
  const ::ProjectJ::C_MATCH_INFO_MyInfo& _internal_info() const;
  ::ProjectJ::C_MATCH_INFO_MyInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ProjectJ::C_MATCH_INFO_MyInfo* info);
  ::ProjectJ::C_MATCH_INFO_MyInfo* unsafe_arena_release_info();

  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::C_MATCH_INFO_MyInfo* info_;
    int32_t player_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_INFO final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_INFO) */ {
 public:
  inline S_MATCH_INFO() : S_MATCH_INFO(nullptr) {}
  ~S_MATCH_INFO() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_INFO(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_INFO(const S_MATCH_INFO& from);
  S_MATCH_INFO(S_MATCH_INFO&& from) noexcept
    : S_MATCH_INFO() {
    *this = ::std::move(from);
  }

  inline S_MATCH_INFO& operator=(const S_MATCH_INFO& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_INFO& operator=(S_MATCH_INFO&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_INFO& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_INFO* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_INFO*>(
               &_S_MATCH_INFO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(S_MATCH_INFO& a, S_MATCH_INFO& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_INFO* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_INFO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_INFO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_INFO>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_INFO& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_INFO& from) {
    S_MATCH_INFO::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_INFO* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_INFO";
  }
  protected:
  explicit S_MATCH_INFO(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kCurrentTickFieldNumber = 1,
  };
  // .ProjectJ.MatchInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ProjectJ::MatchInfo& info() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInfo* release_info();
  ::ProjectJ::MatchInfo* mutable_info();
  void set_allocated_info(::ProjectJ::MatchInfo* info);
  private:
  const ::ProjectJ::MatchInfo& _internal_info() const;
  ::ProjectJ::MatchInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ProjectJ::MatchInfo* info);
  ::ProjectJ::MatchInfo* unsafe_arena_release_info();

  // uint64 current_tick = 1;
  void clear_current_tick();
  uint64_t current_tick() const;
  void set_current_tick(uint64_t value);
  private:
  uint64_t _internal_current_tick() const;
  void _internal_set_current_tick(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_INFO)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::MatchInfo* info_;
    uint64_t current_tick_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_END final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_END) */ {
 public:
  inline S_MATCH_END() : S_MATCH_END(nullptr) {}
  ~S_MATCH_END() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_END(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_END(const S_MATCH_END& from);
  S_MATCH_END(S_MATCH_END&& from) noexcept
    : S_MATCH_END() {
    *this = ::std::move(from);
  }

  inline S_MATCH_END& operator=(const S_MATCH_END& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_END& operator=(S_MATCH_END&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_END& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_END* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_END*>(
               &_S_MATCH_END_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(S_MATCH_END& a, S_MATCH_END& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_END* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_END* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_END* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_END>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_END& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_END& from) {
    S_MATCH_END::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_END* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_END";
  }
  protected:
  explicit S_MATCH_END(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChaserScoreFieldNumber = 1,
    kFugitivieFirstScoreFieldNumber = 2,
    kFugitivieSecondScoreFieldNumber = 3,
    kFugitivieThirdScoreFieldNumber = 4,
  };
  // int32 chaser_score = 1;
  void clear_chaser_score();
  int32_t chaser_score() const;
  void set_chaser_score(int32_t value);
  private:
  int32_t _internal_chaser_score() const;
  void _internal_set_chaser_score(int32_t value);
  public:

  // int32 fugitivie_first_score = 2;
  void clear_fugitivie_first_score();
  int32_t fugitivie_first_score() const;
  void set_fugitivie_first_score(int32_t value);
  private:
  int32_t _internal_fugitivie_first_score() const;
  void _internal_set_fugitivie_first_score(int32_t value);
  public:

  // int32 fugitivie_second_score = 3;
  void clear_fugitivie_second_score();
  int32_t fugitivie_second_score() const;
  void set_fugitivie_second_score(int32_t value);
  private:
  int32_t _internal_fugitivie_second_score() const;
  void _internal_set_fugitivie_second_score(int32_t value);
  public:

  // int32 fugitivie_third_score = 4;
  void clear_fugitivie_third_score();
  int32_t fugitivie_third_score() const;
  void set_fugitivie_third_score(int32_t value);
  private:
  int32_t _internal_fugitivie_third_score() const;
  void _internal_set_fugitivie_third_score(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_END)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t chaser_score_;
    int32_t fugitivie_first_score_;
    int32_t fugitivie_second_score_;
    int32_t fugitivie_third_score_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_ITEM_PICKUP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_ITEM_PICKUP) */ {
 public:
  inline C_MATCH_ITEM_PICKUP() : C_MATCH_ITEM_PICKUP(nullptr) {}
  ~C_MATCH_ITEM_PICKUP() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_ITEM_PICKUP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_ITEM_PICKUP(const C_MATCH_ITEM_PICKUP& from);
  C_MATCH_ITEM_PICKUP(C_MATCH_ITEM_PICKUP&& from) noexcept
    : C_MATCH_ITEM_PICKUP() {
    *this = ::std::move(from);
  }

  inline C_MATCH_ITEM_PICKUP& operator=(const C_MATCH_ITEM_PICKUP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_ITEM_PICKUP& operator=(C_MATCH_ITEM_PICKUP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_ITEM_PICKUP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_ITEM_PICKUP* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_ITEM_PICKUP*>(
               &_C_MATCH_ITEM_PICKUP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(C_MATCH_ITEM_PICKUP& a, C_MATCH_ITEM_PICKUP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_ITEM_PICKUP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_ITEM_PICKUP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_ITEM_PICKUP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_ITEM_PICKUP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_ITEM_PICKUP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_ITEM_PICKUP& from) {
    C_MATCH_ITEM_PICKUP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_ITEM_PICKUP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_ITEM_PICKUP";
  }
  protected:
  explicit C_MATCH_ITEM_PICKUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
    kItemIndexFieldNumber = 2,
  };
  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // int32 item_index = 2;
  void clear_item_index();
  int32_t item_index() const;
  void set_item_index(int32_t value);
  private:
  int32_t _internal_item_index() const;
  void _internal_set_item_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_ITEM_PICKUP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t player_index_;
    int32_t item_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_ITEM_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_ITEM_MOVE) */ {
 public:
  inline C_MATCH_ITEM_MOVE() : C_MATCH_ITEM_MOVE(nullptr) {}
  ~C_MATCH_ITEM_MOVE() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_ITEM_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_ITEM_MOVE(const C_MATCH_ITEM_MOVE& from);
  C_MATCH_ITEM_MOVE(C_MATCH_ITEM_MOVE&& from) noexcept
    : C_MATCH_ITEM_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MATCH_ITEM_MOVE& operator=(const C_MATCH_ITEM_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_ITEM_MOVE& operator=(C_MATCH_ITEM_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_ITEM_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_ITEM_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_ITEM_MOVE*>(
               &_C_MATCH_ITEM_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(C_MATCH_ITEM_MOVE& a, C_MATCH_ITEM_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_ITEM_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_ITEM_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_ITEM_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_ITEM_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_ITEM_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_ITEM_MOVE& from) {
    C_MATCH_ITEM_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_ITEM_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_ITEM_MOVE";
  }
  protected:
  explicit C_MATCH_ITEM_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
    kFromIndexFieldNumber = 2,
    kToIndexFieldNumber = 3,
    kItemIndexFieldNumber = 4,
    kTargetTopLeftIndexFieldNumber = 5,
    kIsItemRotatedFieldNumber = 6,
  };
  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // int32 from_index = 2;
  void clear_from_index();
  int32_t from_index() const;
  void set_from_index(int32_t value);
  private:
  int32_t _internal_from_index() const;
  void _internal_set_from_index(int32_t value);
  public:

  // int32 to_index = 3;
  void clear_to_index();
  int32_t to_index() const;
  void set_to_index(int32_t value);
  private:
  int32_t _internal_to_index() const;
  void _internal_set_to_index(int32_t value);
  public:

  // int32 item_index = 4;
  void clear_item_index();
  int32_t item_index() const;
  void set_item_index(int32_t value);
  private:
  int32_t _internal_item_index() const;
  void _internal_set_item_index(int32_t value);
  public:

  // int32 target_top_left_index = 5;
  void clear_target_top_left_index();
  int32_t target_top_left_index() const;
  void set_target_top_left_index(int32_t value);
  private:
  int32_t _internal_target_top_left_index() const;
  void _internal_set_target_top_left_index(int32_t value);
  public:

  // bool is_item_rotated = 6;
  void clear_is_item_rotated();
  bool is_item_rotated() const;
  void set_is_item_rotated(bool value);
  private:
  bool _internal_is_item_rotated() const;
  void _internal_set_is_item_rotated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_ITEM_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t player_index_;
    int32_t from_index_;
    int32_t to_index_;
    int32_t item_index_;
    int32_t target_top_left_index_;
    bool is_item_rotated_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_ITEM_DROP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_ITEM_DROP) */ {
 public:
  inline C_MATCH_ITEM_DROP() : C_MATCH_ITEM_DROP(nullptr) {}
  ~C_MATCH_ITEM_DROP() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_ITEM_DROP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_ITEM_DROP(const C_MATCH_ITEM_DROP& from);
  C_MATCH_ITEM_DROP(C_MATCH_ITEM_DROP&& from) noexcept
    : C_MATCH_ITEM_DROP() {
    *this = ::std::move(from);
  }

  inline C_MATCH_ITEM_DROP& operator=(const C_MATCH_ITEM_DROP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_ITEM_DROP& operator=(C_MATCH_ITEM_DROP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_ITEM_DROP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_ITEM_DROP* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_ITEM_DROP*>(
               &_C_MATCH_ITEM_DROP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(C_MATCH_ITEM_DROP& a, C_MATCH_ITEM_DROP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_ITEM_DROP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_ITEM_DROP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_ITEM_DROP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_ITEM_DROP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_ITEM_DROP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_ITEM_DROP& from) {
    C_MATCH_ITEM_DROP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_ITEM_DROP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_ITEM_DROP";
  }
  protected:
  explicit C_MATCH_ITEM_DROP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropItemPositionFieldNumber = 3,
    kDropItemRotationFieldNumber = 4,
    kPlayerIndexFieldNumber = 1,
    kItemIndexFieldNumber = 2,
  };
  // .ProjectJ.Vector drop_item_position = 3;
  bool has_drop_item_position() const;
  private:
  bool _internal_has_drop_item_position() const;
  public:
  void clear_drop_item_position();
  const ::ProjectJ::Vector& drop_item_position() const;
  PROTOBUF_NODISCARD ::ProjectJ::Vector* release_drop_item_position();
  ::ProjectJ::Vector* mutable_drop_item_position();
  void set_allocated_drop_item_position(::ProjectJ::Vector* drop_item_position);
  private:
  const ::ProjectJ::Vector& _internal_drop_item_position() const;
  ::ProjectJ::Vector* _internal_mutable_drop_item_position();
  public:
  void unsafe_arena_set_allocated_drop_item_position(
      ::ProjectJ::Vector* drop_item_position);
  ::ProjectJ::Vector* unsafe_arena_release_drop_item_position();

  // .ProjectJ.Rotator drop_item_rotation = 4;
  bool has_drop_item_rotation() const;
  private:
  bool _internal_has_drop_item_rotation() const;
  public:
  void clear_drop_item_rotation();
  const ::ProjectJ::Rotator& drop_item_rotation() const;
  PROTOBUF_NODISCARD ::ProjectJ::Rotator* release_drop_item_rotation();
  ::ProjectJ::Rotator* mutable_drop_item_rotation();
  void set_allocated_drop_item_rotation(::ProjectJ::Rotator* drop_item_rotation);
  private:
  const ::ProjectJ::Rotator& _internal_drop_item_rotation() const;
  ::ProjectJ::Rotator* _internal_mutable_drop_item_rotation();
  public:
  void unsafe_arena_set_allocated_drop_item_rotation(
      ::ProjectJ::Rotator* drop_item_rotation);
  ::ProjectJ::Rotator* unsafe_arena_release_drop_item_rotation();

  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // int32 item_index = 2;
  void clear_item_index();
  int32_t item_index() const;
  void set_item_index(int32_t value);
  private:
  int32_t _internal_item_index() const;
  void _internal_set_item_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_ITEM_DROP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Vector* drop_item_position_;
    ::ProjectJ::Rotator* drop_item_rotation_;
    int32_t player_index_;
    int32_t item_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_ITEM_SOMEONE_PICKUP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_ITEM_SOMEONE_PICKUP) */ {
 public:
  inline S_MATCH_ITEM_SOMEONE_PICKUP() : S_MATCH_ITEM_SOMEONE_PICKUP(nullptr) {}
  ~S_MATCH_ITEM_SOMEONE_PICKUP() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_ITEM_SOMEONE_PICKUP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_ITEM_SOMEONE_PICKUP(const S_MATCH_ITEM_SOMEONE_PICKUP& from);
  S_MATCH_ITEM_SOMEONE_PICKUP(S_MATCH_ITEM_SOMEONE_PICKUP&& from) noexcept
    : S_MATCH_ITEM_SOMEONE_PICKUP() {
    *this = ::std::move(from);
  }

  inline S_MATCH_ITEM_SOMEONE_PICKUP& operator=(const S_MATCH_ITEM_SOMEONE_PICKUP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_ITEM_SOMEONE_PICKUP& operator=(S_MATCH_ITEM_SOMEONE_PICKUP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_ITEM_SOMEONE_PICKUP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_ITEM_SOMEONE_PICKUP* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_ITEM_SOMEONE_PICKUP*>(
               &_S_MATCH_ITEM_SOMEONE_PICKUP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(S_MATCH_ITEM_SOMEONE_PICKUP& a, S_MATCH_ITEM_SOMEONE_PICKUP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_ITEM_SOMEONE_PICKUP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_ITEM_SOMEONE_PICKUP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_ITEM_SOMEONE_PICKUP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_ITEM_SOMEONE_PICKUP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_ITEM_SOMEONE_PICKUP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_ITEM_SOMEONE_PICKUP& from) {
    S_MATCH_ITEM_SOMEONE_PICKUP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_ITEM_SOMEONE_PICKUP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_ITEM_SOMEONE_PICKUP";
  }
  protected:
  explicit S_MATCH_ITEM_SOMEONE_PICKUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
    kItemIndexFieldNumber = 2,
    kTopLeftIndexFieldNumber = 3,
    kIsItemRotatedFieldNumber = 4,
  };
  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // int32 item_index = 2;
  void clear_item_index();
  int32_t item_index() const;
  void set_item_index(int32_t value);
  private:
  int32_t _internal_item_index() const;
  void _internal_set_item_index(int32_t value);
  public:

  // int32 top_left_index = 3;
  void clear_top_left_index();
  int32_t top_left_index() const;
  void set_top_left_index(int32_t value);
  private:
  int32_t _internal_top_left_index() const;
  void _internal_set_top_left_index(int32_t value);
  public:

  // bool is_item_rotated = 4;
  void clear_is_item_rotated();
  bool is_item_rotated() const;
  void set_is_item_rotated(bool value);
  private:
  bool _internal_is_item_rotated() const;
  void _internal_set_is_item_rotated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_ITEM_SOMEONE_PICKUP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t player_index_;
    int32_t item_index_;
    int32_t top_left_index_;
    bool is_item_rotated_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_ITEM_SOMEONE_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE) */ {
 public:
  inline S_MATCH_ITEM_SOMEONE_MOVE() : S_MATCH_ITEM_SOMEONE_MOVE(nullptr) {}
  ~S_MATCH_ITEM_SOMEONE_MOVE() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_ITEM_SOMEONE_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_ITEM_SOMEONE_MOVE(const S_MATCH_ITEM_SOMEONE_MOVE& from);
  S_MATCH_ITEM_SOMEONE_MOVE(S_MATCH_ITEM_SOMEONE_MOVE&& from) noexcept
    : S_MATCH_ITEM_SOMEONE_MOVE() {
    *this = ::std::move(from);
  }

  inline S_MATCH_ITEM_SOMEONE_MOVE& operator=(const S_MATCH_ITEM_SOMEONE_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_ITEM_SOMEONE_MOVE& operator=(S_MATCH_ITEM_SOMEONE_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_ITEM_SOMEONE_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_ITEM_SOMEONE_MOVE* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_ITEM_SOMEONE_MOVE*>(
               &_S_MATCH_ITEM_SOMEONE_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(S_MATCH_ITEM_SOMEONE_MOVE& a, S_MATCH_ITEM_SOMEONE_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_ITEM_SOMEONE_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_ITEM_SOMEONE_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_ITEM_SOMEONE_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_ITEM_SOMEONE_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_ITEM_SOMEONE_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_ITEM_SOMEONE_MOVE& from) {
    S_MATCH_ITEM_SOMEONE_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_ITEM_SOMEONE_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE";
  }
  protected:
  explicit S_MATCH_ITEM_SOMEONE_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
    kFromIndexFieldNumber = 2,
    kToIndexFieldNumber = 3,
    kItemIndexFieldNumber = 4,
    kTopLeftIndexFieldNumber = 5,
    kIsItemRotatedFieldNumber = 6,
  };
  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // int32 from_index = 2;
  void clear_from_index();
  int32_t from_index() const;
  void set_from_index(int32_t value);
  private:
  int32_t _internal_from_index() const;
  void _internal_set_from_index(int32_t value);
  public:

  // int32 to_index = 3;
  void clear_to_index();
  int32_t to_index() const;
  void set_to_index(int32_t value);
  private:
  int32_t _internal_to_index() const;
  void _internal_set_to_index(int32_t value);
  public:

  // int32 item_index = 4;
  void clear_item_index();
  int32_t item_index() const;
  void set_item_index(int32_t value);
  private:
  int32_t _internal_item_index() const;
  void _internal_set_item_index(int32_t value);
  public:

  // int32 top_left_index = 5;
  void clear_top_left_index();
  int32_t top_left_index() const;
  void set_top_left_index(int32_t value);
  private:
  int32_t _internal_top_left_index() const;
  void _internal_set_top_left_index(int32_t value);
  public:

  // bool is_item_rotated = 6;
  void clear_is_item_rotated();
  bool is_item_rotated() const;
  void set_is_item_rotated(bool value);
  private:
  bool _internal_is_item_rotated() const;
  void _internal_set_is_item_rotated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t player_index_;
    int32_t from_index_;
    int32_t to_index_;
    int32_t item_index_;
    int32_t top_left_index_;
    bool is_item_rotated_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_ITEM_SOMEONE_DROP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP) */ {
 public:
  inline S_MATCH_ITEM_SOMEONE_DROP() : S_MATCH_ITEM_SOMEONE_DROP(nullptr) {}
  ~S_MATCH_ITEM_SOMEONE_DROP() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_ITEM_SOMEONE_DROP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_ITEM_SOMEONE_DROP(const S_MATCH_ITEM_SOMEONE_DROP& from);
  S_MATCH_ITEM_SOMEONE_DROP(S_MATCH_ITEM_SOMEONE_DROP&& from) noexcept
    : S_MATCH_ITEM_SOMEONE_DROP() {
    *this = ::std::move(from);
  }

  inline S_MATCH_ITEM_SOMEONE_DROP& operator=(const S_MATCH_ITEM_SOMEONE_DROP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_ITEM_SOMEONE_DROP& operator=(S_MATCH_ITEM_SOMEONE_DROP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_ITEM_SOMEONE_DROP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_ITEM_SOMEONE_DROP* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_ITEM_SOMEONE_DROP*>(
               &_S_MATCH_ITEM_SOMEONE_DROP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(S_MATCH_ITEM_SOMEONE_DROP& a, S_MATCH_ITEM_SOMEONE_DROP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_ITEM_SOMEONE_DROP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_ITEM_SOMEONE_DROP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_ITEM_SOMEONE_DROP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_ITEM_SOMEONE_DROP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_ITEM_SOMEONE_DROP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_ITEM_SOMEONE_DROP& from) {
    S_MATCH_ITEM_SOMEONE_DROP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_ITEM_SOMEONE_DROP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_ITEM_SOMEONE_DROP";
  }
  protected:
  explicit S_MATCH_ITEM_SOMEONE_DROP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropItemPositionFieldNumber = 3,
    kDropItemRotationFieldNumber = 4,
    kPlayerIndexFieldNumber = 1,
    kItemIndexFieldNumber = 2,
  };
  // .ProjectJ.Vector drop_item_position = 3;
  bool has_drop_item_position() const;
  private:
  bool _internal_has_drop_item_position() const;
  public:
  void clear_drop_item_position();
  const ::ProjectJ::Vector& drop_item_position() const;
  PROTOBUF_NODISCARD ::ProjectJ::Vector* release_drop_item_position();
  ::ProjectJ::Vector* mutable_drop_item_position();
  void set_allocated_drop_item_position(::ProjectJ::Vector* drop_item_position);
  private:
  const ::ProjectJ::Vector& _internal_drop_item_position() const;
  ::ProjectJ::Vector* _internal_mutable_drop_item_position();
  public:
  void unsafe_arena_set_allocated_drop_item_position(
      ::ProjectJ::Vector* drop_item_position);
  ::ProjectJ::Vector* unsafe_arena_release_drop_item_position();

  // .ProjectJ.Rotator drop_item_rotation = 4;
  bool has_drop_item_rotation() const;
  private:
  bool _internal_has_drop_item_rotation() const;
  public:
  void clear_drop_item_rotation();
  const ::ProjectJ::Rotator& drop_item_rotation() const;
  PROTOBUF_NODISCARD ::ProjectJ::Rotator* release_drop_item_rotation();
  ::ProjectJ::Rotator* mutable_drop_item_rotation();
  void set_allocated_drop_item_rotation(::ProjectJ::Rotator* drop_item_rotation);
  private:
  const ::ProjectJ::Rotator& _internal_drop_item_rotation() const;
  ::ProjectJ::Rotator* _internal_mutable_drop_item_rotation();
  public:
  void unsafe_arena_set_allocated_drop_item_rotation(
      ::ProjectJ::Rotator* drop_item_rotation);
  ::ProjectJ::Rotator* unsafe_arena_release_drop_item_rotation();

  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // int32 item_index = 2;
  void clear_item_index();
  int32_t item_index() const;
  void set_item_index(int32_t value);
  private:
  int32_t _internal_item_index() const;
  void _internal_set_item_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Vector* drop_item_position_;
    ::ProjectJ::Rotator* drop_item_rotation_;
    int32_t player_index_;
    int32_t item_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_SCALE_ON_CHANGED final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_SCALE_ON_CHANGED) */ {
 public:
  inline S_MATCH_SCALE_ON_CHANGED() : S_MATCH_SCALE_ON_CHANGED(nullptr) {}
  ~S_MATCH_SCALE_ON_CHANGED() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_SCALE_ON_CHANGED(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_SCALE_ON_CHANGED(const S_MATCH_SCALE_ON_CHANGED& from);
  S_MATCH_SCALE_ON_CHANGED(S_MATCH_SCALE_ON_CHANGED&& from) noexcept
    : S_MATCH_SCALE_ON_CHANGED() {
    *this = ::std::move(from);
  }

  inline S_MATCH_SCALE_ON_CHANGED& operator=(const S_MATCH_SCALE_ON_CHANGED& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_SCALE_ON_CHANGED& operator=(S_MATCH_SCALE_ON_CHANGED&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_SCALE_ON_CHANGED& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_SCALE_ON_CHANGED* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_SCALE_ON_CHANGED*>(
               &_S_MATCH_SCALE_ON_CHANGED_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(S_MATCH_SCALE_ON_CHANGED& a, S_MATCH_SCALE_ON_CHANGED& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_SCALE_ON_CHANGED* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_SCALE_ON_CHANGED* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_SCALE_ON_CHANGED* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_SCALE_ON_CHANGED>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_SCALE_ON_CHANGED& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_SCALE_ON_CHANGED& from) {
    S_MATCH_SCALE_ON_CHANGED::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_SCALE_ON_CHANGED* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_SCALE_ON_CHANGED";
  }
  protected:
  explicit S_MATCH_SCALE_ON_CHANGED(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleIndexFieldNumber = 1,
    kCurrentWeightFieldNumber = 2,
    kIsOperatingFieldNumber = 3,
  };
  // int32 scale_index = 1;
  void clear_scale_index();
  int32_t scale_index() const;
  void set_scale_index(int32_t value);
  private:
  int32_t _internal_scale_index() const;
  void _internal_set_scale_index(int32_t value);
  public:

  // int32 current_weight = 2;
  void clear_current_weight();
  int32_t current_weight() const;
  void set_current_weight(int32_t value);
  private:
  int32_t _internal_current_weight() const;
  void _internal_set_current_weight(int32_t value);
  public:

  // bool is_operating = 3;
  void clear_is_operating();
  bool is_operating() const;
  void set_is_operating(bool value);
  private:
  bool _internal_is_operating() const;
  void _internal_set_is_operating(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_SCALE_ON_CHANGED)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t scale_index_;
    int32_t current_weight_;
    bool is_operating_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_CHASER_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_CHASER_ATTACK) */ {
 public:
  inline C_MATCH_CHASER_ATTACK() : C_MATCH_CHASER_ATTACK(nullptr) {}
  ~C_MATCH_CHASER_ATTACK() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_CHASER_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_CHASER_ATTACK(const C_MATCH_CHASER_ATTACK& from);
  C_MATCH_CHASER_ATTACK(C_MATCH_CHASER_ATTACK&& from) noexcept
    : C_MATCH_CHASER_ATTACK() {
    *this = ::std::move(from);
  }

  inline C_MATCH_CHASER_ATTACK& operator=(const C_MATCH_CHASER_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_CHASER_ATTACK& operator=(C_MATCH_CHASER_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_CHASER_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_CHASER_ATTACK* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_CHASER_ATTACK*>(
               &_C_MATCH_CHASER_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(C_MATCH_CHASER_ATTACK& a, C_MATCH_CHASER_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_CHASER_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_CHASER_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_CHASER_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_CHASER_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_CHASER_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_CHASER_ATTACK& from) {
    C_MATCH_CHASER_ATTACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_CHASER_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_CHASER_ATTACK";
  }
  protected:
  explicit C_MATCH_CHASER_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackPositionFieldNumber = 1,
    kAttackRotationFieldNumber = 2,
  };
  // .ProjectJ.Vector attack_position = 1;
  bool has_attack_position() const;
  private:
  bool _internal_has_attack_position() const;
  public:
  void clear_attack_position();
  const ::ProjectJ::Vector& attack_position() const;
  PROTOBUF_NODISCARD ::ProjectJ::Vector* release_attack_position();
  ::ProjectJ::Vector* mutable_attack_position();
  void set_allocated_attack_position(::ProjectJ::Vector* attack_position);
  private:
  const ::ProjectJ::Vector& _internal_attack_position() const;
  ::ProjectJ::Vector* _internal_mutable_attack_position();
  public:
  void unsafe_arena_set_allocated_attack_position(
      ::ProjectJ::Vector* attack_position);
  ::ProjectJ::Vector* unsafe_arena_release_attack_position();

  // .ProjectJ.Rotator attack_rotation = 2;
  bool has_attack_rotation() const;
  private:
  bool _internal_has_attack_rotation() const;
  public:
  void clear_attack_rotation();
  const ::ProjectJ::Rotator& attack_rotation() const;
  PROTOBUF_NODISCARD ::ProjectJ::Rotator* release_attack_rotation();
  ::ProjectJ::Rotator* mutable_attack_rotation();
  void set_allocated_attack_rotation(::ProjectJ::Rotator* attack_rotation);
  private:
  const ::ProjectJ::Rotator& _internal_attack_rotation() const;
  ::ProjectJ::Rotator* _internal_mutable_attack_rotation();
  public:
  void unsafe_arena_set_allocated_attack_rotation(
      ::ProjectJ::Rotator* attack_rotation);
  ::ProjectJ::Rotator* unsafe_arena_release_attack_rotation();

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_CHASER_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Vector* attack_position_;
    ::ProjectJ::Rotator* attack_rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_CHASER_ATTACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_CHASER_ATTACK) */ {
 public:
  inline S_MATCH_CHASER_ATTACK() : S_MATCH_CHASER_ATTACK(nullptr) {}
  ~S_MATCH_CHASER_ATTACK() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_CHASER_ATTACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_CHASER_ATTACK(const S_MATCH_CHASER_ATTACK& from);
  S_MATCH_CHASER_ATTACK(S_MATCH_CHASER_ATTACK&& from) noexcept
    : S_MATCH_CHASER_ATTACK() {
    *this = ::std::move(from);
  }

  inline S_MATCH_CHASER_ATTACK& operator=(const S_MATCH_CHASER_ATTACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_CHASER_ATTACK& operator=(S_MATCH_CHASER_ATTACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_CHASER_ATTACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_CHASER_ATTACK* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_CHASER_ATTACK*>(
               &_S_MATCH_CHASER_ATTACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(S_MATCH_CHASER_ATTACK& a, S_MATCH_CHASER_ATTACK& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_CHASER_ATTACK* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_CHASER_ATTACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_CHASER_ATTACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_CHASER_ATTACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_CHASER_ATTACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_CHASER_ATTACK& from) {
    S_MATCH_CHASER_ATTACK::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_CHASER_ATTACK* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_CHASER_ATTACK";
  }
  protected:
  explicit S_MATCH_CHASER_ATTACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackPositionFieldNumber = 1,
    kAttackRotationFieldNumber = 2,
  };
  // .ProjectJ.Vector attack_position = 1;
  bool has_attack_position() const;
  private:
  bool _internal_has_attack_position() const;
  public:
  void clear_attack_position();
  const ::ProjectJ::Vector& attack_position() const;
  PROTOBUF_NODISCARD ::ProjectJ::Vector* release_attack_position();
  ::ProjectJ::Vector* mutable_attack_position();
  void set_allocated_attack_position(::ProjectJ::Vector* attack_position);
  private:
  const ::ProjectJ::Vector& _internal_attack_position() const;
  ::ProjectJ::Vector* _internal_mutable_attack_position();
  public:
  void unsafe_arena_set_allocated_attack_position(
      ::ProjectJ::Vector* attack_position);
  ::ProjectJ::Vector* unsafe_arena_release_attack_position();

  // .ProjectJ.Rotator attack_rotation = 2;
  bool has_attack_rotation() const;
  private:
  bool _internal_has_attack_rotation() const;
  public:
  void clear_attack_rotation();
  const ::ProjectJ::Rotator& attack_rotation() const;
  PROTOBUF_NODISCARD ::ProjectJ::Rotator* release_attack_rotation();
  ::ProjectJ::Rotator* mutable_attack_rotation();
  void set_allocated_attack_rotation(::ProjectJ::Rotator* attack_rotation);
  private:
  const ::ProjectJ::Rotator& _internal_attack_rotation() const;
  ::ProjectJ::Rotator* _internal_mutable_attack_rotation();
  public:
  void unsafe_arena_set_allocated_attack_rotation(
      ::ProjectJ::Rotator* attack_rotation);
  ::ProjectJ::Rotator* unsafe_arena_release_attack_rotation();

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_CHASER_ATTACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Vector* attack_position_;
    ::ProjectJ::Rotator* attack_rotation_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_CHASER_HIT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_CHASER_HIT) */ {
 public:
  inline C_MATCH_CHASER_HIT() : C_MATCH_CHASER_HIT(nullptr) {}
  ~C_MATCH_CHASER_HIT() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_CHASER_HIT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_CHASER_HIT(const C_MATCH_CHASER_HIT& from);
  C_MATCH_CHASER_HIT(C_MATCH_CHASER_HIT&& from) noexcept
    : C_MATCH_CHASER_HIT() {
    *this = ::std::move(from);
  }

  inline C_MATCH_CHASER_HIT& operator=(const C_MATCH_CHASER_HIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_CHASER_HIT& operator=(C_MATCH_CHASER_HIT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_CHASER_HIT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_CHASER_HIT* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_CHASER_HIT*>(
               &_C_MATCH_CHASER_HIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(C_MATCH_CHASER_HIT& a, C_MATCH_CHASER_HIT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_CHASER_HIT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_CHASER_HIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_CHASER_HIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_CHASER_HIT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_CHASER_HIT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_CHASER_HIT& from) {
    C_MATCH_CHASER_HIT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_CHASER_HIT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_CHASER_HIT";
  }
  protected:
  explicit C_MATCH_CHASER_HIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttackPositionFieldNumber = 1,
    kAttackRotationFieldNumber = 2,
    kHitPlayerIndexFieldNumber = 3,
  };
  // .ProjectJ.Vector attack_position = 1;
  bool has_attack_position() const;
  private:
  bool _internal_has_attack_position() const;
  public:
  void clear_attack_position();
  const ::ProjectJ::Vector& attack_position() const;
  PROTOBUF_NODISCARD ::ProjectJ::Vector* release_attack_position();
  ::ProjectJ::Vector* mutable_attack_position();
  void set_allocated_attack_position(::ProjectJ::Vector* attack_position);
  private:
  const ::ProjectJ::Vector& _internal_attack_position() const;
  ::ProjectJ::Vector* _internal_mutable_attack_position();
  public:
  void unsafe_arena_set_allocated_attack_position(
      ::ProjectJ::Vector* attack_position);
  ::ProjectJ::Vector* unsafe_arena_release_attack_position();

  // .ProjectJ.Rotator attack_rotation = 2;
  bool has_attack_rotation() const;
  private:
  bool _internal_has_attack_rotation() const;
  public:
  void clear_attack_rotation();
  const ::ProjectJ::Rotator& attack_rotation() const;
  PROTOBUF_NODISCARD ::ProjectJ::Rotator* release_attack_rotation();
  ::ProjectJ::Rotator* mutable_attack_rotation();
  void set_allocated_attack_rotation(::ProjectJ::Rotator* attack_rotation);
  private:
  const ::ProjectJ::Rotator& _internal_attack_rotation() const;
  ::ProjectJ::Rotator* _internal_mutable_attack_rotation();
  public:
  void unsafe_arena_set_allocated_attack_rotation(
      ::ProjectJ::Rotator* attack_rotation);
  ::ProjectJ::Rotator* unsafe_arena_release_attack_rotation();

  // int32 hit_player_index = 3;
  void clear_hit_player_index();
  int32_t hit_player_index() const;
  void set_hit_player_index(int32_t value);
  private:
  int32_t _internal_hit_player_index() const;
  void _internal_set_hit_player_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_CHASER_HIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Vector* attack_position_;
    ::ProjectJ::Rotator* attack_rotation_;
    int32_t hit_player_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_CHASER_HIT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_CHASER_HIT) */ {
 public:
  inline S_MATCH_CHASER_HIT() : S_MATCH_CHASER_HIT(nullptr) {}
  ~S_MATCH_CHASER_HIT() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_CHASER_HIT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_CHASER_HIT(const S_MATCH_CHASER_HIT& from);
  S_MATCH_CHASER_HIT(S_MATCH_CHASER_HIT&& from) noexcept
    : S_MATCH_CHASER_HIT() {
    *this = ::std::move(from);
  }

  inline S_MATCH_CHASER_HIT& operator=(const S_MATCH_CHASER_HIT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_CHASER_HIT& operator=(S_MATCH_CHASER_HIT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_CHASER_HIT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_CHASER_HIT* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_CHASER_HIT*>(
               &_S_MATCH_CHASER_HIT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(S_MATCH_CHASER_HIT& a, S_MATCH_CHASER_HIT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_CHASER_HIT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_CHASER_HIT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_CHASER_HIT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_CHASER_HIT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_CHASER_HIT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_CHASER_HIT& from) {
    S_MATCH_CHASER_HIT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_CHASER_HIT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_CHASER_HIT";
  }
  protected:
  explicit S_MATCH_CHASER_HIT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kHitPlayerIndexFieldNumber = 2,
    kChangedStateFieldNumber = 3,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // int32 hit_player_index = 2;
  void clear_hit_player_index();
  int32_t hit_player_index() const;
  void set_hit_player_index(int32_t value);
  private:
  int32_t _internal_hit_player_index() const;
  void _internal_set_hit_player_index(int32_t value);
  public:

  // .ProjectJ.MatchPlayerState changed_state = 3;
  void clear_changed_state();
  ::ProjectJ::MatchPlayerState changed_state() const;
  void set_changed_state(::ProjectJ::MatchPlayerState value);
  private:
  ::ProjectJ::MatchPlayerState _internal_changed_state() const;
  void _internal_set_changed_state(::ProjectJ::MatchPlayerState value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_CHASER_HIT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    int32_t hit_player_index_;
    int changed_state_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_VERIFY_TOKEN

// int32 account_id = 1;
inline void C_VERIFY_TOKEN::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_VERIFY_TOKEN::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_VERIFY_TOKEN::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_VERIFY_TOKEN.account_id)
  return _internal_account_id();
}
inline void C_VERIFY_TOKEN::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_VERIFY_TOKEN::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_VERIFY_TOKEN.account_id)
}

// string token = 2;
inline void C_VERIFY_TOKEN::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& C_VERIFY_TOKEN::token() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_VERIFY_TOKEN.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_VERIFY_TOKEN::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.C_VERIFY_TOKEN.token)
}
inline std::string* C_VERIFY_TOKEN::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_VERIFY_TOKEN.token)
  return _s;
}
inline const std::string& C_VERIFY_TOKEN::_internal_token() const {
  return _impl_.token_.Get();
}
inline void C_VERIFY_TOKEN::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* C_VERIFY_TOKEN::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* C_VERIFY_TOKEN::release_token() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_VERIFY_TOKEN.token)
  return _impl_.token_.Release();
}
inline void C_VERIFY_TOKEN::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_VERIFY_TOKEN.token)
}

// -------------------------------------------------------------------

// S_VERIFY_TOKEN

// bool result = 1;
inline void S_VERIFY_TOKEN::clear_result() {
  _impl_.result_ = false;
}
inline bool S_VERIFY_TOKEN::_internal_result() const {
  return _impl_.result_;
}
inline bool S_VERIFY_TOKEN::result() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_VERIFY_TOKEN.result)
  return _internal_result();
}
inline void S_VERIFY_TOKEN::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S_VERIFY_TOKEN::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_VERIFY_TOKEN.result)
}

// -------------------------------------------------------------------

// C_LOBBY_CHAT

// int32 account_id = 1;
inline void C_LOBBY_CHAT::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_LOBBY_CHAT::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_LOBBY_CHAT::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_CHAT.account_id)
  return _internal_account_id();
}
inline void C_LOBBY_CHAT::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_LOBBY_CHAT::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_CHAT.account_id)
}

// string nickname = 2;
inline void C_LOBBY_CHAT::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& C_LOBBY_CHAT::nickname() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_CHAT.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOBBY_CHAT::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_CHAT.nickname)
}
inline std::string* C_LOBBY_CHAT::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_LOBBY_CHAT.nickname)
  return _s;
}
inline const std::string& C_LOBBY_CHAT::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void C_LOBBY_CHAT::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOBBY_CHAT::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOBBY_CHAT::release_nickname() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_LOBBY_CHAT.nickname)
  return _impl_.nickname_.Release();
}
inline void C_LOBBY_CHAT::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_LOBBY_CHAT.nickname)
}

// string chat = 3;
inline void C_LOBBY_CHAT::clear_chat() {
  _impl_.chat_.ClearToEmpty();
}
inline const std::string& C_LOBBY_CHAT::chat() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_CHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOBBY_CHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_CHAT.chat)
}
inline std::string* C_LOBBY_CHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_LOBBY_CHAT.chat)
  return _s;
}
inline const std::string& C_LOBBY_CHAT::_internal_chat() const {
  return _impl_.chat_.Get();
}
inline void C_LOBBY_CHAT::_internal_set_chat(const std::string& value) {
  
  _impl_.chat_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOBBY_CHAT::_internal_mutable_chat() {
  
  return _impl_.chat_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOBBY_CHAT::release_chat() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_LOBBY_CHAT.chat)
  return _impl_.chat_.Release();
}
inline void C_LOBBY_CHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  _impl_.chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_.IsDefault()) {
    _impl_.chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_LOBBY_CHAT.chat)
}

// -------------------------------------------------------------------

// S_LOBBY_CHAT

// int32 account_id = 1;
inline void S_LOBBY_CHAT::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t S_LOBBY_CHAT::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t S_LOBBY_CHAT::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_CHAT.account_id)
  return _internal_account_id();
}
inline void S_LOBBY_CHAT::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void S_LOBBY_CHAT::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_CHAT.account_id)
}

// string nickname = 2;
inline void S_LOBBY_CHAT::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& S_LOBBY_CHAT::nickname() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_CHAT.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_LOBBY_CHAT::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_CHAT.nickname)
}
inline std::string* S_LOBBY_CHAT::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_LOBBY_CHAT.nickname)
  return _s;
}
inline const std::string& S_LOBBY_CHAT::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void S_LOBBY_CHAT::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* S_LOBBY_CHAT::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* S_LOBBY_CHAT::release_nickname() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_LOBBY_CHAT.nickname)
  return _impl_.nickname_.Release();
}
inline void S_LOBBY_CHAT::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_LOBBY_CHAT.nickname)
}

// string chat = 3;
inline void S_LOBBY_CHAT::clear_chat() {
  _impl_.chat_.ClearToEmpty();
}
inline const std::string& S_LOBBY_CHAT::chat() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_CHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_LOBBY_CHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_CHAT.chat)
}
inline std::string* S_LOBBY_CHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_LOBBY_CHAT.chat)
  return _s;
}
inline const std::string& S_LOBBY_CHAT::_internal_chat() const {
  return _impl_.chat_.Get();
}
inline void S_LOBBY_CHAT::_internal_set_chat(const std::string& value) {
  
  _impl_.chat_.Set(value, GetArenaForAllocation());
}
inline std::string* S_LOBBY_CHAT::_internal_mutable_chat() {
  
  return _impl_.chat_.Mutable(GetArenaForAllocation());
}
inline std::string* S_LOBBY_CHAT::release_chat() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_LOBBY_CHAT.chat)
  return _impl_.chat_.Release();
}
inline void S_LOBBY_CHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  _impl_.chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_.IsDefault()) {
    _impl_.chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_LOBBY_CHAT.chat)
}

// -------------------------------------------------------------------

// C_LOBBY_REFRESH_ROOM

// int32 account_id = 1;
inline void C_LOBBY_REFRESH_ROOM::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_LOBBY_REFRESH_ROOM::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_LOBBY_REFRESH_ROOM::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_REFRESH_ROOM.account_id)
  return _internal_account_id();
}
inline void C_LOBBY_REFRESH_ROOM::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_LOBBY_REFRESH_ROOM::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_REFRESH_ROOM.account_id)
}

// -------------------------------------------------------------------

// S_LOBBY_REFRESH_ROOM

// repeated .ProjectJ.Room rooms = 1;
inline int S_LOBBY_REFRESH_ROOM::_internal_rooms_size() const {
  return _impl_.rooms_.size();
}
inline int S_LOBBY_REFRESH_ROOM::rooms_size() const {
  return _internal_rooms_size();
}
inline ::ProjectJ::Room* S_LOBBY_REFRESH_ROOM::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_LOBBY_REFRESH_ROOM.rooms)
  return _impl_.rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Room >*
S_LOBBY_REFRESH_ROOM::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:ProjectJ.S_LOBBY_REFRESH_ROOM.rooms)
  return &_impl_.rooms_;
}
inline const ::ProjectJ::Room& S_LOBBY_REFRESH_ROOM::_internal_rooms(int index) const {
  return _impl_.rooms_.Get(index);
}
inline const ::ProjectJ::Room& S_LOBBY_REFRESH_ROOM::rooms(int index) const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_REFRESH_ROOM.rooms)
  return _internal_rooms(index);
}
inline ::ProjectJ::Room* S_LOBBY_REFRESH_ROOM::_internal_add_rooms() {
  return _impl_.rooms_.Add();
}
inline ::ProjectJ::Room* S_LOBBY_REFRESH_ROOM::add_rooms() {
  ::ProjectJ::Room* _add = _internal_add_rooms();
  // @@protoc_insertion_point(field_add:ProjectJ.S_LOBBY_REFRESH_ROOM.rooms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Room >&
S_LOBBY_REFRESH_ROOM::rooms() const {
  // @@protoc_insertion_point(field_list:ProjectJ.S_LOBBY_REFRESH_ROOM.rooms)
  return _impl_.rooms_;
}

// -------------------------------------------------------------------

// C_LOBBY_CREATE_ROOM

// int32 account_id = 1;
inline void C_LOBBY_CREATE_ROOM::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_LOBBY_CREATE_ROOM::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_LOBBY_CREATE_ROOM::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_CREATE_ROOM.account_id)
  return _internal_account_id();
}
inline void C_LOBBY_CREATE_ROOM::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_LOBBY_CREATE_ROOM::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_CREATE_ROOM.account_id)
}

// string title = 2;
inline void C_LOBBY_CREATE_ROOM::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& C_LOBBY_CREATE_ROOM::title() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_CREATE_ROOM.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOBBY_CREATE_ROOM::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_CREATE_ROOM.title)
}
inline std::string* C_LOBBY_CREATE_ROOM::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_LOBBY_CREATE_ROOM.title)
  return _s;
}
inline const std::string& C_LOBBY_CREATE_ROOM::_internal_title() const {
  return _impl_.title_.Get();
}
inline void C_LOBBY_CREATE_ROOM::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOBBY_CREATE_ROOM::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOBBY_CREATE_ROOM::release_title() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_LOBBY_CREATE_ROOM.title)
  return _impl_.title_.Release();
}
inline void C_LOBBY_CREATE_ROOM::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_LOBBY_CREATE_ROOM.title)
}

// -------------------------------------------------------------------

// S_LOBBY_CREATE_ROOM

// bool result = 1;
inline void S_LOBBY_CREATE_ROOM::clear_result() {
  _impl_.result_ = false;
}
inline bool S_LOBBY_CREATE_ROOM::_internal_result() const {
  return _impl_.result_;
}
inline bool S_LOBBY_CREATE_ROOM::result() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_CREATE_ROOM.result)
  return _internal_result();
}
inline void S_LOBBY_CREATE_ROOM::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S_LOBBY_CREATE_ROOM::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_CREATE_ROOM.result)
}

// int32 room_id = 2;
inline void S_LOBBY_CREATE_ROOM::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t S_LOBBY_CREATE_ROOM::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t S_LOBBY_CREATE_ROOM::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_CREATE_ROOM.room_id)
  return _internal_room_id();
}
inline void S_LOBBY_CREATE_ROOM::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void S_LOBBY_CREATE_ROOM::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_CREATE_ROOM.room_id)
}

// int32 slot_index = 3;
inline void S_LOBBY_CREATE_ROOM::clear_slot_index() {
  _impl_.slot_index_ = 0;
}
inline int32_t S_LOBBY_CREATE_ROOM::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline int32_t S_LOBBY_CREATE_ROOM::slot_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_CREATE_ROOM.slot_index)
  return _internal_slot_index();
}
inline void S_LOBBY_CREATE_ROOM::_internal_set_slot_index(int32_t value) {
  
  _impl_.slot_index_ = value;
}
inline void S_LOBBY_CREATE_ROOM::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_CREATE_ROOM.slot_index)
}

// -------------------------------------------------------------------

// C_LOBBY_ENTER_ROOM

// int32 account_id = 1;
inline void C_LOBBY_ENTER_ROOM::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_LOBBY_ENTER_ROOM::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_LOBBY_ENTER_ROOM::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_ENTER_ROOM.account_id)
  return _internal_account_id();
}
inline void C_LOBBY_ENTER_ROOM::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_LOBBY_ENTER_ROOM::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_ENTER_ROOM.account_id)
}

// int32 room_id = 2;
inline void C_LOBBY_ENTER_ROOM::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t C_LOBBY_ENTER_ROOM::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t C_LOBBY_ENTER_ROOM::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_ENTER_ROOM.room_id)
  return _internal_room_id();
}
inline void C_LOBBY_ENTER_ROOM::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void C_LOBBY_ENTER_ROOM::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_ENTER_ROOM.room_id)
}

// -------------------------------------------------------------------

// S_LOBBY_ENTER_ROOM

// bool result = 1;
inline void S_LOBBY_ENTER_ROOM::clear_result() {
  _impl_.result_ = false;
}
inline bool S_LOBBY_ENTER_ROOM::_internal_result() const {
  return _impl_.result_;
}
inline bool S_LOBBY_ENTER_ROOM::result() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_ENTER_ROOM.result)
  return _internal_result();
}
inline void S_LOBBY_ENTER_ROOM::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S_LOBBY_ENTER_ROOM::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_ENTER_ROOM.result)
}

// int32 room_id = 2;
inline void S_LOBBY_ENTER_ROOM::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t S_LOBBY_ENTER_ROOM::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t S_LOBBY_ENTER_ROOM::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_ENTER_ROOM.room_id)
  return _internal_room_id();
}
inline void S_LOBBY_ENTER_ROOM::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void S_LOBBY_ENTER_ROOM::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_ENTER_ROOM.room_id)
}

// int32 slot_index = 3;
inline void S_LOBBY_ENTER_ROOM::clear_slot_index() {
  _impl_.slot_index_ = 0;
}
inline int32_t S_LOBBY_ENTER_ROOM::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline int32_t S_LOBBY_ENTER_ROOM::slot_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_ENTER_ROOM.slot_index)
  return _internal_slot_index();
}
inline void S_LOBBY_ENTER_ROOM::_internal_set_slot_index(int32_t value) {
  
  _impl_.slot_index_ = value;
}
inline void S_LOBBY_ENTER_ROOM::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_ENTER_ROOM.slot_index)
}

// -------------------------------------------------------------------

// C_ROOM_READY_TO_RECEIVE

// int32 account_id = 1;
inline void C_ROOM_READY_TO_RECEIVE::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_ROOM_READY_TO_RECEIVE::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_ROOM_READY_TO_RECEIVE::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_READY_TO_RECEIVE.account_id)
  return _internal_account_id();
}
inline void C_ROOM_READY_TO_RECEIVE::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_ROOM_READY_TO_RECEIVE::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_READY_TO_RECEIVE.account_id)
}

// int32 room_id = 2;
inline void C_ROOM_READY_TO_RECEIVE::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t C_ROOM_READY_TO_RECEIVE::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t C_ROOM_READY_TO_RECEIVE::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_READY_TO_RECEIVE.room_id)
  return _internal_room_id();
}
inline void C_ROOM_READY_TO_RECEIVE::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void C_ROOM_READY_TO_RECEIVE::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_READY_TO_RECEIVE.room_id)
}

// int32 slot_index = 3;
inline void C_ROOM_READY_TO_RECEIVE::clear_slot_index() {
  _impl_.slot_index_ = 0;
}
inline int32_t C_ROOM_READY_TO_RECEIVE::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline int32_t C_ROOM_READY_TO_RECEIVE::slot_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_READY_TO_RECEIVE.slot_index)
  return _internal_slot_index();
}
inline void C_ROOM_READY_TO_RECEIVE::_internal_set_slot_index(int32_t value) {
  
  _impl_.slot_index_ = value;
}
inline void C_ROOM_READY_TO_RECEIVE::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_READY_TO_RECEIVE.slot_index)
}

// -------------------------------------------------------------------

// S_ROOM_INFO

// .ProjectJ.RoomInfo info = 1;
inline bool S_ROOM_INFO::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_ROOM_INFO::has_info() const {
  return _internal_has_info();
}
inline const ::ProjectJ::RoomInfo& S_ROOM_INFO::_internal_info() const {
  const ::ProjectJ::RoomInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::RoomInfo&>(
      ::ProjectJ::_RoomInfo_default_instance_);
}
inline const ::ProjectJ::RoomInfo& S_ROOM_INFO::info() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_INFO.info)
  return _internal_info();
}
inline void S_ROOM_INFO::unsafe_arena_set_allocated_info(
    ::ProjectJ::RoomInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_ROOM_INFO.info)
}
inline ::ProjectJ::RoomInfo* S_ROOM_INFO::release_info() {
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::RoomInfo* S_ROOM_INFO::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_ROOM_INFO.info)
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::ProjectJ::RoomInfo* S_ROOM_INFO::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::RoomInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::ProjectJ::RoomInfo* S_ROOM_INFO::mutable_info() {
  ::ProjectJ::RoomInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_ROOM_INFO.info)
  return _msg;
}
inline void S_ROOM_INFO::set_allocated_info(::ProjectJ::RoomInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_ROOM_INFO.info)
}

// -------------------------------------------------------------------

// C_ROOM_LEAVE

// int32 account_id = 1;
inline void C_ROOM_LEAVE::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_ROOM_LEAVE::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_ROOM_LEAVE::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_LEAVE.account_id)
  return _internal_account_id();
}
inline void C_ROOM_LEAVE::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_ROOM_LEAVE::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_LEAVE.account_id)
}

// int32 room_id = 2;
inline void C_ROOM_LEAVE::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t C_ROOM_LEAVE::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t C_ROOM_LEAVE::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_LEAVE.room_id)
  return _internal_room_id();
}
inline void C_ROOM_LEAVE::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void C_ROOM_LEAVE::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_LEAVE.room_id)
}

// int32 slot_index = 3;
inline void C_ROOM_LEAVE::clear_slot_index() {
  _impl_.slot_index_ = 0;
}
inline int32_t C_ROOM_LEAVE::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline int32_t C_ROOM_LEAVE::slot_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_LEAVE.slot_index)
  return _internal_slot_index();
}
inline void C_ROOM_LEAVE::_internal_set_slot_index(int32_t value) {
  
  _impl_.slot_index_ = value;
}
inline void C_ROOM_LEAVE::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_LEAVE.slot_index)
}

// -------------------------------------------------------------------

// S_ROOM_LEAVE

// bool result = 1;
inline void S_ROOM_LEAVE::clear_result() {
  _impl_.result_ = false;
}
inline bool S_ROOM_LEAVE::_internal_result() const {
  return _impl_.result_;
}
inline bool S_ROOM_LEAVE::result() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_LEAVE.result)
  return _internal_result();
}
inline void S_ROOM_LEAVE::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S_ROOM_LEAVE::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_LEAVE.result)
}

// -------------------------------------------------------------------

// S_ROOM_OTHER_ENTER

// int32 room_id = 1;
inline void S_ROOM_OTHER_ENTER::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t S_ROOM_OTHER_ENTER::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t S_ROOM_OTHER_ENTER::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_OTHER_ENTER.room_id)
  return _internal_room_id();
}
inline void S_ROOM_OTHER_ENTER::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void S_ROOM_OTHER_ENTER::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_OTHER_ENTER.room_id)
}

// int32 slot_index = 2;
inline void S_ROOM_OTHER_ENTER::clear_slot_index() {
  _impl_.slot_index_ = 0;
}
inline int32_t S_ROOM_OTHER_ENTER::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline int32_t S_ROOM_OTHER_ENTER::slot_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_OTHER_ENTER.slot_index)
  return _internal_slot_index();
}
inline void S_ROOM_OTHER_ENTER::_internal_set_slot_index(int32_t value) {
  
  _impl_.slot_index_ = value;
}
inline void S_ROOM_OTHER_ENTER::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_OTHER_ENTER.slot_index)
}

// .ProjectJ.Player other = 3;
inline bool S_ROOM_OTHER_ENTER::_internal_has_other() const {
  return this != internal_default_instance() && _impl_.other_ != nullptr;
}
inline bool S_ROOM_OTHER_ENTER::has_other() const {
  return _internal_has_other();
}
inline const ::ProjectJ::Player& S_ROOM_OTHER_ENTER::_internal_other() const {
  const ::ProjectJ::Player* p = _impl_.other_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Player&>(
      ::ProjectJ::_Player_default_instance_);
}
inline const ::ProjectJ::Player& S_ROOM_OTHER_ENTER::other() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_OTHER_ENTER.other)
  return _internal_other();
}
inline void S_ROOM_OTHER_ENTER::unsafe_arena_set_allocated_other(
    ::ProjectJ::Player* other) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.other_);
  }
  _impl_.other_ = other;
  if (other) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_ROOM_OTHER_ENTER.other)
}
inline ::ProjectJ::Player* S_ROOM_OTHER_ENTER::release_other() {
  
  ::ProjectJ::Player* temp = _impl_.other_;
  _impl_.other_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Player* S_ROOM_OTHER_ENTER::unsafe_arena_release_other() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_ROOM_OTHER_ENTER.other)
  
  ::ProjectJ::Player* temp = _impl_.other_;
  _impl_.other_ = nullptr;
  return temp;
}
inline ::ProjectJ::Player* S_ROOM_OTHER_ENTER::_internal_mutable_other() {
  
  if (_impl_.other_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Player>(GetArenaForAllocation());
    _impl_.other_ = p;
  }
  return _impl_.other_;
}
inline ::ProjectJ::Player* S_ROOM_OTHER_ENTER::mutable_other() {
  ::ProjectJ::Player* _msg = _internal_mutable_other();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_ROOM_OTHER_ENTER.other)
  return _msg;
}
inline void S_ROOM_OTHER_ENTER::set_allocated_other(::ProjectJ::Player* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.other_);
  }
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other));
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.other_ = other;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_ROOM_OTHER_ENTER.other)
}

// -------------------------------------------------------------------

// S_ROOM_OTHER_LEAVE

// int32 room_id = 1;
inline void S_ROOM_OTHER_LEAVE::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t S_ROOM_OTHER_LEAVE::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t S_ROOM_OTHER_LEAVE::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_OTHER_LEAVE.room_id)
  return _internal_room_id();
}
inline void S_ROOM_OTHER_LEAVE::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void S_ROOM_OTHER_LEAVE::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_OTHER_LEAVE.room_id)
}

// int32 slot_index = 2;
inline void S_ROOM_OTHER_LEAVE::clear_slot_index() {
  _impl_.slot_index_ = 0;
}
inline int32_t S_ROOM_OTHER_LEAVE::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline int32_t S_ROOM_OTHER_LEAVE::slot_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_OTHER_LEAVE.slot_index)
  return _internal_slot_index();
}
inline void S_ROOM_OTHER_LEAVE::_internal_set_slot_index(int32_t value) {
  
  _impl_.slot_index_ = value;
}
inline void S_ROOM_OTHER_LEAVE::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_OTHER_LEAVE.slot_index)
}

// -------------------------------------------------------------------

// C_ROOM_READY

// int32 account_id = 1;
inline void C_ROOM_READY::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_ROOM_READY::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_ROOM_READY::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_READY.account_id)
  return _internal_account_id();
}
inline void C_ROOM_READY::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_ROOM_READY::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_READY.account_id)
}

// int32 room_id = 2;
inline void C_ROOM_READY::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t C_ROOM_READY::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t C_ROOM_READY::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_READY.room_id)
  return _internal_room_id();
}
inline void C_ROOM_READY::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void C_ROOM_READY::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_READY.room_id)
}

// int32 slot_index = 3;
inline void C_ROOM_READY::clear_slot_index() {
  _impl_.slot_index_ = 0;
}
inline int32_t C_ROOM_READY::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline int32_t C_ROOM_READY::slot_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_READY.slot_index)
  return _internal_slot_index();
}
inline void C_ROOM_READY::_internal_set_slot_index(int32_t value) {
  
  _impl_.slot_index_ = value;
}
inline void C_ROOM_READY::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_READY.slot_index)
}

// -------------------------------------------------------------------

// S_ROOM_READY

// int32 slot_index = 1;
inline void S_ROOM_READY::clear_slot_index() {
  _impl_.slot_index_ = 0;
}
inline int32_t S_ROOM_READY::_internal_slot_index() const {
  return _impl_.slot_index_;
}
inline int32_t S_ROOM_READY::slot_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_READY.slot_index)
  return _internal_slot_index();
}
inline void S_ROOM_READY::_internal_set_slot_index(int32_t value) {
  
  _impl_.slot_index_ = value;
}
inline void S_ROOM_READY::set_slot_index(int32_t value) {
  _internal_set_slot_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_READY.slot_index)
}

// bool is_ready = 2;
inline void S_ROOM_READY::clear_is_ready() {
  _impl_.is_ready_ = false;
}
inline bool S_ROOM_READY::_internal_is_ready() const {
  return _impl_.is_ready_;
}
inline bool S_ROOM_READY::is_ready() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_READY.is_ready)
  return _internal_is_ready();
}
inline void S_ROOM_READY::_internal_set_is_ready(bool value) {
  
  _impl_.is_ready_ = value;
}
inline void S_ROOM_READY::set_is_ready(bool value) {
  _internal_set_is_ready(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_READY.is_ready)
}

// -------------------------------------------------------------------

// C_ROOM_CHAT

// int32 account_id = 1;
inline void C_ROOM_CHAT::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_ROOM_CHAT::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_ROOM_CHAT::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_CHAT.account_id)
  return _internal_account_id();
}
inline void C_ROOM_CHAT::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_ROOM_CHAT::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_CHAT.account_id)
}

// string nickname = 2;
inline void C_ROOM_CHAT::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& C_ROOM_CHAT::nickname() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_CHAT.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_CHAT::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_CHAT.nickname)
}
inline std::string* C_ROOM_CHAT::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_ROOM_CHAT.nickname)
  return _s;
}
inline const std::string& C_ROOM_CHAT::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void C_ROOM_CHAT::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* C_ROOM_CHAT::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* C_ROOM_CHAT::release_nickname() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_ROOM_CHAT.nickname)
  return _impl_.nickname_.Release();
}
inline void C_ROOM_CHAT::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_ROOM_CHAT.nickname)
}

// int32 room_id = 3;
inline void C_ROOM_CHAT::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t C_ROOM_CHAT::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t C_ROOM_CHAT::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_CHAT.room_id)
  return _internal_room_id();
}
inline void C_ROOM_CHAT::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void C_ROOM_CHAT::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_CHAT.room_id)
}

// string chat = 4;
inline void C_ROOM_CHAT::clear_chat() {
  _impl_.chat_.ClearToEmpty();
}
inline const std::string& C_ROOM_CHAT::chat() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_CHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ROOM_CHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_CHAT.chat)
}
inline std::string* C_ROOM_CHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_ROOM_CHAT.chat)
  return _s;
}
inline const std::string& C_ROOM_CHAT::_internal_chat() const {
  return _impl_.chat_.Get();
}
inline void C_ROOM_CHAT::_internal_set_chat(const std::string& value) {
  
  _impl_.chat_.Set(value, GetArenaForAllocation());
}
inline std::string* C_ROOM_CHAT::_internal_mutable_chat() {
  
  return _impl_.chat_.Mutable(GetArenaForAllocation());
}
inline std::string* C_ROOM_CHAT::release_chat() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_ROOM_CHAT.chat)
  return _impl_.chat_.Release();
}
inline void C_ROOM_CHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  _impl_.chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_.IsDefault()) {
    _impl_.chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_ROOM_CHAT.chat)
}

// -------------------------------------------------------------------

// S_ROOM_CHAT

// int32 account_id = 1;
inline void S_ROOM_CHAT::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t S_ROOM_CHAT::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t S_ROOM_CHAT::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_CHAT.account_id)
  return _internal_account_id();
}
inline void S_ROOM_CHAT::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void S_ROOM_CHAT::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_CHAT.account_id)
}

// string nickname = 2;
inline void S_ROOM_CHAT::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& S_ROOM_CHAT::nickname() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_CHAT.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ROOM_CHAT::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_CHAT.nickname)
}
inline std::string* S_ROOM_CHAT::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_ROOM_CHAT.nickname)
  return _s;
}
inline const std::string& S_ROOM_CHAT::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void S_ROOM_CHAT::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* S_ROOM_CHAT::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* S_ROOM_CHAT::release_nickname() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_ROOM_CHAT.nickname)
  return _impl_.nickname_.Release();
}
inline void S_ROOM_CHAT::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_ROOM_CHAT.nickname)
}

// int32 room_id = 3;
inline void S_ROOM_CHAT::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t S_ROOM_CHAT::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t S_ROOM_CHAT::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_CHAT.room_id)
  return _internal_room_id();
}
inline void S_ROOM_CHAT::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void S_ROOM_CHAT::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_CHAT.room_id)
}

// string chat = 4;
inline void S_ROOM_CHAT::clear_chat() {
  _impl_.chat_.ClearToEmpty();
}
inline const std::string& S_ROOM_CHAT::chat() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_CHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ROOM_CHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_CHAT.chat)
}
inline std::string* S_ROOM_CHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_ROOM_CHAT.chat)
  return _s;
}
inline const std::string& S_ROOM_CHAT::_internal_chat() const {
  return _impl_.chat_.Get();
}
inline void S_ROOM_CHAT::_internal_set_chat(const std::string& value) {
  
  _impl_.chat_.Set(value, GetArenaForAllocation());
}
inline std::string* S_ROOM_CHAT::_internal_mutable_chat() {
  
  return _impl_.chat_.Mutable(GetArenaForAllocation());
}
inline std::string* S_ROOM_CHAT::release_chat() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_ROOM_CHAT.chat)
  return _impl_.chat_.Release();
}
inline void S_ROOM_CHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  _impl_.chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_.IsDefault()) {
    _impl_.chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_ROOM_CHAT.chat)
}

// -------------------------------------------------------------------

// S_ROOM_STANDBY_MATCH

// uint32 count = 1;
inline void S_ROOM_STANDBY_MATCH::clear_count() {
  _impl_.count_ = 0u;
}
inline uint32_t S_ROOM_STANDBY_MATCH::_internal_count() const {
  return _impl_.count_;
}
inline uint32_t S_ROOM_STANDBY_MATCH::count() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_STANDBY_MATCH.count)
  return _internal_count();
}
inline void S_ROOM_STANDBY_MATCH::_internal_set_count(uint32_t value) {
  
  _impl_.count_ = value;
}
inline void S_ROOM_STANDBY_MATCH::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_STANDBY_MATCH.count)
}

// -------------------------------------------------------------------

// S_ROOM_START_MATCH

// bool start = 1;
inline void S_ROOM_START_MATCH::clear_start() {
  _impl_.start_ = false;
}
inline bool S_ROOM_START_MATCH::_internal_start() const {
  return _impl_.start_;
}
inline bool S_ROOM_START_MATCH::start() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_START_MATCH.start)
  return _internal_start();
}
inline void S_ROOM_START_MATCH::_internal_set_start(bool value) {
  
  _impl_.start_ = value;
}
inline void S_ROOM_START_MATCH::set_start(bool value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_START_MATCH.start)
}

// -------------------------------------------------------------------

// C_MATCH_READY_TO_RECEIVE

// int32 account_id = 1;
inline void C_MATCH_READY_TO_RECEIVE::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_MATCH_READY_TO_RECEIVE::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_MATCH_READY_TO_RECEIVE::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_READY_TO_RECEIVE.account_id)
  return _internal_account_id();
}
inline void C_MATCH_READY_TO_RECEIVE::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_MATCH_READY_TO_RECEIVE::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_READY_TO_RECEIVE.account_id)
}

// -------------------------------------------------------------------

// S_MATCH_ALL_READY_TO_RECIEVE

// int32 your_player_index = 1;
inline void S_MATCH_ALL_READY_TO_RECIEVE::clear_your_player_index() {
  _impl_.your_player_index_ = 0;
}
inline int32_t S_MATCH_ALL_READY_TO_RECIEVE::_internal_your_player_index() const {
  return _impl_.your_player_index_;
}
inline int32_t S_MATCH_ALL_READY_TO_RECIEVE::your_player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ALL_READY_TO_RECIEVE.your_player_index)
  return _internal_your_player_index();
}
inline void S_MATCH_ALL_READY_TO_RECIEVE::_internal_set_your_player_index(int32_t value) {
  
  _impl_.your_player_index_ = value;
}
inline void S_MATCH_ALL_READY_TO_RECIEVE::set_your_player_index(int32_t value) {
  _internal_set_your_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ALL_READY_TO_RECIEVE.your_player_index)
}

// .ProjectJ.MatchInitInfo info = 2;
inline bool S_MATCH_ALL_READY_TO_RECIEVE::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_MATCH_ALL_READY_TO_RECIEVE::has_info() const {
  return _internal_has_info();
}
inline const ::ProjectJ::MatchInitInfo& S_MATCH_ALL_READY_TO_RECIEVE::_internal_info() const {
  const ::ProjectJ::MatchInitInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInitInfo&>(
      ::ProjectJ::_MatchInitInfo_default_instance_);
}
inline const ::ProjectJ::MatchInitInfo& S_MATCH_ALL_READY_TO_RECIEVE::info() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ALL_READY_TO_RECIEVE.info)
  return _internal_info();
}
inline void S_MATCH_ALL_READY_TO_RECIEVE::unsafe_arena_set_allocated_info(
    ::ProjectJ::MatchInitInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_MATCH_ALL_READY_TO_RECIEVE.info)
}
inline ::ProjectJ::MatchInitInfo* S_MATCH_ALL_READY_TO_RECIEVE::release_info() {
  
  ::ProjectJ::MatchInitInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInitInfo* S_MATCH_ALL_READY_TO_RECIEVE::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_MATCH_ALL_READY_TO_RECIEVE.info)
  
  ::ProjectJ::MatchInitInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInitInfo* S_MATCH_ALL_READY_TO_RECIEVE::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInitInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::ProjectJ::MatchInitInfo* S_MATCH_ALL_READY_TO_RECIEVE::mutable_info() {
  ::ProjectJ::MatchInitInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_MATCH_ALL_READY_TO_RECIEVE.info)
  return _msg;
}
inline void S_MATCH_ALL_READY_TO_RECIEVE::set_allocated_info(::ProjectJ::MatchInitInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_MATCH_ALL_READY_TO_RECIEVE.info)
}

// -------------------------------------------------------------------

// S_MATCH_ITEM_GENERATED

// repeated .ProjectJ.Item items = 1;
inline int S_MATCH_ITEM_GENERATED::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int S_MATCH_ITEM_GENERATED::items_size() const {
  return _internal_items_size();
}
inline ::ProjectJ::Item* S_MATCH_ITEM_GENERATED::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_MATCH_ITEM_GENERATED.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >*
S_MATCH_ITEM_GENERATED::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ProjectJ.S_MATCH_ITEM_GENERATED.items)
  return &_impl_.items_;
}
inline const ::ProjectJ::Item& S_MATCH_ITEM_GENERATED::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::ProjectJ::Item& S_MATCH_ITEM_GENERATED::items(int index) const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_GENERATED.items)
  return _internal_items(index);
}
inline ::ProjectJ::Item* S_MATCH_ITEM_GENERATED::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::ProjectJ::Item* S_MATCH_ITEM_GENERATED::add_items() {
  ::ProjectJ::Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:ProjectJ.S_MATCH_ITEM_GENERATED.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >&
S_MATCH_ITEM_GENERATED::items() const {
  // @@protoc_insertion_point(field_list:ProjectJ.S_MATCH_ITEM_GENERATED.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// C_MATCH_READY_TO_START

// int32 player_index = 1;
inline void C_MATCH_READY_TO_START::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t C_MATCH_READY_TO_START::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t C_MATCH_READY_TO_START::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_READY_TO_START.player_index)
  return _internal_player_index();
}
inline void C_MATCH_READY_TO_START::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void C_MATCH_READY_TO_START::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_READY_TO_START.player_index)
}

// -------------------------------------------------------------------

// S_MATCH_START

// uint64 end_tick = 1;
inline void S_MATCH_START::clear_end_tick() {
  _impl_.end_tick_ = uint64_t{0u};
}
inline uint64_t S_MATCH_START::_internal_end_tick() const {
  return _impl_.end_tick_;
}
inline uint64_t S_MATCH_START::end_tick() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_START.end_tick)
  return _internal_end_tick();
}
inline void S_MATCH_START::_internal_set_end_tick(uint64_t value) {
  
  _impl_.end_tick_ = value;
}
inline void S_MATCH_START::set_end_tick(uint64_t value) {
  _internal_set_end_tick(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_START.end_tick)
}

// uint64 current_tick = 2;
inline void S_MATCH_START::clear_current_tick() {
  _impl_.current_tick_ = uint64_t{0u};
}
inline uint64_t S_MATCH_START::_internal_current_tick() const {
  return _impl_.current_tick_;
}
inline uint64_t S_MATCH_START::current_tick() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_START.current_tick)
  return _internal_current_tick();
}
inline void S_MATCH_START::_internal_set_current_tick(uint64_t value) {
  
  _impl_.current_tick_ = value;
}
inline void S_MATCH_START::set_current_tick(uint64_t value) {
  _internal_set_current_tick(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_START.current_tick)
}

// -------------------------------------------------------------------

// C_MATCH_INFO_MyInfo

// .ProjectJ.Vector position = 1;
inline bool C_MATCH_INFO_MyInfo::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool C_MATCH_INFO_MyInfo::has_position() const {
  return _internal_has_position();
}
inline const ::ProjectJ::Vector& C_MATCH_INFO_MyInfo::_internal_position() const {
  const ::ProjectJ::Vector* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Vector&>(
      ::ProjectJ::_Vector_default_instance_);
}
inline const ::ProjectJ::Vector& C_MATCH_INFO_MyInfo::position() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_INFO.MyInfo.position)
  return _internal_position();
}
inline void C_MATCH_INFO_MyInfo::unsafe_arena_set_allocated_position(
    ::ProjectJ::Vector* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.C_MATCH_INFO.MyInfo.position)
}
inline ::ProjectJ::Vector* C_MATCH_INFO_MyInfo::release_position() {
  
  ::ProjectJ::Vector* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Vector* C_MATCH_INFO_MyInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_MATCH_INFO.MyInfo.position)
  
  ::ProjectJ::Vector* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::ProjectJ::Vector* C_MATCH_INFO_MyInfo::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Vector>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::ProjectJ::Vector* C_MATCH_INFO_MyInfo::mutable_position() {
  ::ProjectJ::Vector* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_MATCH_INFO.MyInfo.position)
  return _msg;
}
inline void C_MATCH_INFO_MyInfo::set_allocated_position(::ProjectJ::Vector* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_MATCH_INFO.MyInfo.position)
}

// .ProjectJ.Rotator rotation = 2;
inline bool C_MATCH_INFO_MyInfo::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool C_MATCH_INFO_MyInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::ProjectJ::Rotator& C_MATCH_INFO_MyInfo::_internal_rotation() const {
  const ::ProjectJ::Rotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Rotator&>(
      ::ProjectJ::_Rotator_default_instance_);
}
inline const ::ProjectJ::Rotator& C_MATCH_INFO_MyInfo::rotation() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_INFO.MyInfo.rotation)
  return _internal_rotation();
}
inline void C_MATCH_INFO_MyInfo::unsafe_arena_set_allocated_rotation(
    ::ProjectJ::Rotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.C_MATCH_INFO.MyInfo.rotation)
}
inline ::ProjectJ::Rotator* C_MATCH_INFO_MyInfo::release_rotation() {
  
  ::ProjectJ::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Rotator* C_MATCH_INFO_MyInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_MATCH_INFO.MyInfo.rotation)
  
  ::ProjectJ::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::ProjectJ::Rotator* C_MATCH_INFO_MyInfo::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Rotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::ProjectJ::Rotator* C_MATCH_INFO_MyInfo::mutable_rotation() {
  ::ProjectJ::Rotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_MATCH_INFO.MyInfo.rotation)
  return _msg;
}
inline void C_MATCH_INFO_MyInfo::set_allocated_rotation(::ProjectJ::Rotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_MATCH_INFO.MyInfo.rotation)
}

// -------------------------------------------------------------------

// C_MATCH_INFO

// int32 player_index = 1;
inline void C_MATCH_INFO::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t C_MATCH_INFO::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t C_MATCH_INFO::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_INFO.player_index)
  return _internal_player_index();
}
inline void C_MATCH_INFO::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void C_MATCH_INFO::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_INFO.player_index)
}

// .ProjectJ.C_MATCH_INFO.MyInfo info = 2;
inline bool C_MATCH_INFO::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool C_MATCH_INFO::has_info() const {
  return _internal_has_info();
}
inline void C_MATCH_INFO::clear_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.info_ != nullptr) {
    delete _impl_.info_;
  }
  _impl_.info_ = nullptr;
}
inline const ::ProjectJ::C_MATCH_INFO_MyInfo& C_MATCH_INFO::_internal_info() const {
  const ::ProjectJ::C_MATCH_INFO_MyInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::C_MATCH_INFO_MyInfo&>(
      ::ProjectJ::_C_MATCH_INFO_MyInfo_default_instance_);
}
inline const ::ProjectJ::C_MATCH_INFO_MyInfo& C_MATCH_INFO::info() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_INFO.info)
  return _internal_info();
}
inline void C_MATCH_INFO::unsafe_arena_set_allocated_info(
    ::ProjectJ::C_MATCH_INFO_MyInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.C_MATCH_INFO.info)
}
inline ::ProjectJ::C_MATCH_INFO_MyInfo* C_MATCH_INFO::release_info() {
  
  ::ProjectJ::C_MATCH_INFO_MyInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::C_MATCH_INFO_MyInfo* C_MATCH_INFO::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_MATCH_INFO.info)
  
  ::ProjectJ::C_MATCH_INFO_MyInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::ProjectJ::C_MATCH_INFO_MyInfo* C_MATCH_INFO::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::C_MATCH_INFO_MyInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::ProjectJ::C_MATCH_INFO_MyInfo* C_MATCH_INFO::mutable_info() {
  ::ProjectJ::C_MATCH_INFO_MyInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_MATCH_INFO.info)
  return _msg;
}
inline void C_MATCH_INFO::set_allocated_info(::ProjectJ::C_MATCH_INFO_MyInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_MATCH_INFO.info)
}

// -------------------------------------------------------------------

// S_MATCH_INFO

// uint64 current_tick = 1;
inline void S_MATCH_INFO::clear_current_tick() {
  _impl_.current_tick_ = uint64_t{0u};
}
inline uint64_t S_MATCH_INFO::_internal_current_tick() const {
  return _impl_.current_tick_;
}
inline uint64_t S_MATCH_INFO::current_tick() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_INFO.current_tick)
  return _internal_current_tick();
}
inline void S_MATCH_INFO::_internal_set_current_tick(uint64_t value) {
  
  _impl_.current_tick_ = value;
}
inline void S_MATCH_INFO::set_current_tick(uint64_t value) {
  _internal_set_current_tick(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_INFO.current_tick)
}

// .ProjectJ.MatchInfo info = 2;
inline bool S_MATCH_INFO::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_MATCH_INFO::has_info() const {
  return _internal_has_info();
}
inline const ::ProjectJ::MatchInfo& S_MATCH_INFO::_internal_info() const {
  const ::ProjectJ::MatchInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInfo&>(
      ::ProjectJ::_MatchInfo_default_instance_);
}
inline const ::ProjectJ::MatchInfo& S_MATCH_INFO::info() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_INFO.info)
  return _internal_info();
}
inline void S_MATCH_INFO::unsafe_arena_set_allocated_info(
    ::ProjectJ::MatchInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_MATCH_INFO.info)
}
inline ::ProjectJ::MatchInfo* S_MATCH_INFO::release_info() {
  
  ::ProjectJ::MatchInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInfo* S_MATCH_INFO::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_MATCH_INFO.info)
  
  ::ProjectJ::MatchInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInfo* S_MATCH_INFO::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::ProjectJ::MatchInfo* S_MATCH_INFO::mutable_info() {
  ::ProjectJ::MatchInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_MATCH_INFO.info)
  return _msg;
}
inline void S_MATCH_INFO::set_allocated_info(::ProjectJ::MatchInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_MATCH_INFO.info)
}

// -------------------------------------------------------------------

// S_MATCH_END

// int32 chaser_score = 1;
inline void S_MATCH_END::clear_chaser_score() {
  _impl_.chaser_score_ = 0;
}
inline int32_t S_MATCH_END::_internal_chaser_score() const {
  return _impl_.chaser_score_;
}
inline int32_t S_MATCH_END::chaser_score() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_END.chaser_score)
  return _internal_chaser_score();
}
inline void S_MATCH_END::_internal_set_chaser_score(int32_t value) {
  
  _impl_.chaser_score_ = value;
}
inline void S_MATCH_END::set_chaser_score(int32_t value) {
  _internal_set_chaser_score(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_END.chaser_score)
}

// int32 fugitivie_first_score = 2;
inline void S_MATCH_END::clear_fugitivie_first_score() {
  _impl_.fugitivie_first_score_ = 0;
}
inline int32_t S_MATCH_END::_internal_fugitivie_first_score() const {
  return _impl_.fugitivie_first_score_;
}
inline int32_t S_MATCH_END::fugitivie_first_score() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_END.fugitivie_first_score)
  return _internal_fugitivie_first_score();
}
inline void S_MATCH_END::_internal_set_fugitivie_first_score(int32_t value) {
  
  _impl_.fugitivie_first_score_ = value;
}
inline void S_MATCH_END::set_fugitivie_first_score(int32_t value) {
  _internal_set_fugitivie_first_score(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_END.fugitivie_first_score)
}

// int32 fugitivie_second_score = 3;
inline void S_MATCH_END::clear_fugitivie_second_score() {
  _impl_.fugitivie_second_score_ = 0;
}
inline int32_t S_MATCH_END::_internal_fugitivie_second_score() const {
  return _impl_.fugitivie_second_score_;
}
inline int32_t S_MATCH_END::fugitivie_second_score() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_END.fugitivie_second_score)
  return _internal_fugitivie_second_score();
}
inline void S_MATCH_END::_internal_set_fugitivie_second_score(int32_t value) {
  
  _impl_.fugitivie_second_score_ = value;
}
inline void S_MATCH_END::set_fugitivie_second_score(int32_t value) {
  _internal_set_fugitivie_second_score(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_END.fugitivie_second_score)
}

// int32 fugitivie_third_score = 4;
inline void S_MATCH_END::clear_fugitivie_third_score() {
  _impl_.fugitivie_third_score_ = 0;
}
inline int32_t S_MATCH_END::_internal_fugitivie_third_score() const {
  return _impl_.fugitivie_third_score_;
}
inline int32_t S_MATCH_END::fugitivie_third_score() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_END.fugitivie_third_score)
  return _internal_fugitivie_third_score();
}
inline void S_MATCH_END::_internal_set_fugitivie_third_score(int32_t value) {
  
  _impl_.fugitivie_third_score_ = value;
}
inline void S_MATCH_END::set_fugitivie_third_score(int32_t value) {
  _internal_set_fugitivie_third_score(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_END.fugitivie_third_score)
}

// -------------------------------------------------------------------

// C_MATCH_ITEM_PICKUP

// int32 player_index = 1;
inline void C_MATCH_ITEM_PICKUP::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t C_MATCH_ITEM_PICKUP::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t C_MATCH_ITEM_PICKUP::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_PICKUP.player_index)
  return _internal_player_index();
}
inline void C_MATCH_ITEM_PICKUP::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void C_MATCH_ITEM_PICKUP::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_PICKUP.player_index)
}

// int32 item_index = 2;
inline void C_MATCH_ITEM_PICKUP::clear_item_index() {
  _impl_.item_index_ = 0;
}
inline int32_t C_MATCH_ITEM_PICKUP::_internal_item_index() const {
  return _impl_.item_index_;
}
inline int32_t C_MATCH_ITEM_PICKUP::item_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_PICKUP.item_index)
  return _internal_item_index();
}
inline void C_MATCH_ITEM_PICKUP::_internal_set_item_index(int32_t value) {
  
  _impl_.item_index_ = value;
}
inline void C_MATCH_ITEM_PICKUP::set_item_index(int32_t value) {
  _internal_set_item_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_PICKUP.item_index)
}

// -------------------------------------------------------------------

// C_MATCH_ITEM_MOVE

// int32 player_index = 1;
inline void C_MATCH_ITEM_MOVE::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t C_MATCH_ITEM_MOVE::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t C_MATCH_ITEM_MOVE::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_MOVE.player_index)
  return _internal_player_index();
}
inline void C_MATCH_ITEM_MOVE::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void C_MATCH_ITEM_MOVE::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_MOVE.player_index)
}

// int32 from_index = 2;
inline void C_MATCH_ITEM_MOVE::clear_from_index() {
  _impl_.from_index_ = 0;
}
inline int32_t C_MATCH_ITEM_MOVE::_internal_from_index() const {
  return _impl_.from_index_;
}
inline int32_t C_MATCH_ITEM_MOVE::from_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_MOVE.from_index)
  return _internal_from_index();
}
inline void C_MATCH_ITEM_MOVE::_internal_set_from_index(int32_t value) {
  
  _impl_.from_index_ = value;
}
inline void C_MATCH_ITEM_MOVE::set_from_index(int32_t value) {
  _internal_set_from_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_MOVE.from_index)
}

// int32 to_index = 3;
inline void C_MATCH_ITEM_MOVE::clear_to_index() {
  _impl_.to_index_ = 0;
}
inline int32_t C_MATCH_ITEM_MOVE::_internal_to_index() const {
  return _impl_.to_index_;
}
inline int32_t C_MATCH_ITEM_MOVE::to_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_MOVE.to_index)
  return _internal_to_index();
}
inline void C_MATCH_ITEM_MOVE::_internal_set_to_index(int32_t value) {
  
  _impl_.to_index_ = value;
}
inline void C_MATCH_ITEM_MOVE::set_to_index(int32_t value) {
  _internal_set_to_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_MOVE.to_index)
}

// int32 item_index = 4;
inline void C_MATCH_ITEM_MOVE::clear_item_index() {
  _impl_.item_index_ = 0;
}
inline int32_t C_MATCH_ITEM_MOVE::_internal_item_index() const {
  return _impl_.item_index_;
}
inline int32_t C_MATCH_ITEM_MOVE::item_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_MOVE.item_index)
  return _internal_item_index();
}
inline void C_MATCH_ITEM_MOVE::_internal_set_item_index(int32_t value) {
  
  _impl_.item_index_ = value;
}
inline void C_MATCH_ITEM_MOVE::set_item_index(int32_t value) {
  _internal_set_item_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_MOVE.item_index)
}

// int32 target_top_left_index = 5;
inline void C_MATCH_ITEM_MOVE::clear_target_top_left_index() {
  _impl_.target_top_left_index_ = 0;
}
inline int32_t C_MATCH_ITEM_MOVE::_internal_target_top_left_index() const {
  return _impl_.target_top_left_index_;
}
inline int32_t C_MATCH_ITEM_MOVE::target_top_left_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_MOVE.target_top_left_index)
  return _internal_target_top_left_index();
}
inline void C_MATCH_ITEM_MOVE::_internal_set_target_top_left_index(int32_t value) {
  
  _impl_.target_top_left_index_ = value;
}
inline void C_MATCH_ITEM_MOVE::set_target_top_left_index(int32_t value) {
  _internal_set_target_top_left_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_MOVE.target_top_left_index)
}

// bool is_item_rotated = 6;
inline void C_MATCH_ITEM_MOVE::clear_is_item_rotated() {
  _impl_.is_item_rotated_ = false;
}
inline bool C_MATCH_ITEM_MOVE::_internal_is_item_rotated() const {
  return _impl_.is_item_rotated_;
}
inline bool C_MATCH_ITEM_MOVE::is_item_rotated() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_MOVE.is_item_rotated)
  return _internal_is_item_rotated();
}
inline void C_MATCH_ITEM_MOVE::_internal_set_is_item_rotated(bool value) {
  
  _impl_.is_item_rotated_ = value;
}
inline void C_MATCH_ITEM_MOVE::set_is_item_rotated(bool value) {
  _internal_set_is_item_rotated(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_MOVE.is_item_rotated)
}

// -------------------------------------------------------------------

// C_MATCH_ITEM_DROP

// int32 player_index = 1;
inline void C_MATCH_ITEM_DROP::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t C_MATCH_ITEM_DROP::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t C_MATCH_ITEM_DROP::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_DROP.player_index)
  return _internal_player_index();
}
inline void C_MATCH_ITEM_DROP::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void C_MATCH_ITEM_DROP::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_DROP.player_index)
}

// int32 item_index = 2;
inline void C_MATCH_ITEM_DROP::clear_item_index() {
  _impl_.item_index_ = 0;
}
inline int32_t C_MATCH_ITEM_DROP::_internal_item_index() const {
  return _impl_.item_index_;
}
inline int32_t C_MATCH_ITEM_DROP::item_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_DROP.item_index)
  return _internal_item_index();
}
inline void C_MATCH_ITEM_DROP::_internal_set_item_index(int32_t value) {
  
  _impl_.item_index_ = value;
}
inline void C_MATCH_ITEM_DROP::set_item_index(int32_t value) {
  _internal_set_item_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_DROP.item_index)
}

// .ProjectJ.Vector drop_item_position = 3;
inline bool C_MATCH_ITEM_DROP::_internal_has_drop_item_position() const {
  return this != internal_default_instance() && _impl_.drop_item_position_ != nullptr;
}
inline bool C_MATCH_ITEM_DROP::has_drop_item_position() const {
  return _internal_has_drop_item_position();
}
inline const ::ProjectJ::Vector& C_MATCH_ITEM_DROP::_internal_drop_item_position() const {
  const ::ProjectJ::Vector* p = _impl_.drop_item_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Vector&>(
      ::ProjectJ::_Vector_default_instance_);
}
inline const ::ProjectJ::Vector& C_MATCH_ITEM_DROP::drop_item_position() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_DROP.drop_item_position)
  return _internal_drop_item_position();
}
inline void C_MATCH_ITEM_DROP::unsafe_arena_set_allocated_drop_item_position(
    ::ProjectJ::Vector* drop_item_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_position_);
  }
  _impl_.drop_item_position_ = drop_item_position;
  if (drop_item_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.C_MATCH_ITEM_DROP.drop_item_position)
}
inline ::ProjectJ::Vector* C_MATCH_ITEM_DROP::release_drop_item_position() {
  
  ::ProjectJ::Vector* temp = _impl_.drop_item_position_;
  _impl_.drop_item_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Vector* C_MATCH_ITEM_DROP::unsafe_arena_release_drop_item_position() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_MATCH_ITEM_DROP.drop_item_position)
  
  ::ProjectJ::Vector* temp = _impl_.drop_item_position_;
  _impl_.drop_item_position_ = nullptr;
  return temp;
}
inline ::ProjectJ::Vector* C_MATCH_ITEM_DROP::_internal_mutable_drop_item_position() {
  
  if (_impl_.drop_item_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Vector>(GetArenaForAllocation());
    _impl_.drop_item_position_ = p;
  }
  return _impl_.drop_item_position_;
}
inline ::ProjectJ::Vector* C_MATCH_ITEM_DROP::mutable_drop_item_position() {
  ::ProjectJ::Vector* _msg = _internal_mutable_drop_item_position();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_MATCH_ITEM_DROP.drop_item_position)
  return _msg;
}
inline void C_MATCH_ITEM_DROP::set_allocated_drop_item_position(::ProjectJ::Vector* drop_item_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_position_);
  }
  if (drop_item_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_item_position));
    if (message_arena != submessage_arena) {
      drop_item_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_item_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.drop_item_position_ = drop_item_position;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_MATCH_ITEM_DROP.drop_item_position)
}

// .ProjectJ.Rotator drop_item_rotation = 4;
inline bool C_MATCH_ITEM_DROP::_internal_has_drop_item_rotation() const {
  return this != internal_default_instance() && _impl_.drop_item_rotation_ != nullptr;
}
inline bool C_MATCH_ITEM_DROP::has_drop_item_rotation() const {
  return _internal_has_drop_item_rotation();
}
inline const ::ProjectJ::Rotator& C_MATCH_ITEM_DROP::_internal_drop_item_rotation() const {
  const ::ProjectJ::Rotator* p = _impl_.drop_item_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Rotator&>(
      ::ProjectJ::_Rotator_default_instance_);
}
inline const ::ProjectJ::Rotator& C_MATCH_ITEM_DROP::drop_item_rotation() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_DROP.drop_item_rotation)
  return _internal_drop_item_rotation();
}
inline void C_MATCH_ITEM_DROP::unsafe_arena_set_allocated_drop_item_rotation(
    ::ProjectJ::Rotator* drop_item_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_rotation_);
  }
  _impl_.drop_item_rotation_ = drop_item_rotation;
  if (drop_item_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.C_MATCH_ITEM_DROP.drop_item_rotation)
}
inline ::ProjectJ::Rotator* C_MATCH_ITEM_DROP::release_drop_item_rotation() {
  
  ::ProjectJ::Rotator* temp = _impl_.drop_item_rotation_;
  _impl_.drop_item_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Rotator* C_MATCH_ITEM_DROP::unsafe_arena_release_drop_item_rotation() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_MATCH_ITEM_DROP.drop_item_rotation)
  
  ::ProjectJ::Rotator* temp = _impl_.drop_item_rotation_;
  _impl_.drop_item_rotation_ = nullptr;
  return temp;
}
inline ::ProjectJ::Rotator* C_MATCH_ITEM_DROP::_internal_mutable_drop_item_rotation() {
  
  if (_impl_.drop_item_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Rotator>(GetArenaForAllocation());
    _impl_.drop_item_rotation_ = p;
  }
  return _impl_.drop_item_rotation_;
}
inline ::ProjectJ::Rotator* C_MATCH_ITEM_DROP::mutable_drop_item_rotation() {
  ::ProjectJ::Rotator* _msg = _internal_mutable_drop_item_rotation();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_MATCH_ITEM_DROP.drop_item_rotation)
  return _msg;
}
inline void C_MATCH_ITEM_DROP::set_allocated_drop_item_rotation(::ProjectJ::Rotator* drop_item_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_rotation_);
  }
  if (drop_item_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_item_rotation));
    if (message_arena != submessage_arena) {
      drop_item_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_item_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.drop_item_rotation_ = drop_item_rotation;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_MATCH_ITEM_DROP.drop_item_rotation)
}

// -------------------------------------------------------------------

// S_MATCH_ITEM_SOMEONE_PICKUP

// int32 player_index = 1;
inline void S_MATCH_ITEM_SOMEONE_PICKUP::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t S_MATCH_ITEM_SOMEONE_PICKUP::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t S_MATCH_ITEM_SOMEONE_PICKUP::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_PICKUP.player_index)
  return _internal_player_index();
}
inline void S_MATCH_ITEM_SOMEONE_PICKUP::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_PICKUP::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_PICKUP.player_index)
}

// int32 item_index = 2;
inline void S_MATCH_ITEM_SOMEONE_PICKUP::clear_item_index() {
  _impl_.item_index_ = 0;
}
inline int32_t S_MATCH_ITEM_SOMEONE_PICKUP::_internal_item_index() const {
  return _impl_.item_index_;
}
inline int32_t S_MATCH_ITEM_SOMEONE_PICKUP::item_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_PICKUP.item_index)
  return _internal_item_index();
}
inline void S_MATCH_ITEM_SOMEONE_PICKUP::_internal_set_item_index(int32_t value) {
  
  _impl_.item_index_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_PICKUP::set_item_index(int32_t value) {
  _internal_set_item_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_PICKUP.item_index)
}

// int32 top_left_index = 3;
inline void S_MATCH_ITEM_SOMEONE_PICKUP::clear_top_left_index() {
  _impl_.top_left_index_ = 0;
}
inline int32_t S_MATCH_ITEM_SOMEONE_PICKUP::_internal_top_left_index() const {
  return _impl_.top_left_index_;
}
inline int32_t S_MATCH_ITEM_SOMEONE_PICKUP::top_left_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_PICKUP.top_left_index)
  return _internal_top_left_index();
}
inline void S_MATCH_ITEM_SOMEONE_PICKUP::_internal_set_top_left_index(int32_t value) {
  
  _impl_.top_left_index_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_PICKUP::set_top_left_index(int32_t value) {
  _internal_set_top_left_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_PICKUP.top_left_index)
}

// bool is_item_rotated = 4;
inline void S_MATCH_ITEM_SOMEONE_PICKUP::clear_is_item_rotated() {
  _impl_.is_item_rotated_ = false;
}
inline bool S_MATCH_ITEM_SOMEONE_PICKUP::_internal_is_item_rotated() const {
  return _impl_.is_item_rotated_;
}
inline bool S_MATCH_ITEM_SOMEONE_PICKUP::is_item_rotated() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_PICKUP.is_item_rotated)
  return _internal_is_item_rotated();
}
inline void S_MATCH_ITEM_SOMEONE_PICKUP::_internal_set_is_item_rotated(bool value) {
  
  _impl_.is_item_rotated_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_PICKUP::set_is_item_rotated(bool value) {
  _internal_set_is_item_rotated(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_PICKUP.is_item_rotated)
}

// -------------------------------------------------------------------

// S_MATCH_ITEM_SOMEONE_MOVE

// int32 player_index = 1;
inline void S_MATCH_ITEM_SOMEONE_MOVE::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t S_MATCH_ITEM_SOMEONE_MOVE::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t S_MATCH_ITEM_SOMEONE_MOVE::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.player_index)
  return _internal_player_index();
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.player_index)
}

// int32 from_index = 2;
inline void S_MATCH_ITEM_SOMEONE_MOVE::clear_from_index() {
  _impl_.from_index_ = 0;
}
inline int32_t S_MATCH_ITEM_SOMEONE_MOVE::_internal_from_index() const {
  return _impl_.from_index_;
}
inline int32_t S_MATCH_ITEM_SOMEONE_MOVE::from_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.from_index)
  return _internal_from_index();
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::_internal_set_from_index(int32_t value) {
  
  _impl_.from_index_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::set_from_index(int32_t value) {
  _internal_set_from_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.from_index)
}

// int32 to_index = 3;
inline void S_MATCH_ITEM_SOMEONE_MOVE::clear_to_index() {
  _impl_.to_index_ = 0;
}
inline int32_t S_MATCH_ITEM_SOMEONE_MOVE::_internal_to_index() const {
  return _impl_.to_index_;
}
inline int32_t S_MATCH_ITEM_SOMEONE_MOVE::to_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.to_index)
  return _internal_to_index();
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::_internal_set_to_index(int32_t value) {
  
  _impl_.to_index_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::set_to_index(int32_t value) {
  _internal_set_to_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.to_index)
}

// int32 item_index = 4;
inline void S_MATCH_ITEM_SOMEONE_MOVE::clear_item_index() {
  _impl_.item_index_ = 0;
}
inline int32_t S_MATCH_ITEM_SOMEONE_MOVE::_internal_item_index() const {
  return _impl_.item_index_;
}
inline int32_t S_MATCH_ITEM_SOMEONE_MOVE::item_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.item_index)
  return _internal_item_index();
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::_internal_set_item_index(int32_t value) {
  
  _impl_.item_index_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::set_item_index(int32_t value) {
  _internal_set_item_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.item_index)
}

// int32 top_left_index = 5;
inline void S_MATCH_ITEM_SOMEONE_MOVE::clear_top_left_index() {
  _impl_.top_left_index_ = 0;
}
inline int32_t S_MATCH_ITEM_SOMEONE_MOVE::_internal_top_left_index() const {
  return _impl_.top_left_index_;
}
inline int32_t S_MATCH_ITEM_SOMEONE_MOVE::top_left_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.top_left_index)
  return _internal_top_left_index();
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::_internal_set_top_left_index(int32_t value) {
  
  _impl_.top_left_index_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::set_top_left_index(int32_t value) {
  _internal_set_top_left_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.top_left_index)
}

// bool is_item_rotated = 6;
inline void S_MATCH_ITEM_SOMEONE_MOVE::clear_is_item_rotated() {
  _impl_.is_item_rotated_ = false;
}
inline bool S_MATCH_ITEM_SOMEONE_MOVE::_internal_is_item_rotated() const {
  return _impl_.is_item_rotated_;
}
inline bool S_MATCH_ITEM_SOMEONE_MOVE::is_item_rotated() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.is_item_rotated)
  return _internal_is_item_rotated();
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::_internal_set_is_item_rotated(bool value) {
  
  _impl_.is_item_rotated_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_MOVE::set_is_item_rotated(bool value) {
  _internal_set_is_item_rotated(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_MOVE.is_item_rotated)
}

// -------------------------------------------------------------------

// S_MATCH_ITEM_SOMEONE_DROP

// int32 player_index = 1;
inline void S_MATCH_ITEM_SOMEONE_DROP::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t S_MATCH_ITEM_SOMEONE_DROP::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t S_MATCH_ITEM_SOMEONE_DROP::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.player_index)
  return _internal_player_index();
}
inline void S_MATCH_ITEM_SOMEONE_DROP::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_DROP::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.player_index)
}

// int32 item_index = 2;
inline void S_MATCH_ITEM_SOMEONE_DROP::clear_item_index() {
  _impl_.item_index_ = 0;
}
inline int32_t S_MATCH_ITEM_SOMEONE_DROP::_internal_item_index() const {
  return _impl_.item_index_;
}
inline int32_t S_MATCH_ITEM_SOMEONE_DROP::item_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.item_index)
  return _internal_item_index();
}
inline void S_MATCH_ITEM_SOMEONE_DROP::_internal_set_item_index(int32_t value) {
  
  _impl_.item_index_ = value;
}
inline void S_MATCH_ITEM_SOMEONE_DROP::set_item_index(int32_t value) {
  _internal_set_item_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.item_index)
}

// .ProjectJ.Vector drop_item_position = 3;
inline bool S_MATCH_ITEM_SOMEONE_DROP::_internal_has_drop_item_position() const {
  return this != internal_default_instance() && _impl_.drop_item_position_ != nullptr;
}
inline bool S_MATCH_ITEM_SOMEONE_DROP::has_drop_item_position() const {
  return _internal_has_drop_item_position();
}
inline const ::ProjectJ::Vector& S_MATCH_ITEM_SOMEONE_DROP::_internal_drop_item_position() const {
  const ::ProjectJ::Vector* p = _impl_.drop_item_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Vector&>(
      ::ProjectJ::_Vector_default_instance_);
}
inline const ::ProjectJ::Vector& S_MATCH_ITEM_SOMEONE_DROP::drop_item_position() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.drop_item_position)
  return _internal_drop_item_position();
}
inline void S_MATCH_ITEM_SOMEONE_DROP::unsafe_arena_set_allocated_drop_item_position(
    ::ProjectJ::Vector* drop_item_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_position_);
  }
  _impl_.drop_item_position_ = drop_item_position;
  if (drop_item_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.drop_item_position)
}
inline ::ProjectJ::Vector* S_MATCH_ITEM_SOMEONE_DROP::release_drop_item_position() {
  
  ::ProjectJ::Vector* temp = _impl_.drop_item_position_;
  _impl_.drop_item_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Vector* S_MATCH_ITEM_SOMEONE_DROP::unsafe_arena_release_drop_item_position() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.drop_item_position)
  
  ::ProjectJ::Vector* temp = _impl_.drop_item_position_;
  _impl_.drop_item_position_ = nullptr;
  return temp;
}
inline ::ProjectJ::Vector* S_MATCH_ITEM_SOMEONE_DROP::_internal_mutable_drop_item_position() {
  
  if (_impl_.drop_item_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Vector>(GetArenaForAllocation());
    _impl_.drop_item_position_ = p;
  }
  return _impl_.drop_item_position_;
}
inline ::ProjectJ::Vector* S_MATCH_ITEM_SOMEONE_DROP::mutable_drop_item_position() {
  ::ProjectJ::Vector* _msg = _internal_mutable_drop_item_position();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.drop_item_position)
  return _msg;
}
inline void S_MATCH_ITEM_SOMEONE_DROP::set_allocated_drop_item_position(::ProjectJ::Vector* drop_item_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_position_);
  }
  if (drop_item_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_item_position));
    if (message_arena != submessage_arena) {
      drop_item_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_item_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.drop_item_position_ = drop_item_position;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.drop_item_position)
}

// .ProjectJ.Rotator drop_item_rotation = 4;
inline bool S_MATCH_ITEM_SOMEONE_DROP::_internal_has_drop_item_rotation() const {
  return this != internal_default_instance() && _impl_.drop_item_rotation_ != nullptr;
}
inline bool S_MATCH_ITEM_SOMEONE_DROP::has_drop_item_rotation() const {
  return _internal_has_drop_item_rotation();
}
inline const ::ProjectJ::Rotator& S_MATCH_ITEM_SOMEONE_DROP::_internal_drop_item_rotation() const {
  const ::ProjectJ::Rotator* p = _impl_.drop_item_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Rotator&>(
      ::ProjectJ::_Rotator_default_instance_);
}
inline const ::ProjectJ::Rotator& S_MATCH_ITEM_SOMEONE_DROP::drop_item_rotation() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.drop_item_rotation)
  return _internal_drop_item_rotation();
}
inline void S_MATCH_ITEM_SOMEONE_DROP::unsafe_arena_set_allocated_drop_item_rotation(
    ::ProjectJ::Rotator* drop_item_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_rotation_);
  }
  _impl_.drop_item_rotation_ = drop_item_rotation;
  if (drop_item_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.drop_item_rotation)
}
inline ::ProjectJ::Rotator* S_MATCH_ITEM_SOMEONE_DROP::release_drop_item_rotation() {
  
  ::ProjectJ::Rotator* temp = _impl_.drop_item_rotation_;
  _impl_.drop_item_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Rotator* S_MATCH_ITEM_SOMEONE_DROP::unsafe_arena_release_drop_item_rotation() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.drop_item_rotation)
  
  ::ProjectJ::Rotator* temp = _impl_.drop_item_rotation_;
  _impl_.drop_item_rotation_ = nullptr;
  return temp;
}
inline ::ProjectJ::Rotator* S_MATCH_ITEM_SOMEONE_DROP::_internal_mutable_drop_item_rotation() {
  
  if (_impl_.drop_item_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Rotator>(GetArenaForAllocation());
    _impl_.drop_item_rotation_ = p;
  }
  return _impl_.drop_item_rotation_;
}
inline ::ProjectJ::Rotator* S_MATCH_ITEM_SOMEONE_DROP::mutable_drop_item_rotation() {
  ::ProjectJ::Rotator* _msg = _internal_mutable_drop_item_rotation();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.drop_item_rotation)
  return _msg;
}
inline void S_MATCH_ITEM_SOMEONE_DROP::set_allocated_drop_item_rotation(::ProjectJ::Rotator* drop_item_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_rotation_);
  }
  if (drop_item_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_item_rotation));
    if (message_arena != submessage_arena) {
      drop_item_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_item_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.drop_item_rotation_ = drop_item_rotation;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_MATCH_ITEM_SOMEONE_DROP.drop_item_rotation)
}

// -------------------------------------------------------------------

// S_MATCH_SCALE_ON_CHANGED

// int32 scale_index = 1;
inline void S_MATCH_SCALE_ON_CHANGED::clear_scale_index() {
  _impl_.scale_index_ = 0;
}
inline int32_t S_MATCH_SCALE_ON_CHANGED::_internal_scale_index() const {
  return _impl_.scale_index_;
}
inline int32_t S_MATCH_SCALE_ON_CHANGED::scale_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_SCALE_ON_CHANGED.scale_index)
  return _internal_scale_index();
}
inline void S_MATCH_SCALE_ON_CHANGED::_internal_set_scale_index(int32_t value) {
  
  _impl_.scale_index_ = value;
}
inline void S_MATCH_SCALE_ON_CHANGED::set_scale_index(int32_t value) {
  _internal_set_scale_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_SCALE_ON_CHANGED.scale_index)
}

// int32 current_weight = 2;
inline void S_MATCH_SCALE_ON_CHANGED::clear_current_weight() {
  _impl_.current_weight_ = 0;
}
inline int32_t S_MATCH_SCALE_ON_CHANGED::_internal_current_weight() const {
  return _impl_.current_weight_;
}
inline int32_t S_MATCH_SCALE_ON_CHANGED::current_weight() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_SCALE_ON_CHANGED.current_weight)
  return _internal_current_weight();
}
inline void S_MATCH_SCALE_ON_CHANGED::_internal_set_current_weight(int32_t value) {
  
  _impl_.current_weight_ = value;
}
inline void S_MATCH_SCALE_ON_CHANGED::set_current_weight(int32_t value) {
  _internal_set_current_weight(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_SCALE_ON_CHANGED.current_weight)
}

// bool is_operating = 3;
inline void S_MATCH_SCALE_ON_CHANGED::clear_is_operating() {
  _impl_.is_operating_ = false;
}
inline bool S_MATCH_SCALE_ON_CHANGED::_internal_is_operating() const {
  return _impl_.is_operating_;
}
inline bool S_MATCH_SCALE_ON_CHANGED::is_operating() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_SCALE_ON_CHANGED.is_operating)
  return _internal_is_operating();
}
inline void S_MATCH_SCALE_ON_CHANGED::_internal_set_is_operating(bool value) {
  
  _impl_.is_operating_ = value;
}
inline void S_MATCH_SCALE_ON_CHANGED::set_is_operating(bool value) {
  _internal_set_is_operating(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_SCALE_ON_CHANGED.is_operating)
}

// -------------------------------------------------------------------

// C_MATCH_CHASER_ATTACK

// .ProjectJ.Vector attack_position = 1;
inline bool C_MATCH_CHASER_ATTACK::_internal_has_attack_position() const {
  return this != internal_default_instance() && _impl_.attack_position_ != nullptr;
}
inline bool C_MATCH_CHASER_ATTACK::has_attack_position() const {
  return _internal_has_attack_position();
}
inline const ::ProjectJ::Vector& C_MATCH_CHASER_ATTACK::_internal_attack_position() const {
  const ::ProjectJ::Vector* p = _impl_.attack_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Vector&>(
      ::ProjectJ::_Vector_default_instance_);
}
inline const ::ProjectJ::Vector& C_MATCH_CHASER_ATTACK::attack_position() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_CHASER_ATTACK.attack_position)
  return _internal_attack_position();
}
inline void C_MATCH_CHASER_ATTACK::unsafe_arena_set_allocated_attack_position(
    ::ProjectJ::Vector* attack_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_position_);
  }
  _impl_.attack_position_ = attack_position;
  if (attack_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.C_MATCH_CHASER_ATTACK.attack_position)
}
inline ::ProjectJ::Vector* C_MATCH_CHASER_ATTACK::release_attack_position() {
  
  ::ProjectJ::Vector* temp = _impl_.attack_position_;
  _impl_.attack_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Vector* C_MATCH_CHASER_ATTACK::unsafe_arena_release_attack_position() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_MATCH_CHASER_ATTACK.attack_position)
  
  ::ProjectJ::Vector* temp = _impl_.attack_position_;
  _impl_.attack_position_ = nullptr;
  return temp;
}
inline ::ProjectJ::Vector* C_MATCH_CHASER_ATTACK::_internal_mutable_attack_position() {
  
  if (_impl_.attack_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Vector>(GetArenaForAllocation());
    _impl_.attack_position_ = p;
  }
  return _impl_.attack_position_;
}
inline ::ProjectJ::Vector* C_MATCH_CHASER_ATTACK::mutable_attack_position() {
  ::ProjectJ::Vector* _msg = _internal_mutable_attack_position();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_MATCH_CHASER_ATTACK.attack_position)
  return _msg;
}
inline void C_MATCH_CHASER_ATTACK::set_allocated_attack_position(::ProjectJ::Vector* attack_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_position_);
  }
  if (attack_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attack_position));
    if (message_arena != submessage_arena) {
      attack_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attack_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attack_position_ = attack_position;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_MATCH_CHASER_ATTACK.attack_position)
}

// .ProjectJ.Rotator attack_rotation = 2;
inline bool C_MATCH_CHASER_ATTACK::_internal_has_attack_rotation() const {
  return this != internal_default_instance() && _impl_.attack_rotation_ != nullptr;
}
inline bool C_MATCH_CHASER_ATTACK::has_attack_rotation() const {
  return _internal_has_attack_rotation();
}
inline const ::ProjectJ::Rotator& C_MATCH_CHASER_ATTACK::_internal_attack_rotation() const {
  const ::ProjectJ::Rotator* p = _impl_.attack_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Rotator&>(
      ::ProjectJ::_Rotator_default_instance_);
}
inline const ::ProjectJ::Rotator& C_MATCH_CHASER_ATTACK::attack_rotation() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_CHASER_ATTACK.attack_rotation)
  return _internal_attack_rotation();
}
inline void C_MATCH_CHASER_ATTACK::unsafe_arena_set_allocated_attack_rotation(
    ::ProjectJ::Rotator* attack_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_rotation_);
  }
  _impl_.attack_rotation_ = attack_rotation;
  if (attack_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.C_MATCH_CHASER_ATTACK.attack_rotation)
}
inline ::ProjectJ::Rotator* C_MATCH_CHASER_ATTACK::release_attack_rotation() {
  
  ::ProjectJ::Rotator* temp = _impl_.attack_rotation_;
  _impl_.attack_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Rotator* C_MATCH_CHASER_ATTACK::unsafe_arena_release_attack_rotation() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_MATCH_CHASER_ATTACK.attack_rotation)
  
  ::ProjectJ::Rotator* temp = _impl_.attack_rotation_;
  _impl_.attack_rotation_ = nullptr;
  return temp;
}
inline ::ProjectJ::Rotator* C_MATCH_CHASER_ATTACK::_internal_mutable_attack_rotation() {
  
  if (_impl_.attack_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Rotator>(GetArenaForAllocation());
    _impl_.attack_rotation_ = p;
  }
  return _impl_.attack_rotation_;
}
inline ::ProjectJ::Rotator* C_MATCH_CHASER_ATTACK::mutable_attack_rotation() {
  ::ProjectJ::Rotator* _msg = _internal_mutable_attack_rotation();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_MATCH_CHASER_ATTACK.attack_rotation)
  return _msg;
}
inline void C_MATCH_CHASER_ATTACK::set_allocated_attack_rotation(::ProjectJ::Rotator* attack_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_rotation_);
  }
  if (attack_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attack_rotation));
    if (message_arena != submessage_arena) {
      attack_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attack_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attack_rotation_ = attack_rotation;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_MATCH_CHASER_ATTACK.attack_rotation)
}

// -------------------------------------------------------------------

// S_MATCH_CHASER_ATTACK

// .ProjectJ.Vector attack_position = 1;
inline bool S_MATCH_CHASER_ATTACK::_internal_has_attack_position() const {
  return this != internal_default_instance() && _impl_.attack_position_ != nullptr;
}
inline bool S_MATCH_CHASER_ATTACK::has_attack_position() const {
  return _internal_has_attack_position();
}
inline const ::ProjectJ::Vector& S_MATCH_CHASER_ATTACK::_internal_attack_position() const {
  const ::ProjectJ::Vector* p = _impl_.attack_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Vector&>(
      ::ProjectJ::_Vector_default_instance_);
}
inline const ::ProjectJ::Vector& S_MATCH_CHASER_ATTACK::attack_position() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_CHASER_ATTACK.attack_position)
  return _internal_attack_position();
}
inline void S_MATCH_CHASER_ATTACK::unsafe_arena_set_allocated_attack_position(
    ::ProjectJ::Vector* attack_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_position_);
  }
  _impl_.attack_position_ = attack_position;
  if (attack_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_MATCH_CHASER_ATTACK.attack_position)
}
inline ::ProjectJ::Vector* S_MATCH_CHASER_ATTACK::release_attack_position() {
  
  ::ProjectJ::Vector* temp = _impl_.attack_position_;
  _impl_.attack_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Vector* S_MATCH_CHASER_ATTACK::unsafe_arena_release_attack_position() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_MATCH_CHASER_ATTACK.attack_position)
  
  ::ProjectJ::Vector* temp = _impl_.attack_position_;
  _impl_.attack_position_ = nullptr;
  return temp;
}
inline ::ProjectJ::Vector* S_MATCH_CHASER_ATTACK::_internal_mutable_attack_position() {
  
  if (_impl_.attack_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Vector>(GetArenaForAllocation());
    _impl_.attack_position_ = p;
  }
  return _impl_.attack_position_;
}
inline ::ProjectJ::Vector* S_MATCH_CHASER_ATTACK::mutable_attack_position() {
  ::ProjectJ::Vector* _msg = _internal_mutable_attack_position();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_MATCH_CHASER_ATTACK.attack_position)
  return _msg;
}
inline void S_MATCH_CHASER_ATTACK::set_allocated_attack_position(::ProjectJ::Vector* attack_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_position_);
  }
  if (attack_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attack_position));
    if (message_arena != submessage_arena) {
      attack_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attack_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attack_position_ = attack_position;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_MATCH_CHASER_ATTACK.attack_position)
}

// .ProjectJ.Rotator attack_rotation = 2;
inline bool S_MATCH_CHASER_ATTACK::_internal_has_attack_rotation() const {
  return this != internal_default_instance() && _impl_.attack_rotation_ != nullptr;
}
inline bool S_MATCH_CHASER_ATTACK::has_attack_rotation() const {
  return _internal_has_attack_rotation();
}
inline const ::ProjectJ::Rotator& S_MATCH_CHASER_ATTACK::_internal_attack_rotation() const {
  const ::ProjectJ::Rotator* p = _impl_.attack_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Rotator&>(
      ::ProjectJ::_Rotator_default_instance_);
}
inline const ::ProjectJ::Rotator& S_MATCH_CHASER_ATTACK::attack_rotation() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_CHASER_ATTACK.attack_rotation)
  return _internal_attack_rotation();
}
inline void S_MATCH_CHASER_ATTACK::unsafe_arena_set_allocated_attack_rotation(
    ::ProjectJ::Rotator* attack_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_rotation_);
  }
  _impl_.attack_rotation_ = attack_rotation;
  if (attack_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_MATCH_CHASER_ATTACK.attack_rotation)
}
inline ::ProjectJ::Rotator* S_MATCH_CHASER_ATTACK::release_attack_rotation() {
  
  ::ProjectJ::Rotator* temp = _impl_.attack_rotation_;
  _impl_.attack_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Rotator* S_MATCH_CHASER_ATTACK::unsafe_arena_release_attack_rotation() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_MATCH_CHASER_ATTACK.attack_rotation)
  
  ::ProjectJ::Rotator* temp = _impl_.attack_rotation_;
  _impl_.attack_rotation_ = nullptr;
  return temp;
}
inline ::ProjectJ::Rotator* S_MATCH_CHASER_ATTACK::_internal_mutable_attack_rotation() {
  
  if (_impl_.attack_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Rotator>(GetArenaForAllocation());
    _impl_.attack_rotation_ = p;
  }
  return _impl_.attack_rotation_;
}
inline ::ProjectJ::Rotator* S_MATCH_CHASER_ATTACK::mutable_attack_rotation() {
  ::ProjectJ::Rotator* _msg = _internal_mutable_attack_rotation();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_MATCH_CHASER_ATTACK.attack_rotation)
  return _msg;
}
inline void S_MATCH_CHASER_ATTACK::set_allocated_attack_rotation(::ProjectJ::Rotator* attack_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_rotation_);
  }
  if (attack_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attack_rotation));
    if (message_arena != submessage_arena) {
      attack_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attack_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attack_rotation_ = attack_rotation;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_MATCH_CHASER_ATTACK.attack_rotation)
}

// -------------------------------------------------------------------

// C_MATCH_CHASER_HIT

// .ProjectJ.Vector attack_position = 1;
inline bool C_MATCH_CHASER_HIT::_internal_has_attack_position() const {
  return this != internal_default_instance() && _impl_.attack_position_ != nullptr;
}
inline bool C_MATCH_CHASER_HIT::has_attack_position() const {
  return _internal_has_attack_position();
}
inline const ::ProjectJ::Vector& C_MATCH_CHASER_HIT::_internal_attack_position() const {
  const ::ProjectJ::Vector* p = _impl_.attack_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Vector&>(
      ::ProjectJ::_Vector_default_instance_);
}
inline const ::ProjectJ::Vector& C_MATCH_CHASER_HIT::attack_position() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_CHASER_HIT.attack_position)
  return _internal_attack_position();
}
inline void C_MATCH_CHASER_HIT::unsafe_arena_set_allocated_attack_position(
    ::ProjectJ::Vector* attack_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_position_);
  }
  _impl_.attack_position_ = attack_position;
  if (attack_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.C_MATCH_CHASER_HIT.attack_position)
}
inline ::ProjectJ::Vector* C_MATCH_CHASER_HIT::release_attack_position() {
  
  ::ProjectJ::Vector* temp = _impl_.attack_position_;
  _impl_.attack_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Vector* C_MATCH_CHASER_HIT::unsafe_arena_release_attack_position() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_MATCH_CHASER_HIT.attack_position)
  
  ::ProjectJ::Vector* temp = _impl_.attack_position_;
  _impl_.attack_position_ = nullptr;
  return temp;
}
inline ::ProjectJ::Vector* C_MATCH_CHASER_HIT::_internal_mutable_attack_position() {
  
  if (_impl_.attack_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Vector>(GetArenaForAllocation());
    _impl_.attack_position_ = p;
  }
  return _impl_.attack_position_;
}
inline ::ProjectJ::Vector* C_MATCH_CHASER_HIT::mutable_attack_position() {
  ::ProjectJ::Vector* _msg = _internal_mutable_attack_position();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_MATCH_CHASER_HIT.attack_position)
  return _msg;
}
inline void C_MATCH_CHASER_HIT::set_allocated_attack_position(::ProjectJ::Vector* attack_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_position_);
  }
  if (attack_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attack_position));
    if (message_arena != submessage_arena) {
      attack_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attack_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attack_position_ = attack_position;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_MATCH_CHASER_HIT.attack_position)
}

// .ProjectJ.Rotator attack_rotation = 2;
inline bool C_MATCH_CHASER_HIT::_internal_has_attack_rotation() const {
  return this != internal_default_instance() && _impl_.attack_rotation_ != nullptr;
}
inline bool C_MATCH_CHASER_HIT::has_attack_rotation() const {
  return _internal_has_attack_rotation();
}
inline const ::ProjectJ::Rotator& C_MATCH_CHASER_HIT::_internal_attack_rotation() const {
  const ::ProjectJ::Rotator* p = _impl_.attack_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Rotator&>(
      ::ProjectJ::_Rotator_default_instance_);
}
inline const ::ProjectJ::Rotator& C_MATCH_CHASER_HIT::attack_rotation() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_CHASER_HIT.attack_rotation)
  return _internal_attack_rotation();
}
inline void C_MATCH_CHASER_HIT::unsafe_arena_set_allocated_attack_rotation(
    ::ProjectJ::Rotator* attack_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_rotation_);
  }
  _impl_.attack_rotation_ = attack_rotation;
  if (attack_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.C_MATCH_CHASER_HIT.attack_rotation)
}
inline ::ProjectJ::Rotator* C_MATCH_CHASER_HIT::release_attack_rotation() {
  
  ::ProjectJ::Rotator* temp = _impl_.attack_rotation_;
  _impl_.attack_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Rotator* C_MATCH_CHASER_HIT::unsafe_arena_release_attack_rotation() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_MATCH_CHASER_HIT.attack_rotation)
  
  ::ProjectJ::Rotator* temp = _impl_.attack_rotation_;
  _impl_.attack_rotation_ = nullptr;
  return temp;
}
inline ::ProjectJ::Rotator* C_MATCH_CHASER_HIT::_internal_mutable_attack_rotation() {
  
  if (_impl_.attack_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Rotator>(GetArenaForAllocation());
    _impl_.attack_rotation_ = p;
  }
  return _impl_.attack_rotation_;
}
inline ::ProjectJ::Rotator* C_MATCH_CHASER_HIT::mutable_attack_rotation() {
  ::ProjectJ::Rotator* _msg = _internal_mutable_attack_rotation();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_MATCH_CHASER_HIT.attack_rotation)
  return _msg;
}
inline void C_MATCH_CHASER_HIT::set_allocated_attack_rotation(::ProjectJ::Rotator* attack_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attack_rotation_);
  }
  if (attack_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attack_rotation));
    if (message_arena != submessage_arena) {
      attack_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attack_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.attack_rotation_ = attack_rotation;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_MATCH_CHASER_HIT.attack_rotation)
}

// int32 hit_player_index = 3;
inline void C_MATCH_CHASER_HIT::clear_hit_player_index() {
  _impl_.hit_player_index_ = 0;
}
inline int32_t C_MATCH_CHASER_HIT::_internal_hit_player_index() const {
  return _impl_.hit_player_index_;
}
inline int32_t C_MATCH_CHASER_HIT::hit_player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_CHASER_HIT.hit_player_index)
  return _internal_hit_player_index();
}
inline void C_MATCH_CHASER_HIT::_internal_set_hit_player_index(int32_t value) {
  
  _impl_.hit_player_index_ = value;
}
inline void C_MATCH_CHASER_HIT::set_hit_player_index(int32_t value) {
  _internal_set_hit_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_CHASER_HIT.hit_player_index)
}

// -------------------------------------------------------------------

// S_MATCH_CHASER_HIT

// bool result = 1;
inline void S_MATCH_CHASER_HIT::clear_result() {
  _impl_.result_ = false;
}
inline bool S_MATCH_CHASER_HIT::_internal_result() const {
  return _impl_.result_;
}
inline bool S_MATCH_CHASER_HIT::result() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_CHASER_HIT.result)
  return _internal_result();
}
inline void S_MATCH_CHASER_HIT::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S_MATCH_CHASER_HIT::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_CHASER_HIT.result)
}

// int32 hit_player_index = 2;
inline void S_MATCH_CHASER_HIT::clear_hit_player_index() {
  _impl_.hit_player_index_ = 0;
}
inline int32_t S_MATCH_CHASER_HIT::_internal_hit_player_index() const {
  return _impl_.hit_player_index_;
}
inline int32_t S_MATCH_CHASER_HIT::hit_player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_CHASER_HIT.hit_player_index)
  return _internal_hit_player_index();
}
inline void S_MATCH_CHASER_HIT::_internal_set_hit_player_index(int32_t value) {
  
  _impl_.hit_player_index_ = value;
}
inline void S_MATCH_CHASER_HIT::set_hit_player_index(int32_t value) {
  _internal_set_hit_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_CHASER_HIT.hit_player_index)
}

// .ProjectJ.MatchPlayerState changed_state = 3;
inline void S_MATCH_CHASER_HIT::clear_changed_state() {
  _impl_.changed_state_ = 0;
}
inline ::ProjectJ::MatchPlayerState S_MATCH_CHASER_HIT::_internal_changed_state() const {
  return static_cast< ::ProjectJ::MatchPlayerState >(_impl_.changed_state_);
}
inline ::ProjectJ::MatchPlayerState S_MATCH_CHASER_HIT::changed_state() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_CHASER_HIT.changed_state)
  return _internal_changed_state();
}
inline void S_MATCH_CHASER_HIT::_internal_set_changed_state(::ProjectJ::MatchPlayerState value) {
  
  _impl_.changed_state_ = value;
}
inline void S_MATCH_CHASER_HIT::set_changed_state(::ProjectJ::MatchPlayerState value) {
  _internal_set_changed_state(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_CHASER_HIT.changed_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProjectJ

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
