#pragma warning(disable:4800)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace ProjectJ {
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class MatchInfo;
struct MatchInfoDefaultTypeInternal;
extern MatchInfoDefaultTypeInternal _MatchInfo_default_instance_;
class MatchInfo_PlayerInfo;
struct MatchInfo_PlayerInfoDefaultTypeInternal;
extern MatchInfo_PlayerInfoDefaultTypeInternal _MatchInfo_PlayerInfo_default_instance_;
class MatchInfo_ScaleInfo;
struct MatchInfo_ScaleInfoDefaultTypeInternal;
extern MatchInfo_ScaleInfoDefaultTypeInternal _MatchInfo_ScaleInfo_default_instance_;
class MatchInitInfo;
struct MatchInitInfoDefaultTypeInternal;
extern MatchInitInfoDefaultTypeInternal _MatchInitInfo_default_instance_;
class MatchInitInfo_ScaleInitInfo;
struct MatchInitInfo_ScaleInitInfoDefaultTypeInternal;
extern MatchInitInfo_ScaleInitInfoDefaultTypeInternal _MatchInitInfo_ScaleInitInfo_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class Room;
struct RoomDefaultTypeInternal;
extern RoomDefaultTypeInternal _Room_default_instance_;
class RoomInfo;
struct RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class RoomInfo_PlayerSlot;
struct RoomInfo_PlayerSlotDefaultTypeInternal;
extern RoomInfo_PlayerSlotDefaultTypeInternal _RoomInfo_PlayerSlot_default_instance_;
class Rotator;
struct RotatorDefaultTypeInternal;
extern RotatorDefaultTypeInternal _Rotator_default_instance_;
class Vector;
struct VectorDefaultTypeInternal;
extern VectorDefaultTypeInternal _Vector_default_instance_;
}  // namespace ProjectJ
PROTOBUF_NAMESPACE_OPEN
template<> ::ProjectJ::Item* Arena::CreateMaybeMessage<::ProjectJ::Item>(Arena*);
template<> ::ProjectJ::MatchInfo* Arena::CreateMaybeMessage<::ProjectJ::MatchInfo>(Arena*);
template<> ::ProjectJ::MatchInfo_PlayerInfo* Arena::CreateMaybeMessage<::ProjectJ::MatchInfo_PlayerInfo>(Arena*);
template<> ::ProjectJ::MatchInfo_ScaleInfo* Arena::CreateMaybeMessage<::ProjectJ::MatchInfo_ScaleInfo>(Arena*);
template<> ::ProjectJ::MatchInitInfo* Arena::CreateMaybeMessage<::ProjectJ::MatchInitInfo>(Arena*);
template<> ::ProjectJ::MatchInitInfo_ScaleInitInfo* Arena::CreateMaybeMessage<::ProjectJ::MatchInitInfo_ScaleInitInfo>(Arena*);
template<> ::ProjectJ::Player* Arena::CreateMaybeMessage<::ProjectJ::Player>(Arena*);
template<> ::ProjectJ::PlayerInfo* Arena::CreateMaybeMessage<::ProjectJ::PlayerInfo>(Arena*);
template<> ::ProjectJ::Room* Arena::CreateMaybeMessage<::ProjectJ::Room>(Arena*);
template<> ::ProjectJ::RoomInfo* Arena::CreateMaybeMessage<::ProjectJ::RoomInfo>(Arena*);
template<> ::ProjectJ::RoomInfo_PlayerSlot* Arena::CreateMaybeMessage<::ProjectJ::RoomInfo_PlayerSlot>(Arena*);
template<> ::ProjectJ::Rotator* Arena::CreateMaybeMessage<::ProjectJ::Rotator>(Arena*);
template<> ::ProjectJ::Vector* Arena::CreateMaybeMessage<::ProjectJ::Vector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProjectJ {

// ===================================================================

class Vector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.Vector) */ {
 public:
  inline Vector() : Vector(nullptr) {}
  ~Vector() override;
  explicit PROTOBUF_CONSTEXPR Vector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector(const Vector& from);
  Vector(Vector&& from) noexcept
    : Vector() {
    *this = ::std::move(from);
  }

  inline Vector& operator=(const Vector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector& operator=(Vector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector* internal_default_instance() {
    return reinterpret_cast<const Vector*>(
               &_Vector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector& a, Vector& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Vector& from) {
    Vector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.Vector";
  }
  protected:
  explicit Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.Vector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Rotator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.Rotator) */ {
 public:
  inline Rotator() : Rotator(nullptr) {}
  ~Rotator() override;
  explicit PROTOBUF_CONSTEXPR Rotator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rotator(const Rotator& from);
  Rotator(Rotator&& from) noexcept
    : Rotator() {
    *this = ::std::move(from);
  }

  inline Rotator& operator=(const Rotator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rotator& operator=(Rotator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rotator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rotator* internal_default_instance() {
    return reinterpret_cast<const Rotator*>(
               &_Rotator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rotator& a, Rotator& b) {
    a.Swap(&b);
  }
  inline void Swap(Rotator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rotator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rotator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rotator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rotator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rotator& from) {
    Rotator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rotator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.Rotator";
  }
  protected:
  explicit Rotator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // float roll = 1;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.Rotator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float roll_;
    float pitch_;
    float yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Room final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.Room) */ {
 public:
  inline Room() : Room(nullptr) {}
  ~Room() override;
  explicit PROTOBUF_CONSTEXPR Room(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Room(const Room& from);
  Room(Room&& from) noexcept
    : Room() {
    *this = ::std::move(from);
  }

  inline Room& operator=(const Room& from) {
    CopyFrom(from);
    return *this;
  }
  inline Room& operator=(Room&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Room& default_instance() {
    return *internal_default_instance();
  }
  static inline const Room* internal_default_instance() {
    return reinterpret_cast<const Room*>(
               &_Room_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Room& a, Room& b) {
    a.Swap(&b);
  }
  inline void Swap(Room* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Room* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Room* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Room>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Room& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Room& from) {
    Room::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Room* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.Room";
  }
  protected:
  explicit Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kIdFieldNumber = 1,
    kStateFieldNumber = 3,
    kNumberOfPlayerFieldNumber = 4,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // .ProjectJ.RoomState state = 3;
  void clear_state();
  ::ProjectJ::RoomState state() const;
  void set_state(::ProjectJ::RoomState value);
  private:
  ::ProjectJ::RoomState _internal_state() const;
  void _internal_set_state(::ProjectJ::RoomState value);
  public:

  // int32 number_of_player = 4;
  void clear_number_of_player();
  int32_t number_of_player() const;
  void set_number_of_player(int32_t value);
  private:
  int32_t _internal_number_of_player() const;
  void _internal_set_number_of_player(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.Room)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    int32_t id_;
    int state_;
    int32_t number_of_player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit PROTOBUF_CONSTEXPR Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player& from) {
    Player::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class RoomInfo_PlayerSlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.RoomInfo.PlayerSlot) */ {
 public:
  inline RoomInfo_PlayerSlot() : RoomInfo_PlayerSlot(nullptr) {}
  ~RoomInfo_PlayerSlot() override;
  explicit PROTOBUF_CONSTEXPR RoomInfo_PlayerSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfo_PlayerSlot(const RoomInfo_PlayerSlot& from);
  RoomInfo_PlayerSlot(RoomInfo_PlayerSlot&& from) noexcept
    : RoomInfo_PlayerSlot() {
    *this = ::std::move(from);
  }

  inline RoomInfo_PlayerSlot& operator=(const RoomInfo_PlayerSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo_PlayerSlot& operator=(RoomInfo_PlayerSlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfo_PlayerSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfo_PlayerSlot* internal_default_instance() {
    return reinterpret_cast<const RoomInfo_PlayerSlot*>(
               &_RoomInfo_PlayerSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoomInfo_PlayerSlot& a, RoomInfo_PlayerSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfo_PlayerSlot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfo_PlayerSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomInfo_PlayerSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomInfo_PlayerSlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomInfo_PlayerSlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomInfo_PlayerSlot& from) {
    RoomInfo_PlayerSlot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo_PlayerSlot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.RoomInfo.PlayerSlot";
  }
  protected:
  explicit RoomInfo_PlayerSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kIsReadyFieldNumber = 3,
  };
  // .ProjectJ.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::ProjectJ::Player& player() const;
  PROTOBUF_NODISCARD ::ProjectJ::Player* release_player();
  ::ProjectJ::Player* mutable_player();
  void set_allocated_player(::ProjectJ::Player* player);
  private:
  const ::ProjectJ::Player& _internal_player() const;
  ::ProjectJ::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::ProjectJ::Player* player);
  ::ProjectJ::Player* unsafe_arena_release_player();

  // bool is_ready = 3;
  void clear_is_ready();
  bool is_ready() const;
  void set_is_ready(bool value);
  private:
  bool _internal_is_ready() const;
  void _internal_set_is_ready(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.RoomInfo.PlayerSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Player* player_;
    bool is_ready_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class RoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.RoomInfo) */ {
 public:
  inline RoomInfo() : RoomInfo(nullptr) {}
  ~RoomInfo() override;
  explicit PROTOBUF_CONSTEXPR RoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfo(const RoomInfo& from);
  RoomInfo(RoomInfo&& from) noexcept
    : RoomInfo() {
    *this = ::std::move(from);
  }

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo& operator=(RoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfo* internal_default_instance() {
    return reinterpret_cast<const RoomInfo*>(
               &_RoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoomInfo& a, RoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomInfo& from) {
    RoomInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.RoomInfo";
  }
  protected:
  explicit RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef RoomInfo_PlayerSlot PlayerSlot;

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kChaserFieldNumber = 3,
    kFugitiveFirstFieldNumber = 4,
    kFugitiveSecondFieldNumber = 5,
    kFugitiveThirdFieldNumber = 6,
    kRoomIdFieldNumber = 1,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .ProjectJ.RoomInfo.PlayerSlot chaser = 3;
  bool has_chaser() const;
  private:
  bool _internal_has_chaser() const;
  public:
  void clear_chaser();
  const ::ProjectJ::RoomInfo_PlayerSlot& chaser() const;
  PROTOBUF_NODISCARD ::ProjectJ::RoomInfo_PlayerSlot* release_chaser();
  ::ProjectJ::RoomInfo_PlayerSlot* mutable_chaser();
  void set_allocated_chaser(::ProjectJ::RoomInfo_PlayerSlot* chaser);
  private:
  const ::ProjectJ::RoomInfo_PlayerSlot& _internal_chaser() const;
  ::ProjectJ::RoomInfo_PlayerSlot* _internal_mutable_chaser();
  public:
  void unsafe_arena_set_allocated_chaser(
      ::ProjectJ::RoomInfo_PlayerSlot* chaser);
  ::ProjectJ::RoomInfo_PlayerSlot* unsafe_arena_release_chaser();

  // .ProjectJ.RoomInfo.PlayerSlot fugitive_first = 4;
  bool has_fugitive_first() const;
  private:
  bool _internal_has_fugitive_first() const;
  public:
  void clear_fugitive_first();
  const ::ProjectJ::RoomInfo_PlayerSlot& fugitive_first() const;
  PROTOBUF_NODISCARD ::ProjectJ::RoomInfo_PlayerSlot* release_fugitive_first();
  ::ProjectJ::RoomInfo_PlayerSlot* mutable_fugitive_first();
  void set_allocated_fugitive_first(::ProjectJ::RoomInfo_PlayerSlot* fugitive_first);
  private:
  const ::ProjectJ::RoomInfo_PlayerSlot& _internal_fugitive_first() const;
  ::ProjectJ::RoomInfo_PlayerSlot* _internal_mutable_fugitive_first();
  public:
  void unsafe_arena_set_allocated_fugitive_first(
      ::ProjectJ::RoomInfo_PlayerSlot* fugitive_first);
  ::ProjectJ::RoomInfo_PlayerSlot* unsafe_arena_release_fugitive_first();

  // .ProjectJ.RoomInfo.PlayerSlot fugitive_second = 5;
  bool has_fugitive_second() const;
  private:
  bool _internal_has_fugitive_second() const;
  public:
  void clear_fugitive_second();
  const ::ProjectJ::RoomInfo_PlayerSlot& fugitive_second() const;
  PROTOBUF_NODISCARD ::ProjectJ::RoomInfo_PlayerSlot* release_fugitive_second();
  ::ProjectJ::RoomInfo_PlayerSlot* mutable_fugitive_second();
  void set_allocated_fugitive_second(::ProjectJ::RoomInfo_PlayerSlot* fugitive_second);
  private:
  const ::ProjectJ::RoomInfo_PlayerSlot& _internal_fugitive_second() const;
  ::ProjectJ::RoomInfo_PlayerSlot* _internal_mutable_fugitive_second();
  public:
  void unsafe_arena_set_allocated_fugitive_second(
      ::ProjectJ::RoomInfo_PlayerSlot* fugitive_second);
  ::ProjectJ::RoomInfo_PlayerSlot* unsafe_arena_release_fugitive_second();

  // .ProjectJ.RoomInfo.PlayerSlot fugitive_third = 6;
  bool has_fugitive_third() const;
  private:
  bool _internal_has_fugitive_third() const;
  public:
  void clear_fugitive_third();
  const ::ProjectJ::RoomInfo_PlayerSlot& fugitive_third() const;
  PROTOBUF_NODISCARD ::ProjectJ::RoomInfo_PlayerSlot* release_fugitive_third();
  ::ProjectJ::RoomInfo_PlayerSlot* mutable_fugitive_third();
  void set_allocated_fugitive_third(::ProjectJ::RoomInfo_PlayerSlot* fugitive_third);
  private:
  const ::ProjectJ::RoomInfo_PlayerSlot& _internal_fugitive_third() const;
  ::ProjectJ::RoomInfo_PlayerSlot* _internal_mutable_fugitive_third();
  public:
  void unsafe_arena_set_allocated_fugitive_third(
      ::ProjectJ::RoomInfo_PlayerSlot* fugitive_third);
  ::ProjectJ::RoomInfo_PlayerSlot* unsafe_arena_release_fugitive_third();

  // int32 room_id = 1;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.RoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    ::ProjectJ::RoomInfo_PlayerSlot* chaser_;
    ::ProjectJ::RoomInfo_PlayerSlot* fugitive_first_;
    ::ProjectJ::RoomInfo_PlayerSlot* fugitive_second_;
    ::ProjectJ::RoomInfo_PlayerSlot* fugitive_third_;
    int32_t room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit PROTOBUF_CONSTEXPR Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Item& from) {
    Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldPositionFieldNumber = 7,
    kWorldRotationFieldNumber = 8,
    kIdFieldNumber = 1,
    kIndexFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kWeightFieldNumber = 5,
    kIsOwnedFieldNumber = 6,
    kIsRotatedFieldNumber = 10,
    kOnwerPlayerIndexFieldNumber = 9,
  };
  // .ProjectJ.Vector world_position = 7;
  bool has_world_position() const;
  private:
  bool _internal_has_world_position() const;
  public:
  void clear_world_position();
  const ::ProjectJ::Vector& world_position() const;
  PROTOBUF_NODISCARD ::ProjectJ::Vector* release_world_position();
  ::ProjectJ::Vector* mutable_world_position();
  void set_allocated_world_position(::ProjectJ::Vector* world_position);
  private:
  const ::ProjectJ::Vector& _internal_world_position() const;
  ::ProjectJ::Vector* _internal_mutable_world_position();
  public:
  void unsafe_arena_set_allocated_world_position(
      ::ProjectJ::Vector* world_position);
  ::ProjectJ::Vector* unsafe_arena_release_world_position();

  // .ProjectJ.Rotator world_rotation = 8;
  bool has_world_rotation() const;
  private:
  bool _internal_has_world_rotation() const;
  public:
  void clear_world_rotation();
  const ::ProjectJ::Rotator& world_rotation() const;
  PROTOBUF_NODISCARD ::ProjectJ::Rotator* release_world_rotation();
  ::ProjectJ::Rotator* mutable_world_rotation();
  void set_allocated_world_rotation(::ProjectJ::Rotator* world_rotation);
  private:
  const ::ProjectJ::Rotator& _internal_world_rotation() const;
  ::ProjectJ::Rotator* _internal_mutable_world_rotation();
  public:
  void unsafe_arena_set_allocated_world_rotation(
      ::ProjectJ::Rotator* world_rotation);
  ::ProjectJ::Rotator* unsafe_arena_release_world_rotation();

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 index = 2;
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 width = 3;
  void clear_width();
  int32_t width() const;
  void set_width(int32_t value);
  private:
  int32_t _internal_width() const;
  void _internal_set_width(int32_t value);
  public:

  // int32 height = 4;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 weight = 5;
  void clear_weight();
  int32_t weight() const;
  void set_weight(int32_t value);
  private:
  int32_t _internal_weight() const;
  void _internal_set_weight(int32_t value);
  public:

  // bool is_owned = 6;
  void clear_is_owned();
  bool is_owned() const;
  void set_is_owned(bool value);
  private:
  bool _internal_is_owned() const;
  void _internal_set_is_owned(bool value);
  public:

  // bool is_rotated = 10;
  void clear_is_rotated();
  bool is_rotated() const;
  void set_is_rotated(bool value);
  private:
  bool _internal_is_rotated() const;
  void _internal_set_is_rotated(bool value);
  public:

  // int32 onwer_player_index = 9;
  void clear_onwer_player_index();
  int32_t onwer_player_index() const;
  void set_onwer_player_index(int32_t value);
  private:
  int32_t _internal_onwer_player_index() const;
  void _internal_set_onwer_player_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Vector* world_position_;
    ::ProjectJ::Rotator* world_rotation_;
    int32_t id_;
    int32_t index_;
    int32_t width_;
    int32_t height_;
    int32_t weight_;
    bool is_owned_;
    bool is_rotated_;
    int32_t onwer_player_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInfo& from) {
    PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 3,
    kPositionFieldNumber = 4,
    kRotationFieldNumber = 5,
    kStateFieldNumber = 1,
    kPlayerIndexFieldNumber = 2,
  };
  // .ProjectJ.Player player = 3;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::ProjectJ::Player& player() const;
  PROTOBUF_NODISCARD ::ProjectJ::Player* release_player();
  ::ProjectJ::Player* mutable_player();
  void set_allocated_player(::ProjectJ::Player* player);
  private:
  const ::ProjectJ::Player& _internal_player() const;
  ::ProjectJ::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::ProjectJ::Player* player);
  ::ProjectJ::Player* unsafe_arena_release_player();

  // .ProjectJ.Vector position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ProjectJ::Vector& position() const;
  PROTOBUF_NODISCARD ::ProjectJ::Vector* release_position();
  ::ProjectJ::Vector* mutable_position();
  void set_allocated_position(::ProjectJ::Vector* position);
  private:
  const ::ProjectJ::Vector& _internal_position() const;
  ::ProjectJ::Vector* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ProjectJ::Vector* position);
  ::ProjectJ::Vector* unsafe_arena_release_position();

  // .ProjectJ.Rotator rotation = 5;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::ProjectJ::Rotator& rotation() const;
  PROTOBUF_NODISCARD ::ProjectJ::Rotator* release_rotation();
  ::ProjectJ::Rotator* mutable_rotation();
  void set_allocated_rotation(::ProjectJ::Rotator* rotation);
  private:
  const ::ProjectJ::Rotator& _internal_rotation() const;
  ::ProjectJ::Rotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::ProjectJ::Rotator* rotation);
  ::ProjectJ::Rotator* unsafe_arena_release_rotation();

  // .ProjectJ.MatchPlayerState state = 1;
  void clear_state();
  ::ProjectJ::MatchPlayerState state() const;
  void set_state(::ProjectJ::MatchPlayerState value);
  private:
  ::ProjectJ::MatchPlayerState _internal_state() const;
  void _internal_set_state(::ProjectJ::MatchPlayerState value);
  public:

  // int32 player_index = 2;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Player* player_;
    ::ProjectJ::Vector* position_;
    ::ProjectJ::Rotator* rotation_;
    int state_;
    int32_t player_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MatchInitInfo_ScaleInitInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.MatchInitInfo.ScaleInitInfo) */ {
 public:
  inline MatchInitInfo_ScaleInitInfo() : MatchInitInfo_ScaleInitInfo(nullptr) {}
  ~MatchInitInfo_ScaleInitInfo() override;
  explicit PROTOBUF_CONSTEXPR MatchInitInfo_ScaleInitInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchInitInfo_ScaleInitInfo(const MatchInitInfo_ScaleInitInfo& from);
  MatchInitInfo_ScaleInitInfo(MatchInitInfo_ScaleInitInfo&& from) noexcept
    : MatchInitInfo_ScaleInitInfo() {
    *this = ::std::move(from);
  }

  inline MatchInitInfo_ScaleInitInfo& operator=(const MatchInitInfo_ScaleInitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchInitInfo_ScaleInitInfo& operator=(MatchInitInfo_ScaleInitInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchInitInfo_ScaleInitInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchInitInfo_ScaleInitInfo* internal_default_instance() {
    return reinterpret_cast<const MatchInitInfo_ScaleInitInfo*>(
               &_MatchInitInfo_ScaleInitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MatchInitInfo_ScaleInitInfo& a, MatchInitInfo_ScaleInitInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchInitInfo_ScaleInitInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchInitInfo_ScaleInitInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchInitInfo_ScaleInitInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchInitInfo_ScaleInitInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchInitInfo_ScaleInitInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchInitInfo_ScaleInitInfo& from) {
    MatchInitInfo_ScaleInitInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchInitInfo_ScaleInitInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.MatchInitInfo.ScaleInitInfo";
  }
  protected:
  explicit MatchInitInfo_ScaleInitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperatingWeightFieldNumber = 1,
    kToleranceFieldNumber = 2,
  };
  // int32 operating_weight = 1;
  void clear_operating_weight();
  int32_t operating_weight() const;
  void set_operating_weight(int32_t value);
  private:
  int32_t _internal_operating_weight() const;
  void _internal_set_operating_weight(int32_t value);
  public:

  // int32 tolerance = 2;
  void clear_tolerance();
  int32_t tolerance() const;
  void set_tolerance(int32_t value);
  private:
  int32_t _internal_tolerance() const;
  void _internal_set_tolerance(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.MatchInitInfo.ScaleInitInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t operating_weight_;
    int32_t tolerance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MatchInitInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.MatchInitInfo) */ {
 public:
  inline MatchInitInfo() : MatchInitInfo(nullptr) {}
  ~MatchInitInfo() override;
  explicit PROTOBUF_CONSTEXPR MatchInitInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchInitInfo(const MatchInitInfo& from);
  MatchInitInfo(MatchInitInfo&& from) noexcept
    : MatchInitInfo() {
    *this = ::std::move(from);
  }

  inline MatchInitInfo& operator=(const MatchInitInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchInitInfo& operator=(MatchInitInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchInitInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchInitInfo* internal_default_instance() {
    return reinterpret_cast<const MatchInitInfo*>(
               &_MatchInitInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MatchInitInfo& a, MatchInitInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchInitInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchInitInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchInitInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchInitInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchInitInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchInitInfo& from) {
    MatchInitInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchInitInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.MatchInitInfo";
  }
  protected:
  explicit MatchInitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MatchInitInfo_ScaleInitInfo ScaleInitInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kChaserFieldNumber = 1,
    kFugitiveFirstFieldNumber = 2,
    kFugitiveSecondFieldNumber = 3,
    kFugitiveThirdFieldNumber = 4,
    kScaleFirstFieldNumber = 5,
    kScaleSecondFieldNumber = 6,
    kScaleThirdFieldNumber = 7,
    kScaleFourthFieldNumber = 8,
  };
  // .ProjectJ.PlayerInfo chaser = 1;
  bool has_chaser() const;
  private:
  bool _internal_has_chaser() const;
  public:
  void clear_chaser();
  const ::ProjectJ::PlayerInfo& chaser() const;
  PROTOBUF_NODISCARD ::ProjectJ::PlayerInfo* release_chaser();
  ::ProjectJ::PlayerInfo* mutable_chaser();
  void set_allocated_chaser(::ProjectJ::PlayerInfo* chaser);
  private:
  const ::ProjectJ::PlayerInfo& _internal_chaser() const;
  ::ProjectJ::PlayerInfo* _internal_mutable_chaser();
  public:
  void unsafe_arena_set_allocated_chaser(
      ::ProjectJ::PlayerInfo* chaser);
  ::ProjectJ::PlayerInfo* unsafe_arena_release_chaser();

  // .ProjectJ.PlayerInfo fugitive_first = 2;
  bool has_fugitive_first() const;
  private:
  bool _internal_has_fugitive_first() const;
  public:
  void clear_fugitive_first();
  const ::ProjectJ::PlayerInfo& fugitive_first() const;
  PROTOBUF_NODISCARD ::ProjectJ::PlayerInfo* release_fugitive_first();
  ::ProjectJ::PlayerInfo* mutable_fugitive_first();
  void set_allocated_fugitive_first(::ProjectJ::PlayerInfo* fugitive_first);
  private:
  const ::ProjectJ::PlayerInfo& _internal_fugitive_first() const;
  ::ProjectJ::PlayerInfo* _internal_mutable_fugitive_first();
  public:
  void unsafe_arena_set_allocated_fugitive_first(
      ::ProjectJ::PlayerInfo* fugitive_first);
  ::ProjectJ::PlayerInfo* unsafe_arena_release_fugitive_first();

  // .ProjectJ.PlayerInfo fugitive_second = 3;
  bool has_fugitive_second() const;
  private:
  bool _internal_has_fugitive_second() const;
  public:
  void clear_fugitive_second();
  const ::ProjectJ::PlayerInfo& fugitive_second() const;
  PROTOBUF_NODISCARD ::ProjectJ::PlayerInfo* release_fugitive_second();
  ::ProjectJ::PlayerInfo* mutable_fugitive_second();
  void set_allocated_fugitive_second(::ProjectJ::PlayerInfo* fugitive_second);
  private:
  const ::ProjectJ::PlayerInfo& _internal_fugitive_second() const;
  ::ProjectJ::PlayerInfo* _internal_mutable_fugitive_second();
  public:
  void unsafe_arena_set_allocated_fugitive_second(
      ::ProjectJ::PlayerInfo* fugitive_second);
  ::ProjectJ::PlayerInfo* unsafe_arena_release_fugitive_second();

  // .ProjectJ.PlayerInfo fugitive_third = 4;
  bool has_fugitive_third() const;
  private:
  bool _internal_has_fugitive_third() const;
  public:
  void clear_fugitive_third();
  const ::ProjectJ::PlayerInfo& fugitive_third() const;
  PROTOBUF_NODISCARD ::ProjectJ::PlayerInfo* release_fugitive_third();
  ::ProjectJ::PlayerInfo* mutable_fugitive_third();
  void set_allocated_fugitive_third(::ProjectJ::PlayerInfo* fugitive_third);
  private:
  const ::ProjectJ::PlayerInfo& _internal_fugitive_third() const;
  ::ProjectJ::PlayerInfo* _internal_mutable_fugitive_third();
  public:
  void unsafe_arena_set_allocated_fugitive_third(
      ::ProjectJ::PlayerInfo* fugitive_third);
  ::ProjectJ::PlayerInfo* unsafe_arena_release_fugitive_third();

  // .ProjectJ.MatchInitInfo.ScaleInitInfo scale_first = 5;
  bool has_scale_first() const;
  private:
  bool _internal_has_scale_first() const;
  public:
  void clear_scale_first();
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo& scale_first() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInitInfo_ScaleInitInfo* release_scale_first();
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* mutable_scale_first();
  void set_allocated_scale_first(::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_first);
  private:
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo& _internal_scale_first() const;
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* _internal_mutable_scale_first();
  public:
  void unsafe_arena_set_allocated_scale_first(
      ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_first);
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* unsafe_arena_release_scale_first();

  // .ProjectJ.MatchInitInfo.ScaleInitInfo scale_second = 6;
  bool has_scale_second() const;
  private:
  bool _internal_has_scale_second() const;
  public:
  void clear_scale_second();
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo& scale_second() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInitInfo_ScaleInitInfo* release_scale_second();
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* mutable_scale_second();
  void set_allocated_scale_second(::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_second);
  private:
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo& _internal_scale_second() const;
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* _internal_mutable_scale_second();
  public:
  void unsafe_arena_set_allocated_scale_second(
      ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_second);
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* unsafe_arena_release_scale_second();

  // .ProjectJ.MatchInitInfo.ScaleInitInfo scale_third = 7;
  bool has_scale_third() const;
  private:
  bool _internal_has_scale_third() const;
  public:
  void clear_scale_third();
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo& scale_third() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInitInfo_ScaleInitInfo* release_scale_third();
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* mutable_scale_third();
  void set_allocated_scale_third(::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_third);
  private:
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo& _internal_scale_third() const;
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* _internal_mutable_scale_third();
  public:
  void unsafe_arena_set_allocated_scale_third(
      ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_third);
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* unsafe_arena_release_scale_third();

  // .ProjectJ.MatchInitInfo.ScaleInitInfo scale_fourth = 8;
  bool has_scale_fourth() const;
  private:
  bool _internal_has_scale_fourth() const;
  public:
  void clear_scale_fourth();
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo& scale_fourth() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInitInfo_ScaleInitInfo* release_scale_fourth();
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* mutable_scale_fourth();
  void set_allocated_scale_fourth(::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_fourth);
  private:
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo& _internal_scale_fourth() const;
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* _internal_mutable_scale_fourth();
  public:
  void unsafe_arena_set_allocated_scale_fourth(
      ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_fourth);
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* unsafe_arena_release_scale_fourth();

  // @@protoc_insertion_point(class_scope:ProjectJ.MatchInitInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::PlayerInfo* chaser_;
    ::ProjectJ::PlayerInfo* fugitive_first_;
    ::ProjectJ::PlayerInfo* fugitive_second_;
    ::ProjectJ::PlayerInfo* fugitive_third_;
    ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_first_;
    ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_second_;
    ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_third_;
    ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_fourth_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MatchInfo_PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.MatchInfo.PlayerInfo) */ {
 public:
  inline MatchInfo_PlayerInfo() : MatchInfo_PlayerInfo(nullptr) {}
  ~MatchInfo_PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR MatchInfo_PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchInfo_PlayerInfo(const MatchInfo_PlayerInfo& from);
  MatchInfo_PlayerInfo(MatchInfo_PlayerInfo&& from) noexcept
    : MatchInfo_PlayerInfo() {
    *this = ::std::move(from);
  }

  inline MatchInfo_PlayerInfo& operator=(const MatchInfo_PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchInfo_PlayerInfo& operator=(MatchInfo_PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchInfo_PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchInfo_PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const MatchInfo_PlayerInfo*>(
               &_MatchInfo_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MatchInfo_PlayerInfo& a, MatchInfo_PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchInfo_PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchInfo_PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchInfo_PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchInfo_PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchInfo_PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchInfo_PlayerInfo& from) {
    MatchInfo_PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchInfo_PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.MatchInfo.PlayerInfo";
  }
  protected:
  explicit MatchInfo_PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 3,
    kPositionFieldNumber = 4,
    kRotationFieldNumber = 5,
    kStateFieldNumber = 1,
    kPlayerIndexFieldNumber = 2,
  };
  // .ProjectJ.Player player = 3;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::ProjectJ::Player& player() const;
  PROTOBUF_NODISCARD ::ProjectJ::Player* release_player();
  ::ProjectJ::Player* mutable_player();
  void set_allocated_player(::ProjectJ::Player* player);
  private:
  const ::ProjectJ::Player& _internal_player() const;
  ::ProjectJ::Player* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::ProjectJ::Player* player);
  ::ProjectJ::Player* unsafe_arena_release_player();

  // .ProjectJ.Vector position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ProjectJ::Vector& position() const;
  PROTOBUF_NODISCARD ::ProjectJ::Vector* release_position();
  ::ProjectJ::Vector* mutable_position();
  void set_allocated_position(::ProjectJ::Vector* position);
  private:
  const ::ProjectJ::Vector& _internal_position() const;
  ::ProjectJ::Vector* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ProjectJ::Vector* position);
  ::ProjectJ::Vector* unsafe_arena_release_position();

  // .ProjectJ.Rotator rotation = 5;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::ProjectJ::Rotator& rotation() const;
  PROTOBUF_NODISCARD ::ProjectJ::Rotator* release_rotation();
  ::ProjectJ::Rotator* mutable_rotation();
  void set_allocated_rotation(::ProjectJ::Rotator* rotation);
  private:
  const ::ProjectJ::Rotator& _internal_rotation() const;
  ::ProjectJ::Rotator* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::ProjectJ::Rotator* rotation);
  ::ProjectJ::Rotator* unsafe_arena_release_rotation();

  // .ProjectJ.MatchPlayerState state = 1;
  void clear_state();
  ::ProjectJ::MatchPlayerState state() const;
  void set_state(::ProjectJ::MatchPlayerState value);
  private:
  ::ProjectJ::MatchPlayerState _internal_state() const;
  void _internal_set_state(::ProjectJ::MatchPlayerState value);
  public:

  // int32 player_index = 2;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.MatchInfo.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Player* player_;
    ::ProjectJ::Vector* position_;
    ::ProjectJ::Rotator* rotation_;
    int state_;
    int32_t player_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MatchInfo_ScaleInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.MatchInfo.ScaleInfo) */ {
 public:
  inline MatchInfo_ScaleInfo() : MatchInfo_ScaleInfo(nullptr) {}
  ~MatchInfo_ScaleInfo() override;
  explicit PROTOBUF_CONSTEXPR MatchInfo_ScaleInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchInfo_ScaleInfo(const MatchInfo_ScaleInfo& from);
  MatchInfo_ScaleInfo(MatchInfo_ScaleInfo&& from) noexcept
    : MatchInfo_ScaleInfo() {
    *this = ::std::move(from);
  }

  inline MatchInfo_ScaleInfo& operator=(const MatchInfo_ScaleInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchInfo_ScaleInfo& operator=(MatchInfo_ScaleInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchInfo_ScaleInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchInfo_ScaleInfo* internal_default_instance() {
    return reinterpret_cast<const MatchInfo_ScaleInfo*>(
               &_MatchInfo_ScaleInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MatchInfo_ScaleInfo& a, MatchInfo_ScaleInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchInfo_ScaleInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchInfo_ScaleInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchInfo_ScaleInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchInfo_ScaleInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchInfo_ScaleInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchInfo_ScaleInfo& from) {
    MatchInfo_ScaleInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchInfo_ScaleInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.MatchInfo.ScaleInfo";
  }
  protected:
  explicit MatchInfo_ScaleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsOperatingFieldNumber = 1,
    kCurrentWeightFieldNumber = 2,
  };
  // bool is_operating = 1;
  void clear_is_operating();
  bool is_operating() const;
  void set_is_operating(bool value);
  private:
  bool _internal_is_operating() const;
  void _internal_set_is_operating(bool value);
  public:

  // int32 current_weight = 2;
  void clear_current_weight();
  int32_t current_weight() const;
  void set_current_weight(int32_t value);
  private:
  int32_t _internal_current_weight() const;
  void _internal_set_current_weight(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.MatchInfo.ScaleInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool is_operating_;
    int32_t current_weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class MatchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.MatchInfo) */ {
 public:
  inline MatchInfo() : MatchInfo(nullptr) {}
  ~MatchInfo() override;
  explicit PROTOBUF_CONSTEXPR MatchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchInfo(const MatchInfo& from);
  MatchInfo(MatchInfo&& from) noexcept
    : MatchInfo() {
    *this = ::std::move(from);
  }

  inline MatchInfo& operator=(const MatchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchInfo& operator=(MatchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchInfo* internal_default_instance() {
    return reinterpret_cast<const MatchInfo*>(
               &_MatchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MatchInfo& a, MatchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MatchInfo& from) {
    MatchInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.MatchInfo";
  }
  protected:
  explicit MatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MatchInfo_PlayerInfo PlayerInfo;
  typedef MatchInfo_ScaleInfo ScaleInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 9,
    kChaserFieldNumber = 1,
    kFugitiveFirstFieldNumber = 2,
    kFugitiveSecondFieldNumber = 3,
    kFugitiveThirdFieldNumber = 4,
    kScaleFirstFieldNumber = 5,
    kScaleSecondFieldNumber = 6,
    kScaleThirdFieldNumber = 7,
    kScaleFourthFieldNumber = 8,
  };
  // repeated .ProjectJ.Item items = 9;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::ProjectJ::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >*
      mutable_items();
  private:
  const ::ProjectJ::Item& _internal_items(int index) const;
  ::ProjectJ::Item* _internal_add_items();
  public:
  const ::ProjectJ::Item& items(int index) const;
  ::ProjectJ::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >&
      items() const;

  // .ProjectJ.MatchInfo.PlayerInfo chaser = 1;
  bool has_chaser() const;
  private:
  bool _internal_has_chaser() const;
  public:
  void clear_chaser();
  const ::ProjectJ::MatchInfo_PlayerInfo& chaser() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInfo_PlayerInfo* release_chaser();
  ::ProjectJ::MatchInfo_PlayerInfo* mutable_chaser();
  void set_allocated_chaser(::ProjectJ::MatchInfo_PlayerInfo* chaser);
  private:
  const ::ProjectJ::MatchInfo_PlayerInfo& _internal_chaser() const;
  ::ProjectJ::MatchInfo_PlayerInfo* _internal_mutable_chaser();
  public:
  void unsafe_arena_set_allocated_chaser(
      ::ProjectJ::MatchInfo_PlayerInfo* chaser);
  ::ProjectJ::MatchInfo_PlayerInfo* unsafe_arena_release_chaser();

  // .ProjectJ.MatchInfo.PlayerInfo fugitive_first = 2;
  bool has_fugitive_first() const;
  private:
  bool _internal_has_fugitive_first() const;
  public:
  void clear_fugitive_first();
  const ::ProjectJ::MatchInfo_PlayerInfo& fugitive_first() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInfo_PlayerInfo* release_fugitive_first();
  ::ProjectJ::MatchInfo_PlayerInfo* mutable_fugitive_first();
  void set_allocated_fugitive_first(::ProjectJ::MatchInfo_PlayerInfo* fugitive_first);
  private:
  const ::ProjectJ::MatchInfo_PlayerInfo& _internal_fugitive_first() const;
  ::ProjectJ::MatchInfo_PlayerInfo* _internal_mutable_fugitive_first();
  public:
  void unsafe_arena_set_allocated_fugitive_first(
      ::ProjectJ::MatchInfo_PlayerInfo* fugitive_first);
  ::ProjectJ::MatchInfo_PlayerInfo* unsafe_arena_release_fugitive_first();

  // .ProjectJ.MatchInfo.PlayerInfo fugitive_second = 3;
  bool has_fugitive_second() const;
  private:
  bool _internal_has_fugitive_second() const;
  public:
  void clear_fugitive_second();
  const ::ProjectJ::MatchInfo_PlayerInfo& fugitive_second() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInfo_PlayerInfo* release_fugitive_second();
  ::ProjectJ::MatchInfo_PlayerInfo* mutable_fugitive_second();
  void set_allocated_fugitive_second(::ProjectJ::MatchInfo_PlayerInfo* fugitive_second);
  private:
  const ::ProjectJ::MatchInfo_PlayerInfo& _internal_fugitive_second() const;
  ::ProjectJ::MatchInfo_PlayerInfo* _internal_mutable_fugitive_second();
  public:
  void unsafe_arena_set_allocated_fugitive_second(
      ::ProjectJ::MatchInfo_PlayerInfo* fugitive_second);
  ::ProjectJ::MatchInfo_PlayerInfo* unsafe_arena_release_fugitive_second();

  // .ProjectJ.MatchInfo.PlayerInfo fugitive_third = 4;
  bool has_fugitive_third() const;
  private:
  bool _internal_has_fugitive_third() const;
  public:
  void clear_fugitive_third();
  const ::ProjectJ::MatchInfo_PlayerInfo& fugitive_third() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInfo_PlayerInfo* release_fugitive_third();
  ::ProjectJ::MatchInfo_PlayerInfo* mutable_fugitive_third();
  void set_allocated_fugitive_third(::ProjectJ::MatchInfo_PlayerInfo* fugitive_third);
  private:
  const ::ProjectJ::MatchInfo_PlayerInfo& _internal_fugitive_third() const;
  ::ProjectJ::MatchInfo_PlayerInfo* _internal_mutable_fugitive_third();
  public:
  void unsafe_arena_set_allocated_fugitive_third(
      ::ProjectJ::MatchInfo_PlayerInfo* fugitive_third);
  ::ProjectJ::MatchInfo_PlayerInfo* unsafe_arena_release_fugitive_third();

  // .ProjectJ.MatchInfo.ScaleInfo scale_first = 5;
  bool has_scale_first() const;
  private:
  bool _internal_has_scale_first() const;
  public:
  void clear_scale_first();
  const ::ProjectJ::MatchInfo_ScaleInfo& scale_first() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInfo_ScaleInfo* release_scale_first();
  ::ProjectJ::MatchInfo_ScaleInfo* mutable_scale_first();
  void set_allocated_scale_first(::ProjectJ::MatchInfo_ScaleInfo* scale_first);
  private:
  const ::ProjectJ::MatchInfo_ScaleInfo& _internal_scale_first() const;
  ::ProjectJ::MatchInfo_ScaleInfo* _internal_mutable_scale_first();
  public:
  void unsafe_arena_set_allocated_scale_first(
      ::ProjectJ::MatchInfo_ScaleInfo* scale_first);
  ::ProjectJ::MatchInfo_ScaleInfo* unsafe_arena_release_scale_first();

  // .ProjectJ.MatchInfo.ScaleInfo scale_second = 6;
  bool has_scale_second() const;
  private:
  bool _internal_has_scale_second() const;
  public:
  void clear_scale_second();
  const ::ProjectJ::MatchInfo_ScaleInfo& scale_second() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInfo_ScaleInfo* release_scale_second();
  ::ProjectJ::MatchInfo_ScaleInfo* mutable_scale_second();
  void set_allocated_scale_second(::ProjectJ::MatchInfo_ScaleInfo* scale_second);
  private:
  const ::ProjectJ::MatchInfo_ScaleInfo& _internal_scale_second() const;
  ::ProjectJ::MatchInfo_ScaleInfo* _internal_mutable_scale_second();
  public:
  void unsafe_arena_set_allocated_scale_second(
      ::ProjectJ::MatchInfo_ScaleInfo* scale_second);
  ::ProjectJ::MatchInfo_ScaleInfo* unsafe_arena_release_scale_second();

  // .ProjectJ.MatchInfo.ScaleInfo scale_third = 7;
  bool has_scale_third() const;
  private:
  bool _internal_has_scale_third() const;
  public:
  void clear_scale_third();
  const ::ProjectJ::MatchInfo_ScaleInfo& scale_third() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInfo_ScaleInfo* release_scale_third();
  ::ProjectJ::MatchInfo_ScaleInfo* mutable_scale_third();
  void set_allocated_scale_third(::ProjectJ::MatchInfo_ScaleInfo* scale_third);
  private:
  const ::ProjectJ::MatchInfo_ScaleInfo& _internal_scale_third() const;
  ::ProjectJ::MatchInfo_ScaleInfo* _internal_mutable_scale_third();
  public:
  void unsafe_arena_set_allocated_scale_third(
      ::ProjectJ::MatchInfo_ScaleInfo* scale_third);
  ::ProjectJ::MatchInfo_ScaleInfo* unsafe_arena_release_scale_third();

  // .ProjectJ.MatchInfo.ScaleInfo scale_fourth = 8;
  bool has_scale_fourth() const;
  private:
  bool _internal_has_scale_fourth() const;
  public:
  void clear_scale_fourth();
  const ::ProjectJ::MatchInfo_ScaleInfo& scale_fourth() const;
  PROTOBUF_NODISCARD ::ProjectJ::MatchInfo_ScaleInfo* release_scale_fourth();
  ::ProjectJ::MatchInfo_ScaleInfo* mutable_scale_fourth();
  void set_allocated_scale_fourth(::ProjectJ::MatchInfo_ScaleInfo* scale_fourth);
  private:
  const ::ProjectJ::MatchInfo_ScaleInfo& _internal_scale_fourth() const;
  ::ProjectJ::MatchInfo_ScaleInfo* _internal_mutable_scale_fourth();
  public:
  void unsafe_arena_set_allocated_scale_fourth(
      ::ProjectJ::MatchInfo_ScaleInfo* scale_fourth);
  ::ProjectJ::MatchInfo_ScaleInfo* unsafe_arena_release_scale_fourth();

  // @@protoc_insertion_point(class_scope:ProjectJ.MatchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item > items_;
    ::ProjectJ::MatchInfo_PlayerInfo* chaser_;
    ::ProjectJ::MatchInfo_PlayerInfo* fugitive_first_;
    ::ProjectJ::MatchInfo_PlayerInfo* fugitive_second_;
    ::ProjectJ::MatchInfo_PlayerInfo* fugitive_third_;
    ::ProjectJ::MatchInfo_ScaleInfo* scale_first_;
    ::ProjectJ::MatchInfo_ScaleInfo* scale_second_;
    ::ProjectJ::MatchInfo_ScaleInfo* scale_third_;
    ::ProjectJ::MatchInfo_ScaleInfo* scale_fourth_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector

// float x = 1;
inline void Vector::clear_x() {
  _impl_.x_ = 0;
}
inline float Vector::_internal_x() const {
  return _impl_.x_;
}
inline float Vector::x() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Vector.x)
  return _internal_x();
}
inline void Vector::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void Vector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Vector.x)
}

// float y = 2;
inline void Vector::clear_y() {
  _impl_.y_ = 0;
}
inline float Vector::_internal_y() const {
  return _impl_.y_;
}
inline float Vector::y() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Vector.y)
  return _internal_y();
}
inline void Vector::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void Vector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Vector.y)
}

// float z = 3;
inline void Vector::clear_z() {
  _impl_.z_ = 0;
}
inline float Vector::_internal_z() const {
  return _impl_.z_;
}
inline float Vector::z() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Vector.z)
  return _internal_z();
}
inline void Vector::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void Vector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Vector.z)
}

// -------------------------------------------------------------------

// Rotator

// float roll = 1;
inline void Rotator::clear_roll() {
  _impl_.roll_ = 0;
}
inline float Rotator::_internal_roll() const {
  return _impl_.roll_;
}
inline float Rotator::roll() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Rotator.roll)
  return _internal_roll();
}
inline void Rotator::_internal_set_roll(float value) {
  
  _impl_.roll_ = value;
}
inline void Rotator::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Rotator.roll)
}

// float pitch = 2;
inline void Rotator::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float Rotator::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float Rotator::pitch() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Rotator.pitch)
  return _internal_pitch();
}
inline void Rotator::_internal_set_pitch(float value) {
  
  _impl_.pitch_ = value;
}
inline void Rotator::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Rotator.pitch)
}

// float yaw = 3;
inline void Rotator::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float Rotator::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float Rotator::yaw() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Rotator.yaw)
  return _internal_yaw();
}
inline void Rotator::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void Rotator::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Rotator.yaw)
}

// -------------------------------------------------------------------

// Room

// int32 id = 1;
inline void Room::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Room::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Room::id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Room.id)
  return _internal_id();
}
inline void Room::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Room::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Room.id)
}

// string title = 2;
inline void Room::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& Room::title() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Room.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Room::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.Room.title)
}
inline std::string* Room::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ProjectJ.Room.title)
  return _s;
}
inline const std::string& Room::_internal_title() const {
  return _impl_.title_.Get();
}
inline void Room::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* Room::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* Room::release_title() {
  // @@protoc_insertion_point(field_release:ProjectJ.Room.title)
  return _impl_.title_.Release();
}
inline void Room::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.Room.title)
}

// .ProjectJ.RoomState state = 3;
inline void Room::clear_state() {
  _impl_.state_ = 0;
}
inline ::ProjectJ::RoomState Room::_internal_state() const {
  return static_cast< ::ProjectJ::RoomState >(_impl_.state_);
}
inline ::ProjectJ::RoomState Room::state() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Room.state)
  return _internal_state();
}
inline void Room::_internal_set_state(::ProjectJ::RoomState value) {
  
  _impl_.state_ = value;
}
inline void Room::set_state(::ProjectJ::RoomState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Room.state)
}

// int32 number_of_player = 4;
inline void Room::clear_number_of_player() {
  _impl_.number_of_player_ = 0;
}
inline int32_t Room::_internal_number_of_player() const {
  return _impl_.number_of_player_;
}
inline int32_t Room::number_of_player() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Room.number_of_player)
  return _internal_number_of_player();
}
inline void Room::_internal_set_number_of_player(int32_t value) {
  
  _impl_.number_of_player_ = value;
}
inline void Room::set_number_of_player(int32_t value) {
  _internal_set_number_of_player(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Room.number_of_player)
}

// -------------------------------------------------------------------

// Player

// int32 account_id = 1;
inline void Player::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t Player::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t Player::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Player.account_id)
  return _internal_account_id();
}
inline void Player::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void Player::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Player.account_id)
}

// string nickname = 2;
inline void Player::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& Player::nickname() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Player.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.Player.nickname)
}
inline std::string* Player::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ProjectJ.Player.nickname)
  return _s;
}
inline const std::string& Player::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void Player::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* Player::release_nickname() {
  // @@protoc_insertion_point(field_release:ProjectJ.Player.nickname)
  return _impl_.nickname_.Release();
}
inline void Player::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.Player.nickname)
}

// -------------------------------------------------------------------

// RoomInfo_PlayerSlot

// .ProjectJ.Player player = 2;
inline bool RoomInfo_PlayerSlot::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool RoomInfo_PlayerSlot::has_player() const {
  return _internal_has_player();
}
inline void RoomInfo_PlayerSlot::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::ProjectJ::Player& RoomInfo_PlayerSlot::_internal_player() const {
  const ::ProjectJ::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Player&>(
      ::ProjectJ::_Player_default_instance_);
}
inline const ::ProjectJ::Player& RoomInfo_PlayerSlot::player() const {
  // @@protoc_insertion_point(field_get:ProjectJ.RoomInfo.PlayerSlot.player)
  return _internal_player();
}
inline void RoomInfo_PlayerSlot::unsafe_arena_set_allocated_player(
    ::ProjectJ::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.RoomInfo.PlayerSlot.player)
}
inline ::ProjectJ::Player* RoomInfo_PlayerSlot::release_player() {
  
  ::ProjectJ::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Player* RoomInfo_PlayerSlot::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:ProjectJ.RoomInfo.PlayerSlot.player)
  
  ::ProjectJ::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::ProjectJ::Player* RoomInfo_PlayerSlot::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::ProjectJ::Player* RoomInfo_PlayerSlot::mutable_player() {
  ::ProjectJ::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:ProjectJ.RoomInfo.PlayerSlot.player)
  return _msg;
}
inline void RoomInfo_PlayerSlot::set_allocated_player(::ProjectJ::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.RoomInfo.PlayerSlot.player)
}

// bool is_ready = 3;
inline void RoomInfo_PlayerSlot::clear_is_ready() {
  _impl_.is_ready_ = false;
}
inline bool RoomInfo_PlayerSlot::_internal_is_ready() const {
  return _impl_.is_ready_;
}
inline bool RoomInfo_PlayerSlot::is_ready() const {
  // @@protoc_insertion_point(field_get:ProjectJ.RoomInfo.PlayerSlot.is_ready)
  return _internal_is_ready();
}
inline void RoomInfo_PlayerSlot::_internal_set_is_ready(bool value) {
  
  _impl_.is_ready_ = value;
}
inline void RoomInfo_PlayerSlot::set_is_ready(bool value) {
  _internal_set_is_ready(value);
  // @@protoc_insertion_point(field_set:ProjectJ.RoomInfo.PlayerSlot.is_ready)
}

// -------------------------------------------------------------------

// RoomInfo

// int32 room_id = 1;
inline void RoomInfo::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t RoomInfo::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t RoomInfo::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.RoomInfo.room_id)
  return _internal_room_id();
}
inline void RoomInfo::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void RoomInfo::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.RoomInfo.room_id)
}

// string title = 2;
inline void RoomInfo::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& RoomInfo::title() const {
  // @@protoc_insertion_point(field_get:ProjectJ.RoomInfo.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfo::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.RoomInfo.title)
}
inline std::string* RoomInfo::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ProjectJ.RoomInfo.title)
  return _s;
}
inline const std::string& RoomInfo::_internal_title() const {
  return _impl_.title_.Get();
}
inline void RoomInfo::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomInfo::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomInfo::release_title() {
  // @@protoc_insertion_point(field_release:ProjectJ.RoomInfo.title)
  return _impl_.title_.Release();
}
inline void RoomInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.RoomInfo.title)
}

// .ProjectJ.RoomInfo.PlayerSlot chaser = 3;
inline bool RoomInfo::_internal_has_chaser() const {
  return this != internal_default_instance() && _impl_.chaser_ != nullptr;
}
inline bool RoomInfo::has_chaser() const {
  return _internal_has_chaser();
}
inline void RoomInfo::clear_chaser() {
  if (GetArenaForAllocation() == nullptr && _impl_.chaser_ != nullptr) {
    delete _impl_.chaser_;
  }
  _impl_.chaser_ = nullptr;
}
inline const ::ProjectJ::RoomInfo_PlayerSlot& RoomInfo::_internal_chaser() const {
  const ::ProjectJ::RoomInfo_PlayerSlot* p = _impl_.chaser_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::RoomInfo_PlayerSlot&>(
      ::ProjectJ::_RoomInfo_PlayerSlot_default_instance_);
}
inline const ::ProjectJ::RoomInfo_PlayerSlot& RoomInfo::chaser() const {
  // @@protoc_insertion_point(field_get:ProjectJ.RoomInfo.chaser)
  return _internal_chaser();
}
inline void RoomInfo::unsafe_arena_set_allocated_chaser(
    ::ProjectJ::RoomInfo_PlayerSlot* chaser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chaser_);
  }
  _impl_.chaser_ = chaser;
  if (chaser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.RoomInfo.chaser)
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::release_chaser() {
  
  ::ProjectJ::RoomInfo_PlayerSlot* temp = _impl_.chaser_;
  _impl_.chaser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::unsafe_arena_release_chaser() {
  // @@protoc_insertion_point(field_release:ProjectJ.RoomInfo.chaser)
  
  ::ProjectJ::RoomInfo_PlayerSlot* temp = _impl_.chaser_;
  _impl_.chaser_ = nullptr;
  return temp;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::_internal_mutable_chaser() {
  
  if (_impl_.chaser_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::RoomInfo_PlayerSlot>(GetArenaForAllocation());
    _impl_.chaser_ = p;
  }
  return _impl_.chaser_;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::mutable_chaser() {
  ::ProjectJ::RoomInfo_PlayerSlot* _msg = _internal_mutable_chaser();
  // @@protoc_insertion_point(field_mutable:ProjectJ.RoomInfo.chaser)
  return _msg;
}
inline void RoomInfo::set_allocated_chaser(::ProjectJ::RoomInfo_PlayerSlot* chaser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chaser_;
  }
  if (chaser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chaser);
    if (message_arena != submessage_arena) {
      chaser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chaser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chaser_ = chaser;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.RoomInfo.chaser)
}

// .ProjectJ.RoomInfo.PlayerSlot fugitive_first = 4;
inline bool RoomInfo::_internal_has_fugitive_first() const {
  return this != internal_default_instance() && _impl_.fugitive_first_ != nullptr;
}
inline bool RoomInfo::has_fugitive_first() const {
  return _internal_has_fugitive_first();
}
inline void RoomInfo::clear_fugitive_first() {
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_first_ != nullptr) {
    delete _impl_.fugitive_first_;
  }
  _impl_.fugitive_first_ = nullptr;
}
inline const ::ProjectJ::RoomInfo_PlayerSlot& RoomInfo::_internal_fugitive_first() const {
  const ::ProjectJ::RoomInfo_PlayerSlot* p = _impl_.fugitive_first_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::RoomInfo_PlayerSlot&>(
      ::ProjectJ::_RoomInfo_PlayerSlot_default_instance_);
}
inline const ::ProjectJ::RoomInfo_PlayerSlot& RoomInfo::fugitive_first() const {
  // @@protoc_insertion_point(field_get:ProjectJ.RoomInfo.fugitive_first)
  return _internal_fugitive_first();
}
inline void RoomInfo::unsafe_arena_set_allocated_fugitive_first(
    ::ProjectJ::RoomInfo_PlayerSlot* fugitive_first) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fugitive_first_);
  }
  _impl_.fugitive_first_ = fugitive_first;
  if (fugitive_first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.RoomInfo.fugitive_first)
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::release_fugitive_first() {
  
  ::ProjectJ::RoomInfo_PlayerSlot* temp = _impl_.fugitive_first_;
  _impl_.fugitive_first_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::unsafe_arena_release_fugitive_first() {
  // @@protoc_insertion_point(field_release:ProjectJ.RoomInfo.fugitive_first)
  
  ::ProjectJ::RoomInfo_PlayerSlot* temp = _impl_.fugitive_first_;
  _impl_.fugitive_first_ = nullptr;
  return temp;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::_internal_mutable_fugitive_first() {
  
  if (_impl_.fugitive_first_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::RoomInfo_PlayerSlot>(GetArenaForAllocation());
    _impl_.fugitive_first_ = p;
  }
  return _impl_.fugitive_first_;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::mutable_fugitive_first() {
  ::ProjectJ::RoomInfo_PlayerSlot* _msg = _internal_mutable_fugitive_first();
  // @@protoc_insertion_point(field_mutable:ProjectJ.RoomInfo.fugitive_first)
  return _msg;
}
inline void RoomInfo::set_allocated_fugitive_first(::ProjectJ::RoomInfo_PlayerSlot* fugitive_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fugitive_first_;
  }
  if (fugitive_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fugitive_first);
    if (message_arena != submessage_arena) {
      fugitive_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fugitive_first, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fugitive_first_ = fugitive_first;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.RoomInfo.fugitive_first)
}

// .ProjectJ.RoomInfo.PlayerSlot fugitive_second = 5;
inline bool RoomInfo::_internal_has_fugitive_second() const {
  return this != internal_default_instance() && _impl_.fugitive_second_ != nullptr;
}
inline bool RoomInfo::has_fugitive_second() const {
  return _internal_has_fugitive_second();
}
inline void RoomInfo::clear_fugitive_second() {
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_second_ != nullptr) {
    delete _impl_.fugitive_second_;
  }
  _impl_.fugitive_second_ = nullptr;
}
inline const ::ProjectJ::RoomInfo_PlayerSlot& RoomInfo::_internal_fugitive_second() const {
  const ::ProjectJ::RoomInfo_PlayerSlot* p = _impl_.fugitive_second_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::RoomInfo_PlayerSlot&>(
      ::ProjectJ::_RoomInfo_PlayerSlot_default_instance_);
}
inline const ::ProjectJ::RoomInfo_PlayerSlot& RoomInfo::fugitive_second() const {
  // @@protoc_insertion_point(field_get:ProjectJ.RoomInfo.fugitive_second)
  return _internal_fugitive_second();
}
inline void RoomInfo::unsafe_arena_set_allocated_fugitive_second(
    ::ProjectJ::RoomInfo_PlayerSlot* fugitive_second) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fugitive_second_);
  }
  _impl_.fugitive_second_ = fugitive_second;
  if (fugitive_second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.RoomInfo.fugitive_second)
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::release_fugitive_second() {
  
  ::ProjectJ::RoomInfo_PlayerSlot* temp = _impl_.fugitive_second_;
  _impl_.fugitive_second_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::unsafe_arena_release_fugitive_second() {
  // @@protoc_insertion_point(field_release:ProjectJ.RoomInfo.fugitive_second)
  
  ::ProjectJ::RoomInfo_PlayerSlot* temp = _impl_.fugitive_second_;
  _impl_.fugitive_second_ = nullptr;
  return temp;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::_internal_mutable_fugitive_second() {
  
  if (_impl_.fugitive_second_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::RoomInfo_PlayerSlot>(GetArenaForAllocation());
    _impl_.fugitive_second_ = p;
  }
  return _impl_.fugitive_second_;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::mutable_fugitive_second() {
  ::ProjectJ::RoomInfo_PlayerSlot* _msg = _internal_mutable_fugitive_second();
  // @@protoc_insertion_point(field_mutable:ProjectJ.RoomInfo.fugitive_second)
  return _msg;
}
inline void RoomInfo::set_allocated_fugitive_second(::ProjectJ::RoomInfo_PlayerSlot* fugitive_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fugitive_second_;
  }
  if (fugitive_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fugitive_second);
    if (message_arena != submessage_arena) {
      fugitive_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fugitive_second, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fugitive_second_ = fugitive_second;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.RoomInfo.fugitive_second)
}

// .ProjectJ.RoomInfo.PlayerSlot fugitive_third = 6;
inline bool RoomInfo::_internal_has_fugitive_third() const {
  return this != internal_default_instance() && _impl_.fugitive_third_ != nullptr;
}
inline bool RoomInfo::has_fugitive_third() const {
  return _internal_has_fugitive_third();
}
inline void RoomInfo::clear_fugitive_third() {
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_third_ != nullptr) {
    delete _impl_.fugitive_third_;
  }
  _impl_.fugitive_third_ = nullptr;
}
inline const ::ProjectJ::RoomInfo_PlayerSlot& RoomInfo::_internal_fugitive_third() const {
  const ::ProjectJ::RoomInfo_PlayerSlot* p = _impl_.fugitive_third_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::RoomInfo_PlayerSlot&>(
      ::ProjectJ::_RoomInfo_PlayerSlot_default_instance_);
}
inline const ::ProjectJ::RoomInfo_PlayerSlot& RoomInfo::fugitive_third() const {
  // @@protoc_insertion_point(field_get:ProjectJ.RoomInfo.fugitive_third)
  return _internal_fugitive_third();
}
inline void RoomInfo::unsafe_arena_set_allocated_fugitive_third(
    ::ProjectJ::RoomInfo_PlayerSlot* fugitive_third) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fugitive_third_);
  }
  _impl_.fugitive_third_ = fugitive_third;
  if (fugitive_third) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.RoomInfo.fugitive_third)
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::release_fugitive_third() {
  
  ::ProjectJ::RoomInfo_PlayerSlot* temp = _impl_.fugitive_third_;
  _impl_.fugitive_third_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::unsafe_arena_release_fugitive_third() {
  // @@protoc_insertion_point(field_release:ProjectJ.RoomInfo.fugitive_third)
  
  ::ProjectJ::RoomInfo_PlayerSlot* temp = _impl_.fugitive_third_;
  _impl_.fugitive_third_ = nullptr;
  return temp;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::_internal_mutable_fugitive_third() {
  
  if (_impl_.fugitive_third_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::RoomInfo_PlayerSlot>(GetArenaForAllocation());
    _impl_.fugitive_third_ = p;
  }
  return _impl_.fugitive_third_;
}
inline ::ProjectJ::RoomInfo_PlayerSlot* RoomInfo::mutable_fugitive_third() {
  ::ProjectJ::RoomInfo_PlayerSlot* _msg = _internal_mutable_fugitive_third();
  // @@protoc_insertion_point(field_mutable:ProjectJ.RoomInfo.fugitive_third)
  return _msg;
}
inline void RoomInfo::set_allocated_fugitive_third(::ProjectJ::RoomInfo_PlayerSlot* fugitive_third) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fugitive_third_;
  }
  if (fugitive_third) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fugitive_third);
    if (message_arena != submessage_arena) {
      fugitive_third = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fugitive_third, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fugitive_third_ = fugitive_third;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.RoomInfo.fugitive_third)
}

// -------------------------------------------------------------------

// Item

// int32 id = 1;
inline void Item::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Item::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Item::id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Item.id)
  return _internal_id();
}
inline void Item::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Item::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Item.id)
}

// int32 index = 2;
inline void Item::clear_index() {
  _impl_.index_ = 0;
}
inline int32_t Item::_internal_index() const {
  return _impl_.index_;
}
inline int32_t Item::index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Item.index)
  return _internal_index();
}
inline void Item::_internal_set_index(int32_t value) {
  
  _impl_.index_ = value;
}
inline void Item::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Item.index)
}

// int32 width = 3;
inline void Item::clear_width() {
  _impl_.width_ = 0;
}
inline int32_t Item::_internal_width() const {
  return _impl_.width_;
}
inline int32_t Item::width() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Item.width)
  return _internal_width();
}
inline void Item::_internal_set_width(int32_t value) {
  
  _impl_.width_ = value;
}
inline void Item::set_width(int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Item.width)
}

// int32 height = 4;
inline void Item::clear_height() {
  _impl_.height_ = 0;
}
inline int32_t Item::_internal_height() const {
  return _impl_.height_;
}
inline int32_t Item::height() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Item.height)
  return _internal_height();
}
inline void Item::_internal_set_height(int32_t value) {
  
  _impl_.height_ = value;
}
inline void Item::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Item.height)
}

// int32 weight = 5;
inline void Item::clear_weight() {
  _impl_.weight_ = 0;
}
inline int32_t Item::_internal_weight() const {
  return _impl_.weight_;
}
inline int32_t Item::weight() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Item.weight)
  return _internal_weight();
}
inline void Item::_internal_set_weight(int32_t value) {
  
  _impl_.weight_ = value;
}
inline void Item::set_weight(int32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Item.weight)
}

// bool is_owned = 6;
inline void Item::clear_is_owned() {
  _impl_.is_owned_ = false;
}
inline bool Item::_internal_is_owned() const {
  return _impl_.is_owned_;
}
inline bool Item::is_owned() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Item.is_owned)
  return _internal_is_owned();
}
inline void Item::_internal_set_is_owned(bool value) {
  
  _impl_.is_owned_ = value;
}
inline void Item::set_is_owned(bool value) {
  _internal_set_is_owned(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Item.is_owned)
}

// .ProjectJ.Vector world_position = 7;
inline bool Item::_internal_has_world_position() const {
  return this != internal_default_instance() && _impl_.world_position_ != nullptr;
}
inline bool Item::has_world_position() const {
  return _internal_has_world_position();
}
inline void Item::clear_world_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.world_position_ != nullptr) {
    delete _impl_.world_position_;
  }
  _impl_.world_position_ = nullptr;
}
inline const ::ProjectJ::Vector& Item::_internal_world_position() const {
  const ::ProjectJ::Vector* p = _impl_.world_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Vector&>(
      ::ProjectJ::_Vector_default_instance_);
}
inline const ::ProjectJ::Vector& Item::world_position() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Item.world_position)
  return _internal_world_position();
}
inline void Item::unsafe_arena_set_allocated_world_position(
    ::ProjectJ::Vector* world_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_position_);
  }
  _impl_.world_position_ = world_position;
  if (world_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.Item.world_position)
}
inline ::ProjectJ::Vector* Item::release_world_position() {
  
  ::ProjectJ::Vector* temp = _impl_.world_position_;
  _impl_.world_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Vector* Item::unsafe_arena_release_world_position() {
  // @@protoc_insertion_point(field_release:ProjectJ.Item.world_position)
  
  ::ProjectJ::Vector* temp = _impl_.world_position_;
  _impl_.world_position_ = nullptr;
  return temp;
}
inline ::ProjectJ::Vector* Item::_internal_mutable_world_position() {
  
  if (_impl_.world_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Vector>(GetArenaForAllocation());
    _impl_.world_position_ = p;
  }
  return _impl_.world_position_;
}
inline ::ProjectJ::Vector* Item::mutable_world_position() {
  ::ProjectJ::Vector* _msg = _internal_mutable_world_position();
  // @@protoc_insertion_point(field_mutable:ProjectJ.Item.world_position)
  return _msg;
}
inline void Item::set_allocated_world_position(::ProjectJ::Vector* world_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.world_position_;
  }
  if (world_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(world_position);
    if (message_arena != submessage_arena) {
      world_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.world_position_ = world_position;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.Item.world_position)
}

// .ProjectJ.Rotator world_rotation = 8;
inline bool Item::_internal_has_world_rotation() const {
  return this != internal_default_instance() && _impl_.world_rotation_ != nullptr;
}
inline bool Item::has_world_rotation() const {
  return _internal_has_world_rotation();
}
inline void Item::clear_world_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.world_rotation_ != nullptr) {
    delete _impl_.world_rotation_;
  }
  _impl_.world_rotation_ = nullptr;
}
inline const ::ProjectJ::Rotator& Item::_internal_world_rotation() const {
  const ::ProjectJ::Rotator* p = _impl_.world_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Rotator&>(
      ::ProjectJ::_Rotator_default_instance_);
}
inline const ::ProjectJ::Rotator& Item::world_rotation() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Item.world_rotation)
  return _internal_world_rotation();
}
inline void Item::unsafe_arena_set_allocated_world_rotation(
    ::ProjectJ::Rotator* world_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_rotation_);
  }
  _impl_.world_rotation_ = world_rotation;
  if (world_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.Item.world_rotation)
}
inline ::ProjectJ::Rotator* Item::release_world_rotation() {
  
  ::ProjectJ::Rotator* temp = _impl_.world_rotation_;
  _impl_.world_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Rotator* Item::unsafe_arena_release_world_rotation() {
  // @@protoc_insertion_point(field_release:ProjectJ.Item.world_rotation)
  
  ::ProjectJ::Rotator* temp = _impl_.world_rotation_;
  _impl_.world_rotation_ = nullptr;
  return temp;
}
inline ::ProjectJ::Rotator* Item::_internal_mutable_world_rotation() {
  
  if (_impl_.world_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Rotator>(GetArenaForAllocation());
    _impl_.world_rotation_ = p;
  }
  return _impl_.world_rotation_;
}
inline ::ProjectJ::Rotator* Item::mutable_world_rotation() {
  ::ProjectJ::Rotator* _msg = _internal_mutable_world_rotation();
  // @@protoc_insertion_point(field_mutable:ProjectJ.Item.world_rotation)
  return _msg;
}
inline void Item::set_allocated_world_rotation(::ProjectJ::Rotator* world_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.world_rotation_;
  }
  if (world_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(world_rotation);
    if (message_arena != submessage_arena) {
      world_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.world_rotation_ = world_rotation;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.Item.world_rotation)
}

// int32 onwer_player_index = 9;
inline void Item::clear_onwer_player_index() {
  _impl_.onwer_player_index_ = 0;
}
inline int32_t Item::_internal_onwer_player_index() const {
  return _impl_.onwer_player_index_;
}
inline int32_t Item::onwer_player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Item.onwer_player_index)
  return _internal_onwer_player_index();
}
inline void Item::_internal_set_onwer_player_index(int32_t value) {
  
  _impl_.onwer_player_index_ = value;
}
inline void Item::set_onwer_player_index(int32_t value) {
  _internal_set_onwer_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Item.onwer_player_index)
}

// bool is_rotated = 10;
inline void Item::clear_is_rotated() {
  _impl_.is_rotated_ = false;
}
inline bool Item::_internal_is_rotated() const {
  return _impl_.is_rotated_;
}
inline bool Item::is_rotated() const {
  // @@protoc_insertion_point(field_get:ProjectJ.Item.is_rotated)
  return _internal_is_rotated();
}
inline void Item::_internal_set_is_rotated(bool value) {
  
  _impl_.is_rotated_ = value;
}
inline void Item::set_is_rotated(bool value) {
  _internal_set_is_rotated(value);
  // @@protoc_insertion_point(field_set:ProjectJ.Item.is_rotated)
}

// -------------------------------------------------------------------

// PlayerInfo

// .ProjectJ.MatchPlayerState state = 1;
inline void PlayerInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::ProjectJ::MatchPlayerState PlayerInfo::_internal_state() const {
  return static_cast< ::ProjectJ::MatchPlayerState >(_impl_.state_);
}
inline ::ProjectJ::MatchPlayerState PlayerInfo::state() const {
  // @@protoc_insertion_point(field_get:ProjectJ.PlayerInfo.state)
  return _internal_state();
}
inline void PlayerInfo::_internal_set_state(::ProjectJ::MatchPlayerState value) {
  
  _impl_.state_ = value;
}
inline void PlayerInfo::set_state(::ProjectJ::MatchPlayerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ProjectJ.PlayerInfo.state)
}

// int32 player_index = 2;
inline void PlayerInfo::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t PlayerInfo::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t PlayerInfo::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.PlayerInfo.player_index)
  return _internal_player_index();
}
inline void PlayerInfo::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void PlayerInfo::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.PlayerInfo.player_index)
}

// .ProjectJ.Player player = 3;
inline bool PlayerInfo::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool PlayerInfo::has_player() const {
  return _internal_has_player();
}
inline void PlayerInfo::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::ProjectJ::Player& PlayerInfo::_internal_player() const {
  const ::ProjectJ::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Player&>(
      ::ProjectJ::_Player_default_instance_);
}
inline const ::ProjectJ::Player& PlayerInfo::player() const {
  // @@protoc_insertion_point(field_get:ProjectJ.PlayerInfo.player)
  return _internal_player();
}
inline void PlayerInfo::unsafe_arena_set_allocated_player(
    ::ProjectJ::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.PlayerInfo.player)
}
inline ::ProjectJ::Player* PlayerInfo::release_player() {
  
  ::ProjectJ::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Player* PlayerInfo::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:ProjectJ.PlayerInfo.player)
  
  ::ProjectJ::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::ProjectJ::Player* PlayerInfo::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::ProjectJ::Player* PlayerInfo::mutable_player() {
  ::ProjectJ::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:ProjectJ.PlayerInfo.player)
  return _msg;
}
inline void PlayerInfo::set_allocated_player(::ProjectJ::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.PlayerInfo.player)
}

// .ProjectJ.Vector position = 4;
inline bool PlayerInfo::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool PlayerInfo::has_position() const {
  return _internal_has_position();
}
inline void PlayerInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::ProjectJ::Vector& PlayerInfo::_internal_position() const {
  const ::ProjectJ::Vector* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Vector&>(
      ::ProjectJ::_Vector_default_instance_);
}
inline const ::ProjectJ::Vector& PlayerInfo::position() const {
  // @@protoc_insertion_point(field_get:ProjectJ.PlayerInfo.position)
  return _internal_position();
}
inline void PlayerInfo::unsafe_arena_set_allocated_position(
    ::ProjectJ::Vector* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.PlayerInfo.position)
}
inline ::ProjectJ::Vector* PlayerInfo::release_position() {
  
  ::ProjectJ::Vector* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Vector* PlayerInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ProjectJ.PlayerInfo.position)
  
  ::ProjectJ::Vector* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::ProjectJ::Vector* PlayerInfo::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Vector>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::ProjectJ::Vector* PlayerInfo::mutable_position() {
  ::ProjectJ::Vector* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ProjectJ.PlayerInfo.position)
  return _msg;
}
inline void PlayerInfo::set_allocated_position(::ProjectJ::Vector* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.PlayerInfo.position)
}

// .ProjectJ.Rotator rotation = 5;
inline bool PlayerInfo::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool PlayerInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline void PlayerInfo::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::ProjectJ::Rotator& PlayerInfo::_internal_rotation() const {
  const ::ProjectJ::Rotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Rotator&>(
      ::ProjectJ::_Rotator_default_instance_);
}
inline const ::ProjectJ::Rotator& PlayerInfo::rotation() const {
  // @@protoc_insertion_point(field_get:ProjectJ.PlayerInfo.rotation)
  return _internal_rotation();
}
inline void PlayerInfo::unsafe_arena_set_allocated_rotation(
    ::ProjectJ::Rotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.PlayerInfo.rotation)
}
inline ::ProjectJ::Rotator* PlayerInfo::release_rotation() {
  
  ::ProjectJ::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Rotator* PlayerInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:ProjectJ.PlayerInfo.rotation)
  
  ::ProjectJ::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::ProjectJ::Rotator* PlayerInfo::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Rotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::ProjectJ::Rotator* PlayerInfo::mutable_rotation() {
  ::ProjectJ::Rotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:ProjectJ.PlayerInfo.rotation)
  return _msg;
}
inline void PlayerInfo::set_allocated_rotation(::ProjectJ::Rotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.PlayerInfo.rotation)
}

// -------------------------------------------------------------------

// MatchInitInfo_ScaleInitInfo

// int32 operating_weight = 1;
inline void MatchInitInfo_ScaleInitInfo::clear_operating_weight() {
  _impl_.operating_weight_ = 0;
}
inline int32_t MatchInitInfo_ScaleInitInfo::_internal_operating_weight() const {
  return _impl_.operating_weight_;
}
inline int32_t MatchInitInfo_ScaleInitInfo::operating_weight() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInitInfo.ScaleInitInfo.operating_weight)
  return _internal_operating_weight();
}
inline void MatchInitInfo_ScaleInitInfo::_internal_set_operating_weight(int32_t value) {
  
  _impl_.operating_weight_ = value;
}
inline void MatchInitInfo_ScaleInitInfo::set_operating_weight(int32_t value) {
  _internal_set_operating_weight(value);
  // @@protoc_insertion_point(field_set:ProjectJ.MatchInitInfo.ScaleInitInfo.operating_weight)
}

// int32 tolerance = 2;
inline void MatchInitInfo_ScaleInitInfo::clear_tolerance() {
  _impl_.tolerance_ = 0;
}
inline int32_t MatchInitInfo_ScaleInitInfo::_internal_tolerance() const {
  return _impl_.tolerance_;
}
inline int32_t MatchInitInfo_ScaleInitInfo::tolerance() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInitInfo.ScaleInitInfo.tolerance)
  return _internal_tolerance();
}
inline void MatchInitInfo_ScaleInitInfo::_internal_set_tolerance(int32_t value) {
  
  _impl_.tolerance_ = value;
}
inline void MatchInitInfo_ScaleInitInfo::set_tolerance(int32_t value) {
  _internal_set_tolerance(value);
  // @@protoc_insertion_point(field_set:ProjectJ.MatchInitInfo.ScaleInitInfo.tolerance)
}

// -------------------------------------------------------------------

// MatchInitInfo

// .ProjectJ.PlayerInfo chaser = 1;
inline bool MatchInitInfo::_internal_has_chaser() const {
  return this != internal_default_instance() && _impl_.chaser_ != nullptr;
}
inline bool MatchInitInfo::has_chaser() const {
  return _internal_has_chaser();
}
inline void MatchInitInfo::clear_chaser() {
  if (GetArenaForAllocation() == nullptr && _impl_.chaser_ != nullptr) {
    delete _impl_.chaser_;
  }
  _impl_.chaser_ = nullptr;
}
inline const ::ProjectJ::PlayerInfo& MatchInitInfo::_internal_chaser() const {
  const ::ProjectJ::PlayerInfo* p = _impl_.chaser_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::PlayerInfo&>(
      ::ProjectJ::_PlayerInfo_default_instance_);
}
inline const ::ProjectJ::PlayerInfo& MatchInitInfo::chaser() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInitInfo.chaser)
  return _internal_chaser();
}
inline void MatchInitInfo::unsafe_arena_set_allocated_chaser(
    ::ProjectJ::PlayerInfo* chaser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chaser_);
  }
  _impl_.chaser_ = chaser;
  if (chaser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInitInfo.chaser)
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::release_chaser() {
  
  ::ProjectJ::PlayerInfo* temp = _impl_.chaser_;
  _impl_.chaser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::unsafe_arena_release_chaser() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInitInfo.chaser)
  
  ::ProjectJ::PlayerInfo* temp = _impl_.chaser_;
  _impl_.chaser_ = nullptr;
  return temp;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::_internal_mutable_chaser() {
  
  if (_impl_.chaser_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::PlayerInfo>(GetArenaForAllocation());
    _impl_.chaser_ = p;
  }
  return _impl_.chaser_;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::mutable_chaser() {
  ::ProjectJ::PlayerInfo* _msg = _internal_mutable_chaser();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInitInfo.chaser)
  return _msg;
}
inline void MatchInitInfo::set_allocated_chaser(::ProjectJ::PlayerInfo* chaser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chaser_;
  }
  if (chaser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chaser);
    if (message_arena != submessage_arena) {
      chaser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chaser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chaser_ = chaser;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInitInfo.chaser)
}

// .ProjectJ.PlayerInfo fugitive_first = 2;
inline bool MatchInitInfo::_internal_has_fugitive_first() const {
  return this != internal_default_instance() && _impl_.fugitive_first_ != nullptr;
}
inline bool MatchInitInfo::has_fugitive_first() const {
  return _internal_has_fugitive_first();
}
inline void MatchInitInfo::clear_fugitive_first() {
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_first_ != nullptr) {
    delete _impl_.fugitive_first_;
  }
  _impl_.fugitive_first_ = nullptr;
}
inline const ::ProjectJ::PlayerInfo& MatchInitInfo::_internal_fugitive_first() const {
  const ::ProjectJ::PlayerInfo* p = _impl_.fugitive_first_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::PlayerInfo&>(
      ::ProjectJ::_PlayerInfo_default_instance_);
}
inline const ::ProjectJ::PlayerInfo& MatchInitInfo::fugitive_first() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInitInfo.fugitive_first)
  return _internal_fugitive_first();
}
inline void MatchInitInfo::unsafe_arena_set_allocated_fugitive_first(
    ::ProjectJ::PlayerInfo* fugitive_first) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fugitive_first_);
  }
  _impl_.fugitive_first_ = fugitive_first;
  if (fugitive_first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInitInfo.fugitive_first)
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::release_fugitive_first() {
  
  ::ProjectJ::PlayerInfo* temp = _impl_.fugitive_first_;
  _impl_.fugitive_first_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::unsafe_arena_release_fugitive_first() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInitInfo.fugitive_first)
  
  ::ProjectJ::PlayerInfo* temp = _impl_.fugitive_first_;
  _impl_.fugitive_first_ = nullptr;
  return temp;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::_internal_mutable_fugitive_first() {
  
  if (_impl_.fugitive_first_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::PlayerInfo>(GetArenaForAllocation());
    _impl_.fugitive_first_ = p;
  }
  return _impl_.fugitive_first_;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::mutable_fugitive_first() {
  ::ProjectJ::PlayerInfo* _msg = _internal_mutable_fugitive_first();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInitInfo.fugitive_first)
  return _msg;
}
inline void MatchInitInfo::set_allocated_fugitive_first(::ProjectJ::PlayerInfo* fugitive_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fugitive_first_;
  }
  if (fugitive_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fugitive_first);
    if (message_arena != submessage_arena) {
      fugitive_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fugitive_first, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fugitive_first_ = fugitive_first;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInitInfo.fugitive_first)
}

// .ProjectJ.PlayerInfo fugitive_second = 3;
inline bool MatchInitInfo::_internal_has_fugitive_second() const {
  return this != internal_default_instance() && _impl_.fugitive_second_ != nullptr;
}
inline bool MatchInitInfo::has_fugitive_second() const {
  return _internal_has_fugitive_second();
}
inline void MatchInitInfo::clear_fugitive_second() {
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_second_ != nullptr) {
    delete _impl_.fugitive_second_;
  }
  _impl_.fugitive_second_ = nullptr;
}
inline const ::ProjectJ::PlayerInfo& MatchInitInfo::_internal_fugitive_second() const {
  const ::ProjectJ::PlayerInfo* p = _impl_.fugitive_second_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::PlayerInfo&>(
      ::ProjectJ::_PlayerInfo_default_instance_);
}
inline const ::ProjectJ::PlayerInfo& MatchInitInfo::fugitive_second() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInitInfo.fugitive_second)
  return _internal_fugitive_second();
}
inline void MatchInitInfo::unsafe_arena_set_allocated_fugitive_second(
    ::ProjectJ::PlayerInfo* fugitive_second) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fugitive_second_);
  }
  _impl_.fugitive_second_ = fugitive_second;
  if (fugitive_second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInitInfo.fugitive_second)
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::release_fugitive_second() {
  
  ::ProjectJ::PlayerInfo* temp = _impl_.fugitive_second_;
  _impl_.fugitive_second_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::unsafe_arena_release_fugitive_second() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInitInfo.fugitive_second)
  
  ::ProjectJ::PlayerInfo* temp = _impl_.fugitive_second_;
  _impl_.fugitive_second_ = nullptr;
  return temp;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::_internal_mutable_fugitive_second() {
  
  if (_impl_.fugitive_second_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::PlayerInfo>(GetArenaForAllocation());
    _impl_.fugitive_second_ = p;
  }
  return _impl_.fugitive_second_;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::mutable_fugitive_second() {
  ::ProjectJ::PlayerInfo* _msg = _internal_mutable_fugitive_second();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInitInfo.fugitive_second)
  return _msg;
}
inline void MatchInitInfo::set_allocated_fugitive_second(::ProjectJ::PlayerInfo* fugitive_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fugitive_second_;
  }
  if (fugitive_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fugitive_second);
    if (message_arena != submessage_arena) {
      fugitive_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fugitive_second, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fugitive_second_ = fugitive_second;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInitInfo.fugitive_second)
}

// .ProjectJ.PlayerInfo fugitive_third = 4;
inline bool MatchInitInfo::_internal_has_fugitive_third() const {
  return this != internal_default_instance() && _impl_.fugitive_third_ != nullptr;
}
inline bool MatchInitInfo::has_fugitive_third() const {
  return _internal_has_fugitive_third();
}
inline void MatchInitInfo::clear_fugitive_third() {
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_third_ != nullptr) {
    delete _impl_.fugitive_third_;
  }
  _impl_.fugitive_third_ = nullptr;
}
inline const ::ProjectJ::PlayerInfo& MatchInitInfo::_internal_fugitive_third() const {
  const ::ProjectJ::PlayerInfo* p = _impl_.fugitive_third_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::PlayerInfo&>(
      ::ProjectJ::_PlayerInfo_default_instance_);
}
inline const ::ProjectJ::PlayerInfo& MatchInitInfo::fugitive_third() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInitInfo.fugitive_third)
  return _internal_fugitive_third();
}
inline void MatchInitInfo::unsafe_arena_set_allocated_fugitive_third(
    ::ProjectJ::PlayerInfo* fugitive_third) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fugitive_third_);
  }
  _impl_.fugitive_third_ = fugitive_third;
  if (fugitive_third) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInitInfo.fugitive_third)
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::release_fugitive_third() {
  
  ::ProjectJ::PlayerInfo* temp = _impl_.fugitive_third_;
  _impl_.fugitive_third_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::unsafe_arena_release_fugitive_third() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInitInfo.fugitive_third)
  
  ::ProjectJ::PlayerInfo* temp = _impl_.fugitive_third_;
  _impl_.fugitive_third_ = nullptr;
  return temp;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::_internal_mutable_fugitive_third() {
  
  if (_impl_.fugitive_third_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::PlayerInfo>(GetArenaForAllocation());
    _impl_.fugitive_third_ = p;
  }
  return _impl_.fugitive_third_;
}
inline ::ProjectJ::PlayerInfo* MatchInitInfo::mutable_fugitive_third() {
  ::ProjectJ::PlayerInfo* _msg = _internal_mutable_fugitive_third();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInitInfo.fugitive_third)
  return _msg;
}
inline void MatchInitInfo::set_allocated_fugitive_third(::ProjectJ::PlayerInfo* fugitive_third) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fugitive_third_;
  }
  if (fugitive_third) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fugitive_third);
    if (message_arena != submessage_arena) {
      fugitive_third = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fugitive_third, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fugitive_third_ = fugitive_third;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInitInfo.fugitive_third)
}

// .ProjectJ.MatchInitInfo.ScaleInitInfo scale_first = 5;
inline bool MatchInitInfo::_internal_has_scale_first() const {
  return this != internal_default_instance() && _impl_.scale_first_ != nullptr;
}
inline bool MatchInitInfo::has_scale_first() const {
  return _internal_has_scale_first();
}
inline void MatchInitInfo::clear_scale_first() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_first_ != nullptr) {
    delete _impl_.scale_first_;
  }
  _impl_.scale_first_ = nullptr;
}
inline const ::ProjectJ::MatchInitInfo_ScaleInitInfo& MatchInitInfo::_internal_scale_first() const {
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo* p = _impl_.scale_first_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInitInfo_ScaleInitInfo&>(
      ::ProjectJ::_MatchInitInfo_ScaleInitInfo_default_instance_);
}
inline const ::ProjectJ::MatchInitInfo_ScaleInitInfo& MatchInitInfo::scale_first() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInitInfo.scale_first)
  return _internal_scale_first();
}
inline void MatchInitInfo::unsafe_arena_set_allocated_scale_first(
    ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_first) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_first_);
  }
  _impl_.scale_first_ = scale_first;
  if (scale_first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInitInfo.scale_first)
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::release_scale_first() {
  
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* temp = _impl_.scale_first_;
  _impl_.scale_first_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::unsafe_arena_release_scale_first() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInitInfo.scale_first)
  
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* temp = _impl_.scale_first_;
  _impl_.scale_first_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::_internal_mutable_scale_first() {
  
  if (_impl_.scale_first_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInitInfo_ScaleInitInfo>(GetArenaForAllocation());
    _impl_.scale_first_ = p;
  }
  return _impl_.scale_first_;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::mutable_scale_first() {
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* _msg = _internal_mutable_scale_first();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInitInfo.scale_first)
  return _msg;
}
inline void MatchInitInfo::set_allocated_scale_first(::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_first_;
  }
  if (scale_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale_first);
    if (message_arena != submessage_arena) {
      scale_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_first, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_first_ = scale_first;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInitInfo.scale_first)
}

// .ProjectJ.MatchInitInfo.ScaleInitInfo scale_second = 6;
inline bool MatchInitInfo::_internal_has_scale_second() const {
  return this != internal_default_instance() && _impl_.scale_second_ != nullptr;
}
inline bool MatchInitInfo::has_scale_second() const {
  return _internal_has_scale_second();
}
inline void MatchInitInfo::clear_scale_second() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_second_ != nullptr) {
    delete _impl_.scale_second_;
  }
  _impl_.scale_second_ = nullptr;
}
inline const ::ProjectJ::MatchInitInfo_ScaleInitInfo& MatchInitInfo::_internal_scale_second() const {
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo* p = _impl_.scale_second_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInitInfo_ScaleInitInfo&>(
      ::ProjectJ::_MatchInitInfo_ScaleInitInfo_default_instance_);
}
inline const ::ProjectJ::MatchInitInfo_ScaleInitInfo& MatchInitInfo::scale_second() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInitInfo.scale_second)
  return _internal_scale_second();
}
inline void MatchInitInfo::unsafe_arena_set_allocated_scale_second(
    ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_second) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_second_);
  }
  _impl_.scale_second_ = scale_second;
  if (scale_second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInitInfo.scale_second)
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::release_scale_second() {
  
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* temp = _impl_.scale_second_;
  _impl_.scale_second_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::unsafe_arena_release_scale_second() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInitInfo.scale_second)
  
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* temp = _impl_.scale_second_;
  _impl_.scale_second_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::_internal_mutable_scale_second() {
  
  if (_impl_.scale_second_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInitInfo_ScaleInitInfo>(GetArenaForAllocation());
    _impl_.scale_second_ = p;
  }
  return _impl_.scale_second_;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::mutable_scale_second() {
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* _msg = _internal_mutable_scale_second();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInitInfo.scale_second)
  return _msg;
}
inline void MatchInitInfo::set_allocated_scale_second(::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_second_;
  }
  if (scale_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale_second);
    if (message_arena != submessage_arena) {
      scale_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_second, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_second_ = scale_second;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInitInfo.scale_second)
}

// .ProjectJ.MatchInitInfo.ScaleInitInfo scale_third = 7;
inline bool MatchInitInfo::_internal_has_scale_third() const {
  return this != internal_default_instance() && _impl_.scale_third_ != nullptr;
}
inline bool MatchInitInfo::has_scale_third() const {
  return _internal_has_scale_third();
}
inline void MatchInitInfo::clear_scale_third() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_third_ != nullptr) {
    delete _impl_.scale_third_;
  }
  _impl_.scale_third_ = nullptr;
}
inline const ::ProjectJ::MatchInitInfo_ScaleInitInfo& MatchInitInfo::_internal_scale_third() const {
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo* p = _impl_.scale_third_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInitInfo_ScaleInitInfo&>(
      ::ProjectJ::_MatchInitInfo_ScaleInitInfo_default_instance_);
}
inline const ::ProjectJ::MatchInitInfo_ScaleInitInfo& MatchInitInfo::scale_third() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInitInfo.scale_third)
  return _internal_scale_third();
}
inline void MatchInitInfo::unsafe_arena_set_allocated_scale_third(
    ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_third) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_third_);
  }
  _impl_.scale_third_ = scale_third;
  if (scale_third) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInitInfo.scale_third)
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::release_scale_third() {
  
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* temp = _impl_.scale_third_;
  _impl_.scale_third_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::unsafe_arena_release_scale_third() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInitInfo.scale_third)
  
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* temp = _impl_.scale_third_;
  _impl_.scale_third_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::_internal_mutable_scale_third() {
  
  if (_impl_.scale_third_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInitInfo_ScaleInitInfo>(GetArenaForAllocation());
    _impl_.scale_third_ = p;
  }
  return _impl_.scale_third_;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::mutable_scale_third() {
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* _msg = _internal_mutable_scale_third();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInitInfo.scale_third)
  return _msg;
}
inline void MatchInitInfo::set_allocated_scale_third(::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_third) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_third_;
  }
  if (scale_third) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale_third);
    if (message_arena != submessage_arena) {
      scale_third = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_third, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_third_ = scale_third;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInitInfo.scale_third)
}

// .ProjectJ.MatchInitInfo.ScaleInitInfo scale_fourth = 8;
inline bool MatchInitInfo::_internal_has_scale_fourth() const {
  return this != internal_default_instance() && _impl_.scale_fourth_ != nullptr;
}
inline bool MatchInitInfo::has_scale_fourth() const {
  return _internal_has_scale_fourth();
}
inline void MatchInitInfo::clear_scale_fourth() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_fourth_ != nullptr) {
    delete _impl_.scale_fourth_;
  }
  _impl_.scale_fourth_ = nullptr;
}
inline const ::ProjectJ::MatchInitInfo_ScaleInitInfo& MatchInitInfo::_internal_scale_fourth() const {
  const ::ProjectJ::MatchInitInfo_ScaleInitInfo* p = _impl_.scale_fourth_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInitInfo_ScaleInitInfo&>(
      ::ProjectJ::_MatchInitInfo_ScaleInitInfo_default_instance_);
}
inline const ::ProjectJ::MatchInitInfo_ScaleInitInfo& MatchInitInfo::scale_fourth() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInitInfo.scale_fourth)
  return _internal_scale_fourth();
}
inline void MatchInitInfo::unsafe_arena_set_allocated_scale_fourth(
    ::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_fourth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_fourth_);
  }
  _impl_.scale_fourth_ = scale_fourth;
  if (scale_fourth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInitInfo.scale_fourth)
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::release_scale_fourth() {
  
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* temp = _impl_.scale_fourth_;
  _impl_.scale_fourth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::unsafe_arena_release_scale_fourth() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInitInfo.scale_fourth)
  
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* temp = _impl_.scale_fourth_;
  _impl_.scale_fourth_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::_internal_mutable_scale_fourth() {
  
  if (_impl_.scale_fourth_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInitInfo_ScaleInitInfo>(GetArenaForAllocation());
    _impl_.scale_fourth_ = p;
  }
  return _impl_.scale_fourth_;
}
inline ::ProjectJ::MatchInitInfo_ScaleInitInfo* MatchInitInfo::mutable_scale_fourth() {
  ::ProjectJ::MatchInitInfo_ScaleInitInfo* _msg = _internal_mutable_scale_fourth();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInitInfo.scale_fourth)
  return _msg;
}
inline void MatchInitInfo::set_allocated_scale_fourth(::ProjectJ::MatchInitInfo_ScaleInitInfo* scale_fourth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_fourth_;
  }
  if (scale_fourth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale_fourth);
    if (message_arena != submessage_arena) {
      scale_fourth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_fourth, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_fourth_ = scale_fourth;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInitInfo.scale_fourth)
}

// -------------------------------------------------------------------

// MatchInfo_PlayerInfo

// .ProjectJ.MatchPlayerState state = 1;
inline void MatchInfo_PlayerInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::ProjectJ::MatchPlayerState MatchInfo_PlayerInfo::_internal_state() const {
  return static_cast< ::ProjectJ::MatchPlayerState >(_impl_.state_);
}
inline ::ProjectJ::MatchPlayerState MatchInfo_PlayerInfo::state() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.PlayerInfo.state)
  return _internal_state();
}
inline void MatchInfo_PlayerInfo::_internal_set_state(::ProjectJ::MatchPlayerState value) {
  
  _impl_.state_ = value;
}
inline void MatchInfo_PlayerInfo::set_state(::ProjectJ::MatchPlayerState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:ProjectJ.MatchInfo.PlayerInfo.state)
}

// int32 player_index = 2;
inline void MatchInfo_PlayerInfo::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t MatchInfo_PlayerInfo::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t MatchInfo_PlayerInfo::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.PlayerInfo.player_index)
  return _internal_player_index();
}
inline void MatchInfo_PlayerInfo::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void MatchInfo_PlayerInfo::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.MatchInfo.PlayerInfo.player_index)
}

// .ProjectJ.Player player = 3;
inline bool MatchInfo_PlayerInfo::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool MatchInfo_PlayerInfo::has_player() const {
  return _internal_has_player();
}
inline void MatchInfo_PlayerInfo::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::ProjectJ::Player& MatchInfo_PlayerInfo::_internal_player() const {
  const ::ProjectJ::Player* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Player&>(
      ::ProjectJ::_Player_default_instance_);
}
inline const ::ProjectJ::Player& MatchInfo_PlayerInfo::player() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.PlayerInfo.player)
  return _internal_player();
}
inline void MatchInfo_PlayerInfo::unsafe_arena_set_allocated_player(
    ::ProjectJ::Player* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInfo.PlayerInfo.player)
}
inline ::ProjectJ::Player* MatchInfo_PlayerInfo::release_player() {
  
  ::ProjectJ::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Player* MatchInfo_PlayerInfo::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInfo.PlayerInfo.player)
  
  ::ProjectJ::Player* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::ProjectJ::Player* MatchInfo_PlayerInfo::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Player>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::ProjectJ::Player* MatchInfo_PlayerInfo::mutable_player() {
  ::ProjectJ::Player* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.PlayerInfo.player)
  return _msg;
}
inline void MatchInfo_PlayerInfo::set_allocated_player(::ProjectJ::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInfo.PlayerInfo.player)
}

// .ProjectJ.Vector position = 4;
inline bool MatchInfo_PlayerInfo::_internal_has_position() const {
  return this != internal_default_instance() && _impl_.position_ != nullptr;
}
inline bool MatchInfo_PlayerInfo::has_position() const {
  return _internal_has_position();
}
inline void MatchInfo_PlayerInfo::clear_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
}
inline const ::ProjectJ::Vector& MatchInfo_PlayerInfo::_internal_position() const {
  const ::ProjectJ::Vector* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Vector&>(
      ::ProjectJ::_Vector_default_instance_);
}
inline const ::ProjectJ::Vector& MatchInfo_PlayerInfo::position() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.PlayerInfo.position)
  return _internal_position();
}
inline void MatchInfo_PlayerInfo::unsafe_arena_set_allocated_position(
    ::ProjectJ::Vector* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInfo.PlayerInfo.position)
}
inline ::ProjectJ::Vector* MatchInfo_PlayerInfo::release_position() {
  
  ::ProjectJ::Vector* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Vector* MatchInfo_PlayerInfo::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInfo.PlayerInfo.position)
  
  ::ProjectJ::Vector* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::ProjectJ::Vector* MatchInfo_PlayerInfo::_internal_mutable_position() {
  
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Vector>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::ProjectJ::Vector* MatchInfo_PlayerInfo::mutable_position() {
  ::ProjectJ::Vector* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.PlayerInfo.position)
  return _msg;
}
inline void MatchInfo_PlayerInfo::set_allocated_position(::ProjectJ::Vector* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInfo.PlayerInfo.position)
}

// .ProjectJ.Rotator rotation = 5;
inline bool MatchInfo_PlayerInfo::_internal_has_rotation() const {
  return this != internal_default_instance() && _impl_.rotation_ != nullptr;
}
inline bool MatchInfo_PlayerInfo::has_rotation() const {
  return _internal_has_rotation();
}
inline void MatchInfo_PlayerInfo::clear_rotation() {
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
}
inline const ::ProjectJ::Rotator& MatchInfo_PlayerInfo::_internal_rotation() const {
  const ::ProjectJ::Rotator* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Rotator&>(
      ::ProjectJ::_Rotator_default_instance_);
}
inline const ::ProjectJ::Rotator& MatchInfo_PlayerInfo::rotation() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.PlayerInfo.rotation)
  return _internal_rotation();
}
inline void MatchInfo_PlayerInfo::unsafe_arena_set_allocated_rotation(
    ::ProjectJ::Rotator* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInfo.PlayerInfo.rotation)
}
inline ::ProjectJ::Rotator* MatchInfo_PlayerInfo::release_rotation() {
  
  ::ProjectJ::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Rotator* MatchInfo_PlayerInfo::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInfo.PlayerInfo.rotation)
  
  ::ProjectJ::Rotator* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::ProjectJ::Rotator* MatchInfo_PlayerInfo::_internal_mutable_rotation() {
  
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Rotator>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::ProjectJ::Rotator* MatchInfo_PlayerInfo::mutable_rotation() {
  ::ProjectJ::Rotator* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.PlayerInfo.rotation)
  return _msg;
}
inline void MatchInfo_PlayerInfo::set_allocated_rotation(::ProjectJ::Rotator* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rotation_;
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rotation);
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInfo.PlayerInfo.rotation)
}

// -------------------------------------------------------------------

// MatchInfo_ScaleInfo

// bool is_operating = 1;
inline void MatchInfo_ScaleInfo::clear_is_operating() {
  _impl_.is_operating_ = false;
}
inline bool MatchInfo_ScaleInfo::_internal_is_operating() const {
  return _impl_.is_operating_;
}
inline bool MatchInfo_ScaleInfo::is_operating() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.ScaleInfo.is_operating)
  return _internal_is_operating();
}
inline void MatchInfo_ScaleInfo::_internal_set_is_operating(bool value) {
  
  _impl_.is_operating_ = value;
}
inline void MatchInfo_ScaleInfo::set_is_operating(bool value) {
  _internal_set_is_operating(value);
  // @@protoc_insertion_point(field_set:ProjectJ.MatchInfo.ScaleInfo.is_operating)
}

// int32 current_weight = 2;
inline void MatchInfo_ScaleInfo::clear_current_weight() {
  _impl_.current_weight_ = 0;
}
inline int32_t MatchInfo_ScaleInfo::_internal_current_weight() const {
  return _impl_.current_weight_;
}
inline int32_t MatchInfo_ScaleInfo::current_weight() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.ScaleInfo.current_weight)
  return _internal_current_weight();
}
inline void MatchInfo_ScaleInfo::_internal_set_current_weight(int32_t value) {
  
  _impl_.current_weight_ = value;
}
inline void MatchInfo_ScaleInfo::set_current_weight(int32_t value) {
  _internal_set_current_weight(value);
  // @@protoc_insertion_point(field_set:ProjectJ.MatchInfo.ScaleInfo.current_weight)
}

// -------------------------------------------------------------------

// MatchInfo

// .ProjectJ.MatchInfo.PlayerInfo chaser = 1;
inline bool MatchInfo::_internal_has_chaser() const {
  return this != internal_default_instance() && _impl_.chaser_ != nullptr;
}
inline bool MatchInfo::has_chaser() const {
  return _internal_has_chaser();
}
inline void MatchInfo::clear_chaser() {
  if (GetArenaForAllocation() == nullptr && _impl_.chaser_ != nullptr) {
    delete _impl_.chaser_;
  }
  _impl_.chaser_ = nullptr;
}
inline const ::ProjectJ::MatchInfo_PlayerInfo& MatchInfo::_internal_chaser() const {
  const ::ProjectJ::MatchInfo_PlayerInfo* p = _impl_.chaser_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInfo_PlayerInfo&>(
      ::ProjectJ::_MatchInfo_PlayerInfo_default_instance_);
}
inline const ::ProjectJ::MatchInfo_PlayerInfo& MatchInfo::chaser() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.chaser)
  return _internal_chaser();
}
inline void MatchInfo::unsafe_arena_set_allocated_chaser(
    ::ProjectJ::MatchInfo_PlayerInfo* chaser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chaser_);
  }
  _impl_.chaser_ = chaser;
  if (chaser) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInfo.chaser)
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::release_chaser() {
  
  ::ProjectJ::MatchInfo_PlayerInfo* temp = _impl_.chaser_;
  _impl_.chaser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::unsafe_arena_release_chaser() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInfo.chaser)
  
  ::ProjectJ::MatchInfo_PlayerInfo* temp = _impl_.chaser_;
  _impl_.chaser_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::_internal_mutable_chaser() {
  
  if (_impl_.chaser_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInfo_PlayerInfo>(GetArenaForAllocation());
    _impl_.chaser_ = p;
  }
  return _impl_.chaser_;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::mutable_chaser() {
  ::ProjectJ::MatchInfo_PlayerInfo* _msg = _internal_mutable_chaser();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.chaser)
  return _msg;
}
inline void MatchInfo::set_allocated_chaser(::ProjectJ::MatchInfo_PlayerInfo* chaser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.chaser_;
  }
  if (chaser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chaser);
    if (message_arena != submessage_arena) {
      chaser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chaser, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.chaser_ = chaser;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInfo.chaser)
}

// .ProjectJ.MatchInfo.PlayerInfo fugitive_first = 2;
inline bool MatchInfo::_internal_has_fugitive_first() const {
  return this != internal_default_instance() && _impl_.fugitive_first_ != nullptr;
}
inline bool MatchInfo::has_fugitive_first() const {
  return _internal_has_fugitive_first();
}
inline void MatchInfo::clear_fugitive_first() {
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_first_ != nullptr) {
    delete _impl_.fugitive_first_;
  }
  _impl_.fugitive_first_ = nullptr;
}
inline const ::ProjectJ::MatchInfo_PlayerInfo& MatchInfo::_internal_fugitive_first() const {
  const ::ProjectJ::MatchInfo_PlayerInfo* p = _impl_.fugitive_first_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInfo_PlayerInfo&>(
      ::ProjectJ::_MatchInfo_PlayerInfo_default_instance_);
}
inline const ::ProjectJ::MatchInfo_PlayerInfo& MatchInfo::fugitive_first() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.fugitive_first)
  return _internal_fugitive_first();
}
inline void MatchInfo::unsafe_arena_set_allocated_fugitive_first(
    ::ProjectJ::MatchInfo_PlayerInfo* fugitive_first) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fugitive_first_);
  }
  _impl_.fugitive_first_ = fugitive_first;
  if (fugitive_first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInfo.fugitive_first)
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::release_fugitive_first() {
  
  ::ProjectJ::MatchInfo_PlayerInfo* temp = _impl_.fugitive_first_;
  _impl_.fugitive_first_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::unsafe_arena_release_fugitive_first() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInfo.fugitive_first)
  
  ::ProjectJ::MatchInfo_PlayerInfo* temp = _impl_.fugitive_first_;
  _impl_.fugitive_first_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::_internal_mutable_fugitive_first() {
  
  if (_impl_.fugitive_first_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInfo_PlayerInfo>(GetArenaForAllocation());
    _impl_.fugitive_first_ = p;
  }
  return _impl_.fugitive_first_;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::mutable_fugitive_first() {
  ::ProjectJ::MatchInfo_PlayerInfo* _msg = _internal_mutable_fugitive_first();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.fugitive_first)
  return _msg;
}
inline void MatchInfo::set_allocated_fugitive_first(::ProjectJ::MatchInfo_PlayerInfo* fugitive_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fugitive_first_;
  }
  if (fugitive_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fugitive_first);
    if (message_arena != submessage_arena) {
      fugitive_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fugitive_first, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fugitive_first_ = fugitive_first;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInfo.fugitive_first)
}

// .ProjectJ.MatchInfo.PlayerInfo fugitive_second = 3;
inline bool MatchInfo::_internal_has_fugitive_second() const {
  return this != internal_default_instance() && _impl_.fugitive_second_ != nullptr;
}
inline bool MatchInfo::has_fugitive_second() const {
  return _internal_has_fugitive_second();
}
inline void MatchInfo::clear_fugitive_second() {
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_second_ != nullptr) {
    delete _impl_.fugitive_second_;
  }
  _impl_.fugitive_second_ = nullptr;
}
inline const ::ProjectJ::MatchInfo_PlayerInfo& MatchInfo::_internal_fugitive_second() const {
  const ::ProjectJ::MatchInfo_PlayerInfo* p = _impl_.fugitive_second_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInfo_PlayerInfo&>(
      ::ProjectJ::_MatchInfo_PlayerInfo_default_instance_);
}
inline const ::ProjectJ::MatchInfo_PlayerInfo& MatchInfo::fugitive_second() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.fugitive_second)
  return _internal_fugitive_second();
}
inline void MatchInfo::unsafe_arena_set_allocated_fugitive_second(
    ::ProjectJ::MatchInfo_PlayerInfo* fugitive_second) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fugitive_second_);
  }
  _impl_.fugitive_second_ = fugitive_second;
  if (fugitive_second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInfo.fugitive_second)
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::release_fugitive_second() {
  
  ::ProjectJ::MatchInfo_PlayerInfo* temp = _impl_.fugitive_second_;
  _impl_.fugitive_second_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::unsafe_arena_release_fugitive_second() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInfo.fugitive_second)
  
  ::ProjectJ::MatchInfo_PlayerInfo* temp = _impl_.fugitive_second_;
  _impl_.fugitive_second_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::_internal_mutable_fugitive_second() {
  
  if (_impl_.fugitive_second_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInfo_PlayerInfo>(GetArenaForAllocation());
    _impl_.fugitive_second_ = p;
  }
  return _impl_.fugitive_second_;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::mutable_fugitive_second() {
  ::ProjectJ::MatchInfo_PlayerInfo* _msg = _internal_mutable_fugitive_second();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.fugitive_second)
  return _msg;
}
inline void MatchInfo::set_allocated_fugitive_second(::ProjectJ::MatchInfo_PlayerInfo* fugitive_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fugitive_second_;
  }
  if (fugitive_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fugitive_second);
    if (message_arena != submessage_arena) {
      fugitive_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fugitive_second, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fugitive_second_ = fugitive_second;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInfo.fugitive_second)
}

// .ProjectJ.MatchInfo.PlayerInfo fugitive_third = 4;
inline bool MatchInfo::_internal_has_fugitive_third() const {
  return this != internal_default_instance() && _impl_.fugitive_third_ != nullptr;
}
inline bool MatchInfo::has_fugitive_third() const {
  return _internal_has_fugitive_third();
}
inline void MatchInfo::clear_fugitive_third() {
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_third_ != nullptr) {
    delete _impl_.fugitive_third_;
  }
  _impl_.fugitive_third_ = nullptr;
}
inline const ::ProjectJ::MatchInfo_PlayerInfo& MatchInfo::_internal_fugitive_third() const {
  const ::ProjectJ::MatchInfo_PlayerInfo* p = _impl_.fugitive_third_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInfo_PlayerInfo&>(
      ::ProjectJ::_MatchInfo_PlayerInfo_default_instance_);
}
inline const ::ProjectJ::MatchInfo_PlayerInfo& MatchInfo::fugitive_third() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.fugitive_third)
  return _internal_fugitive_third();
}
inline void MatchInfo::unsafe_arena_set_allocated_fugitive_third(
    ::ProjectJ::MatchInfo_PlayerInfo* fugitive_third) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.fugitive_third_);
  }
  _impl_.fugitive_third_ = fugitive_third;
  if (fugitive_third) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInfo.fugitive_third)
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::release_fugitive_third() {
  
  ::ProjectJ::MatchInfo_PlayerInfo* temp = _impl_.fugitive_third_;
  _impl_.fugitive_third_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::unsafe_arena_release_fugitive_third() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInfo.fugitive_third)
  
  ::ProjectJ::MatchInfo_PlayerInfo* temp = _impl_.fugitive_third_;
  _impl_.fugitive_third_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::_internal_mutable_fugitive_third() {
  
  if (_impl_.fugitive_third_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInfo_PlayerInfo>(GetArenaForAllocation());
    _impl_.fugitive_third_ = p;
  }
  return _impl_.fugitive_third_;
}
inline ::ProjectJ::MatchInfo_PlayerInfo* MatchInfo::mutable_fugitive_third() {
  ::ProjectJ::MatchInfo_PlayerInfo* _msg = _internal_mutable_fugitive_third();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.fugitive_third)
  return _msg;
}
inline void MatchInfo::set_allocated_fugitive_third(::ProjectJ::MatchInfo_PlayerInfo* fugitive_third) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.fugitive_third_;
  }
  if (fugitive_third) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fugitive_third);
    if (message_arena != submessage_arena) {
      fugitive_third = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fugitive_third, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.fugitive_third_ = fugitive_third;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInfo.fugitive_third)
}

// .ProjectJ.MatchInfo.ScaleInfo scale_first = 5;
inline bool MatchInfo::_internal_has_scale_first() const {
  return this != internal_default_instance() && _impl_.scale_first_ != nullptr;
}
inline bool MatchInfo::has_scale_first() const {
  return _internal_has_scale_first();
}
inline void MatchInfo::clear_scale_first() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_first_ != nullptr) {
    delete _impl_.scale_first_;
  }
  _impl_.scale_first_ = nullptr;
}
inline const ::ProjectJ::MatchInfo_ScaleInfo& MatchInfo::_internal_scale_first() const {
  const ::ProjectJ::MatchInfo_ScaleInfo* p = _impl_.scale_first_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInfo_ScaleInfo&>(
      ::ProjectJ::_MatchInfo_ScaleInfo_default_instance_);
}
inline const ::ProjectJ::MatchInfo_ScaleInfo& MatchInfo::scale_first() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.scale_first)
  return _internal_scale_first();
}
inline void MatchInfo::unsafe_arena_set_allocated_scale_first(
    ::ProjectJ::MatchInfo_ScaleInfo* scale_first) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_first_);
  }
  _impl_.scale_first_ = scale_first;
  if (scale_first) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInfo.scale_first)
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::release_scale_first() {
  
  ::ProjectJ::MatchInfo_ScaleInfo* temp = _impl_.scale_first_;
  _impl_.scale_first_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::unsafe_arena_release_scale_first() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInfo.scale_first)
  
  ::ProjectJ::MatchInfo_ScaleInfo* temp = _impl_.scale_first_;
  _impl_.scale_first_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::_internal_mutable_scale_first() {
  
  if (_impl_.scale_first_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInfo_ScaleInfo>(GetArenaForAllocation());
    _impl_.scale_first_ = p;
  }
  return _impl_.scale_first_;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::mutable_scale_first() {
  ::ProjectJ::MatchInfo_ScaleInfo* _msg = _internal_mutable_scale_first();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.scale_first)
  return _msg;
}
inline void MatchInfo::set_allocated_scale_first(::ProjectJ::MatchInfo_ScaleInfo* scale_first) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_first_;
  }
  if (scale_first) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale_first);
    if (message_arena != submessage_arena) {
      scale_first = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_first, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_first_ = scale_first;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInfo.scale_first)
}

// .ProjectJ.MatchInfo.ScaleInfo scale_second = 6;
inline bool MatchInfo::_internal_has_scale_second() const {
  return this != internal_default_instance() && _impl_.scale_second_ != nullptr;
}
inline bool MatchInfo::has_scale_second() const {
  return _internal_has_scale_second();
}
inline void MatchInfo::clear_scale_second() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_second_ != nullptr) {
    delete _impl_.scale_second_;
  }
  _impl_.scale_second_ = nullptr;
}
inline const ::ProjectJ::MatchInfo_ScaleInfo& MatchInfo::_internal_scale_second() const {
  const ::ProjectJ::MatchInfo_ScaleInfo* p = _impl_.scale_second_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInfo_ScaleInfo&>(
      ::ProjectJ::_MatchInfo_ScaleInfo_default_instance_);
}
inline const ::ProjectJ::MatchInfo_ScaleInfo& MatchInfo::scale_second() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.scale_second)
  return _internal_scale_second();
}
inline void MatchInfo::unsafe_arena_set_allocated_scale_second(
    ::ProjectJ::MatchInfo_ScaleInfo* scale_second) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_second_);
  }
  _impl_.scale_second_ = scale_second;
  if (scale_second) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInfo.scale_second)
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::release_scale_second() {
  
  ::ProjectJ::MatchInfo_ScaleInfo* temp = _impl_.scale_second_;
  _impl_.scale_second_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::unsafe_arena_release_scale_second() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInfo.scale_second)
  
  ::ProjectJ::MatchInfo_ScaleInfo* temp = _impl_.scale_second_;
  _impl_.scale_second_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::_internal_mutable_scale_second() {
  
  if (_impl_.scale_second_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInfo_ScaleInfo>(GetArenaForAllocation());
    _impl_.scale_second_ = p;
  }
  return _impl_.scale_second_;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::mutable_scale_second() {
  ::ProjectJ::MatchInfo_ScaleInfo* _msg = _internal_mutable_scale_second();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.scale_second)
  return _msg;
}
inline void MatchInfo::set_allocated_scale_second(::ProjectJ::MatchInfo_ScaleInfo* scale_second) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_second_;
  }
  if (scale_second) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale_second);
    if (message_arena != submessage_arena) {
      scale_second = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_second, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_second_ = scale_second;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInfo.scale_second)
}

// .ProjectJ.MatchInfo.ScaleInfo scale_third = 7;
inline bool MatchInfo::_internal_has_scale_third() const {
  return this != internal_default_instance() && _impl_.scale_third_ != nullptr;
}
inline bool MatchInfo::has_scale_third() const {
  return _internal_has_scale_third();
}
inline void MatchInfo::clear_scale_third() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_third_ != nullptr) {
    delete _impl_.scale_third_;
  }
  _impl_.scale_third_ = nullptr;
}
inline const ::ProjectJ::MatchInfo_ScaleInfo& MatchInfo::_internal_scale_third() const {
  const ::ProjectJ::MatchInfo_ScaleInfo* p = _impl_.scale_third_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInfo_ScaleInfo&>(
      ::ProjectJ::_MatchInfo_ScaleInfo_default_instance_);
}
inline const ::ProjectJ::MatchInfo_ScaleInfo& MatchInfo::scale_third() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.scale_third)
  return _internal_scale_third();
}
inline void MatchInfo::unsafe_arena_set_allocated_scale_third(
    ::ProjectJ::MatchInfo_ScaleInfo* scale_third) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_third_);
  }
  _impl_.scale_third_ = scale_third;
  if (scale_third) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInfo.scale_third)
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::release_scale_third() {
  
  ::ProjectJ::MatchInfo_ScaleInfo* temp = _impl_.scale_third_;
  _impl_.scale_third_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::unsafe_arena_release_scale_third() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInfo.scale_third)
  
  ::ProjectJ::MatchInfo_ScaleInfo* temp = _impl_.scale_third_;
  _impl_.scale_third_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::_internal_mutable_scale_third() {
  
  if (_impl_.scale_third_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInfo_ScaleInfo>(GetArenaForAllocation());
    _impl_.scale_third_ = p;
  }
  return _impl_.scale_third_;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::mutable_scale_third() {
  ::ProjectJ::MatchInfo_ScaleInfo* _msg = _internal_mutable_scale_third();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.scale_third)
  return _msg;
}
inline void MatchInfo::set_allocated_scale_third(::ProjectJ::MatchInfo_ScaleInfo* scale_third) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_third_;
  }
  if (scale_third) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale_third);
    if (message_arena != submessage_arena) {
      scale_third = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_third, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_third_ = scale_third;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInfo.scale_third)
}

// .ProjectJ.MatchInfo.ScaleInfo scale_fourth = 8;
inline bool MatchInfo::_internal_has_scale_fourth() const {
  return this != internal_default_instance() && _impl_.scale_fourth_ != nullptr;
}
inline bool MatchInfo::has_scale_fourth() const {
  return _internal_has_scale_fourth();
}
inline void MatchInfo::clear_scale_fourth() {
  if (GetArenaForAllocation() == nullptr && _impl_.scale_fourth_ != nullptr) {
    delete _impl_.scale_fourth_;
  }
  _impl_.scale_fourth_ = nullptr;
}
inline const ::ProjectJ::MatchInfo_ScaleInfo& MatchInfo::_internal_scale_fourth() const {
  const ::ProjectJ::MatchInfo_ScaleInfo* p = _impl_.scale_fourth_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::MatchInfo_ScaleInfo&>(
      ::ProjectJ::_MatchInfo_ScaleInfo_default_instance_);
}
inline const ::ProjectJ::MatchInfo_ScaleInfo& MatchInfo::scale_fourth() const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.scale_fourth)
  return _internal_scale_fourth();
}
inline void MatchInfo::unsafe_arena_set_allocated_scale_fourth(
    ::ProjectJ::MatchInfo_ScaleInfo* scale_fourth) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_fourth_);
  }
  _impl_.scale_fourth_ = scale_fourth;
  if (scale_fourth) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.MatchInfo.scale_fourth)
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::release_scale_fourth() {
  
  ::ProjectJ::MatchInfo_ScaleInfo* temp = _impl_.scale_fourth_;
  _impl_.scale_fourth_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::unsafe_arena_release_scale_fourth() {
  // @@protoc_insertion_point(field_release:ProjectJ.MatchInfo.scale_fourth)
  
  ::ProjectJ::MatchInfo_ScaleInfo* temp = _impl_.scale_fourth_;
  _impl_.scale_fourth_ = nullptr;
  return temp;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::_internal_mutable_scale_fourth() {
  
  if (_impl_.scale_fourth_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::MatchInfo_ScaleInfo>(GetArenaForAllocation());
    _impl_.scale_fourth_ = p;
  }
  return _impl_.scale_fourth_;
}
inline ::ProjectJ::MatchInfo_ScaleInfo* MatchInfo::mutable_scale_fourth() {
  ::ProjectJ::MatchInfo_ScaleInfo* _msg = _internal_mutable_scale_fourth();
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.scale_fourth)
  return _msg;
}
inline void MatchInfo::set_allocated_scale_fourth(::ProjectJ::MatchInfo_ScaleInfo* scale_fourth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scale_fourth_;
  }
  if (scale_fourth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scale_fourth);
    if (message_arena != submessage_arena) {
      scale_fourth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale_fourth, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.scale_fourth_ = scale_fourth;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.MatchInfo.scale_fourth)
}

// repeated .ProjectJ.Item items = 9;
inline int MatchInfo::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int MatchInfo::items_size() const {
  return _internal_items_size();
}
inline void MatchInfo::clear_items() {
  _impl_.items_.Clear();
}
inline ::ProjectJ::Item* MatchInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ProjectJ.MatchInfo.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >*
MatchInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ProjectJ.MatchInfo.items)
  return &_impl_.items_;
}
inline const ::ProjectJ::Item& MatchInfo::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::ProjectJ::Item& MatchInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:ProjectJ.MatchInfo.items)
  return _internal_items(index);
}
inline ::ProjectJ::Item* MatchInfo::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::ProjectJ::Item* MatchInfo::add_items() {
  ::ProjectJ::Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:ProjectJ.MatchInfo.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >&
MatchInfo::items() const {
  // @@protoc_insertion_point(field_list:ProjectJ.MatchInfo.items)
  return _impl_.items_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProjectJ

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
