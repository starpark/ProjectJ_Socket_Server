// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#include "Struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ProjectJ {
PROTOBUF_CONSTEXPR Vector::Vector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VectorDefaultTypeInternal() {}
  union {
    Vector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VectorDefaultTypeInternal _Vector_default_instance_;
PROTOBUF_CONSTEXPR Rotator::Rotator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RotatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotatorDefaultTypeInternal() {}
  union {
    Rotator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotatorDefaultTypeInternal _Rotator_default_instance_;
PROTOBUF_CONSTEXPR Room::Room(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.number_of_player_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomDefaultTypeInternal() {}
  union {
    Room _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomDefaultTypeInternal _Room_default_instance_;
PROTOBUF_CONSTEXPR Player::Player(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerDefaultTypeInternal() {}
  union {
    Player _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerDefaultTypeInternal _Player_default_instance_;
PROTOBUF_CONSTEXPR RoomInfo_PlayerSlot::RoomInfo_PlayerSlot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.is_ready_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomInfo_PlayerSlotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomInfo_PlayerSlotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomInfo_PlayerSlotDefaultTypeInternal() {}
  union {
    RoomInfo_PlayerSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomInfo_PlayerSlotDefaultTypeInternal _RoomInfo_PlayerSlot_default_instance_;
PROTOBUF_CONSTEXPR RoomInfo::RoomInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chaser_)*/nullptr
  , /*decltype(_impl_.fugitive_first_)*/nullptr
  , /*decltype(_impl_.fugitive_second_)*/nullptr
  , /*decltype(_impl_.fugitive_third_)*/nullptr
  , /*decltype(_impl_.room_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomInfoDefaultTypeInternal() {}
  union {
    RoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
PROTOBUF_CONSTEXPR Item::Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.world_position_)*/nullptr
  , /*decltype(_impl_.world_rotation_)*/nullptr
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.row_)*/0
  , /*decltype(_impl_.colunm_)*/0
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_.is_owned_)*/false
  , /*decltype(_impl_.is_rotated_)*/false
  , /*decltype(_impl_.onwer_player_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {
    Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDefaultTypeInternal _Item_default_instance_;
PROTOBUF_CONSTEXPR PlayerInitInfo::PlayerInitInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.player_index_)*/0
  , /*decltype(_impl_.inv_size_row_)*/0
  , /*decltype(_impl_.inv_size_colunm_)*/0
  , /*decltype(_impl_.inv_max_weight_)*/0
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInitInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInitInfoDefaultTypeInternal() {}
  union {
    PlayerInitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInitInfoDefaultTypeInternal _PlayerInitInfo_default_instance_;
PROTOBUF_CONSTEXPR ScaleInitInfo::ScaleInitInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.operating_weight_)*/0
  , /*decltype(_impl_.tolerance_)*/0
  , /*decltype(_impl_.inv_size_row_)*/0
  , /*decltype(_impl_.inv_size_colunm_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScaleInitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScaleInitInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScaleInitInfoDefaultTypeInternal() {}
  union {
    ScaleInitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScaleInitInfoDefaultTypeInternal _ScaleInitInfo_default_instance_;
PROTOBUF_CONSTEXPR MatchInitInfo::MatchInitInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chaser_)*/nullptr
  , /*decltype(_impl_.fugitive_first_)*/nullptr
  , /*decltype(_impl_.fugitive_second_)*/nullptr
  , /*decltype(_impl_.fugitive_third_)*/nullptr
  , /*decltype(_impl_.scale_first_)*/nullptr
  , /*decltype(_impl_.scale_second_)*/nullptr
  , /*decltype(_impl_.scale_third_)*/nullptr
  , /*decltype(_impl_.scale_fourth_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchInitInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchInitInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchInitInfoDefaultTypeInternal() {}
  union {
    MatchInitInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchInitInfoDefaultTypeInternal _MatchInitInfo_default_instance_;
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.rotation_)*/nullptr
  , /*decltype(_impl_.velocity_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.player_index_)*/0
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR MatchInfo::MatchInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chaser_)*/nullptr
  , /*decltype(_impl_.fugitive_first_)*/nullptr
  , /*decltype(_impl_.fugitive_second_)*/nullptr
  , /*decltype(_impl_.fugitive_third_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatchInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatchInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatchInfoDefaultTypeInternal() {}
  union {
    MatchInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatchInfoDefaultTypeInternal _MatchInfo_default_instance_;
}  // namespace ProjectJ
static ::_pb::Metadata file_level_metadata_Struct_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Struct_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Struct_2eproto = nullptr;

const uint32_t TableStruct_Struct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Vector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Vector, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Vector, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Vector, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Rotator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Rotator, _impl_.roll_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Rotator, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Rotator, _impl_.yaw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Room, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Room, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Room, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Room, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Room, _impl_.number_of_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Player, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Player, _impl_.nickname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::RoomInfo_PlayerSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::RoomInfo_PlayerSlot, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::RoomInfo_PlayerSlot, _impl_.is_ready_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::RoomInfo, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::RoomInfo, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::RoomInfo, _impl_.chaser_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::RoomInfo, _impl_.fugitive_first_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::RoomInfo, _impl_.fugitive_second_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::RoomInfo, _impl_.fugitive_third_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Item, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Item, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Item, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Item, _impl_.colunm_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Item, _impl_.weight_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Item, _impl_.is_owned_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Item, _impl_.world_position_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Item, _impl_.world_rotation_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Item, _impl_.onwer_player_index_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::Item, _impl_.is_rotated_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInitInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInitInfo, _impl_.player_index_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInitInfo, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInitInfo, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInitInfo, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInitInfo, _impl_.inv_size_row_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInitInfo, _impl_.inv_size_colunm_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInitInfo, _impl_.inv_max_weight_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInitInfo, _impl_.move_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::ScaleInitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::ScaleInitInfo, _impl_.operating_weight_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::ScaleInitInfo, _impl_.tolerance_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::ScaleInitInfo, _impl_.inv_size_row_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::ScaleInitInfo, _impl_.inv_size_colunm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInitInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInitInfo, _impl_.chaser_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInitInfo, _impl_.fugitive_first_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInitInfo, _impl_.fugitive_second_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInitInfo, _impl_.fugitive_third_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInitInfo, _impl_.scale_first_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInitInfo, _impl_.scale_second_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInitInfo, _impl_.scale_third_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInitInfo, _impl_.scale_fourth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInfo, _impl_.player_index_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInfo, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInfo, _impl_.rotation_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInfo, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::PlayerInfo, _impl_.move_speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInfo, _impl_.chaser_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInfo, _impl_.fugitive_first_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInfo, _impl_.fugitive_second_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::MatchInfo, _impl_.fugitive_third_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ProjectJ::Vector)},
  { 9, -1, -1, sizeof(::ProjectJ::Rotator)},
  { 18, -1, -1, sizeof(::ProjectJ::Room)},
  { 28, -1, -1, sizeof(::ProjectJ::Player)},
  { 36, -1, -1, sizeof(::ProjectJ::RoomInfo_PlayerSlot)},
  { 44, -1, -1, sizeof(::ProjectJ::RoomInfo)},
  { 56, -1, -1, sizeof(::ProjectJ::Item)},
  { 72, -1, -1, sizeof(::ProjectJ::PlayerInitInfo)},
  { 87, -1, -1, sizeof(::ProjectJ::ScaleInitInfo)},
  { 97, -1, -1, sizeof(::ProjectJ::MatchInitInfo)},
  { 111, -1, -1, sizeof(::ProjectJ::PlayerInfo)},
  { 123, -1, -1, sizeof(::ProjectJ::MatchInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ProjectJ::_Vector_default_instance_._instance,
  &::ProjectJ::_Rotator_default_instance_._instance,
  &::ProjectJ::_Room_default_instance_._instance,
  &::ProjectJ::_Player_default_instance_._instance,
  &::ProjectJ::_RoomInfo_PlayerSlot_default_instance_._instance,
  &::ProjectJ::_RoomInfo_default_instance_._instance,
  &::ProjectJ::_Item_default_instance_._instance,
  &::ProjectJ::_PlayerInitInfo_default_instance_._instance,
  &::ProjectJ::_ScaleInitInfo_default_instance_._instance,
  &::ProjectJ::_MatchInitInfo_default_instance_._instance,
  &::ProjectJ::_PlayerInfo_default_instance_._instance,
  &::ProjectJ::_MatchInfo_default_instance_._instance,
};

const char descriptor_table_protodef_Struct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Struct.proto\022\010ProjectJ\032\nEnum.proto\")\n\006"
  "Vector\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\""
  "3\n\007Rotator\022\014\n\004roll\030\001 \001(\002\022\r\n\005pitch\030\002 \001(\002\022"
  "\013\n\003yaw\030\003 \001(\002\"_\n\004Room\022\n\n\002id\030\001 \001(\005\022\r\n\005titl"
  "e\030\002 \001(\t\022\"\n\005state\030\003 \001(\0162\023.ProjectJ.RoomSt"
  "ate\022\030\n\020number_of_player\030\004 \001(\005\".\n\006Player\022"
  "\022\n\naccount_id\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\"\301\002"
  "\n\010RoomInfo\022\017\n\007room_id\030\001 \001(\005\022\r\n\005title\030\002 \001"
  "(\t\022-\n\006chaser\030\003 \001(\0132\035.ProjectJ.RoomInfo.P"
  "layerSlot\0225\n\016fugitive_first\030\004 \001(\0132\035.Proj"
  "ectJ.RoomInfo.PlayerSlot\0226\n\017fugitive_sec"
  "ond\030\005 \001(\0132\035.ProjectJ.RoomInfo.PlayerSlot"
  "\0225\n\016fugitive_third\030\006 \001(\0132\035.ProjectJ.Room"
  "Info.PlayerSlot\032@\n\nPlayerSlot\022 \n\006player\030"
  "\002 \001(\0132\020.ProjectJ.Player\022\020\n\010is_ready\030\003 \001("
  "\010\"\345\001\n\004Item\022\n\n\002id\030\001 \001(\005\022\r\n\005index\030\002 \001(\005\022\013\n"
  "\003row\030\003 \001(\005\022\016\n\006colunm\030\004 \001(\005\022\016\n\006weight\030\005 \001"
  "(\005\022\020\n\010is_owned\030\006 \001(\010\022(\n\016world_position\030\007"
  " \001(\0132\020.ProjectJ.Vector\022)\n\016world_rotation"
  "\030\010 \001(\0132\021.ProjectJ.Rotator\022\032\n\022onwer_playe"
  "r_index\030\t \001(\005\022\022\n\nis_rotated\030\n \001(\010\"\227\002\n\016Pl"
  "ayerInitInfo\022)\n\005state\030\001 \001(\0162\032.ProjectJ.M"
  "atchPlayerState\022\024\n\014player_index\030\002 \001(\005\022 \n"
  "\006player\030\003 \001(\0132\020.ProjectJ.Player\022\"\n\010posit"
  "ion\030\004 \001(\0132\020.ProjectJ.Vector\022#\n\010rotation\030"
  "\005 \001(\0132\021.ProjectJ.Rotator\022\024\n\014inv_size_row"
  "\030\006 \001(\005\022\027\n\017inv_size_colunm\030\007 \001(\005\022\026\n\016inv_m"
  "ax_weight\030\010 \001(\005\022\022\n\nmove_speed\030\t \001(\002\"k\n\rS"
  "caleInitInfo\022\030\n\020operating_weight\030\001 \001(\005\022\021"
  "\n\ttolerance\030\002 \001(\005\022\024\n\014inv_size_row\030\003 \001(\005\022"
  "\027\n\017inv_size_colunm\030\004 \001(\005\"\212\003\n\rMatchInitIn"
  "fo\022(\n\006chaser\030\001 \001(\0132\030.ProjectJ.PlayerInit"
  "Info\0220\n\016fugitive_first\030\002 \001(\0132\030.ProjectJ."
  "PlayerInitInfo\0221\n\017fugitive_second\030\003 \001(\0132"
  "\030.ProjectJ.PlayerInitInfo\0220\n\016fugitive_th"
  "ird\030\004 \001(\0132\030.ProjectJ.PlayerInitInfo\022,\n\013s"
  "cale_first\030\005 \001(\0132\027.ProjectJ.ScaleInitInf"
  "o\022-\n\014scale_second\030\006 \001(\0132\027.ProjectJ.Scale"
  "InitInfo\022,\n\013scale_third\030\007 \001(\0132\027.ProjectJ"
  ".ScaleInitInfo\022-\n\014scale_fourth\030\010 \001(\0132\027.P"
  "rojectJ.ScaleInitInfo\"\316\001\n\nPlayerInfo\022)\n\005"
  "state\030\001 \001(\0162\032.ProjectJ.MatchPlayerState\022"
  "\024\n\014player_index\030\002 \001(\005\022\"\n\010position\030\003 \001(\0132"
  "\020.ProjectJ.Vector\022#\n\010rotation\030\004 \001(\0132\021.Pr"
  "ojectJ.Rotator\022\"\n\010velocity\030\005 \001(\0132\020.Proje"
  "ctJ.Vector\022\022\n\nmove_speed\030\006 \001(\002\"\274\001\n\tMatch"
  "Info\022$\n\006chaser\030\001 \001(\0132\024.ProjectJ.PlayerIn"
  "fo\022,\n\016fugitive_first\030\002 \001(\0132\024.ProjectJ.Pl"
  "ayerInfo\022-\n\017fugitive_second\030\003 \001(\0132\024.Proj"
  "ectJ.PlayerInfo\022,\n\016fugitive_third\030\004 \001(\0132"
  "\024.ProjectJ.PlayerInfob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Struct_2eproto_deps[1] = {
  &::descriptor_table_Enum_2eproto,
};
static ::_pbi::once_flag descriptor_table_Struct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Struct_2eproto = {
    false, false, 2029, descriptor_table_protodef_Struct_2eproto,
    "Struct.proto",
    &descriptor_table_Struct_2eproto_once, descriptor_table_Struct_2eproto_deps, 1, 12,
    schemas, file_default_instances, TableStruct_Struct_2eproto::offsets,
    file_level_metadata_Struct_2eproto, file_level_enum_descriptors_Struct_2eproto,
    file_level_service_descriptors_Struct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Struct_2eproto_getter() {
  return &descriptor_table_Struct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Struct_2eproto(&descriptor_table_Struct_2eproto);
namespace ProjectJ {

// ===================================================================

class Vector::_Internal {
 public:
};

Vector::Vector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.Vector)
}
Vector::Vector(const Vector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Vector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:ProjectJ.Vector)
}

inline void Vector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:ProjectJ.Vector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Vector::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.Vector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.Vector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.Vector)
  return target;
}

size_t Vector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.Vector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Vector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector::GetClassData() const { return &_class_data_; }


void Vector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Vector*>(&to_msg);
  auto& from = static_cast<const Vector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.Vector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector::CopyFrom(const Vector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.Vector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  return true;
}

void Vector::InternalSwap(Vector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector, _impl_.z_)
      + sizeof(Vector::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(Vector, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[0]);
}

// ===================================================================

class Rotator::_Internal {
 public:
};

Rotator::Rotator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.Rotator)
}
Rotator::Rotator(const Rotator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rotator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roll_, &from._impl_.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_) -
    reinterpret_cast<char*>(&_impl_.roll_)) + sizeof(_impl_.yaw_));
  // @@protoc_insertion_point(copy_constructor:ProjectJ.Rotator)
}

inline void Rotator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rotator::~Rotator() {
  // @@protoc_insertion_point(destructor:ProjectJ.Rotator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rotator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rotator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rotator::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.Rotator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.roll_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rotator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float roll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rotator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.Rotator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float roll = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_roll(), target);
  }

  // float pitch = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.Rotator)
  return target;
}

size_t Rotator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.Rotator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float roll = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  // float pitch = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rotator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rotator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rotator::GetClassData() const { return &_class_data_; }


void Rotator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rotator*>(&to_msg);
  auto& from = static_cast<const Rotator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.Rotator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rotator::CopyFrom(const Rotator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.Rotator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rotator::IsInitialized() const {
  return true;
}

void Rotator::InternalSwap(Rotator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rotator, _impl_.yaw_)
      + sizeof(Rotator::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(Rotator, _impl_.roll_)>(
          reinterpret_cast<char*>(&_impl_.roll_),
          reinterpret_cast<char*>(&other->_impl_.roll_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rotator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[1]);
}

// ===================================================================

class Room::_Internal {
 public:
};

Room::Room(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.Room)
}
Room::Room(const Room& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Room* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.number_of_player_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.number_of_player_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.number_of_player_));
  // @@protoc_insertion_point(copy_constructor:ProjectJ.Room)
}

inline void Room::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.number_of_player_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Room::~Room() {
  // @@protoc_insertion_point(destructor:ProjectJ.Room)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Room::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
}

void Room::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Room::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.Room)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.number_of_player_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.number_of_player_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Room::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProjectJ.Room.title"));
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.RoomState state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::ProjectJ::RoomState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 number_of_player = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.number_of_player_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Room::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.Room)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProjectJ.Room.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // .ProjectJ.RoomState state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // int32 number_of_player = 4;
  if (this->_internal_number_of_player() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_number_of_player(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.Room)
  return target;
}

size_t Room::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.Room)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .ProjectJ.RoomState state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 number_of_player = 4;
  if (this->_internal_number_of_player() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_player());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Room::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Room::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Room::GetClassData() const { return &_class_data_; }


void Room::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Room*>(&to_msg);
  auto& from = static_cast<const Room&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.Room)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_number_of_player() != 0) {
    _this->_internal_set_number_of_player(from._internal_number_of_player());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Room::CopyFrom(const Room& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.Room)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Room::IsInitialized() const {
  return true;
}

void Room::InternalSwap(Room* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Room, _impl_.number_of_player_)
      + sizeof(Room::_impl_.number_of_player_)
      - PROTOBUF_FIELD_OFFSET(Room, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Room::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[2]);
}

// ===================================================================

class Player::_Internal {
 public:
};

Player::Player(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Player* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:ProjectJ.Player)
}

inline void Player::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.account_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:ProjectJ.Player)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Player::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
}

void Player::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.Player)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.account_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProjectJ.Player.nickname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.Player)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_account_id(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProjectJ.Player.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.Player)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // int32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Player::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player::GetClassData() const { return &_class_data_; }


void Player::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Player*>(&to_msg);
  auto& from = static_cast<const Player&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.Player)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[3]);
}

// ===================================================================

class RoomInfo_PlayerSlot::_Internal {
 public:
  static const ::ProjectJ::Player& player(const RoomInfo_PlayerSlot* msg);
};

const ::ProjectJ::Player&
RoomInfo_PlayerSlot::_Internal::player(const RoomInfo_PlayerSlot* msg) {
  return *msg->_impl_.player_;
}
RoomInfo_PlayerSlot::RoomInfo_PlayerSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.RoomInfo.PlayerSlot)
}
RoomInfo_PlayerSlot::RoomInfo_PlayerSlot(const RoomInfo_PlayerSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomInfo_PlayerSlot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.is_ready_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::ProjectJ::Player(*from._impl_.player_);
  }
  _this->_impl_.is_ready_ = from._impl_.is_ready_;
  // @@protoc_insertion_point(copy_constructor:ProjectJ.RoomInfo.PlayerSlot)
}

inline void RoomInfo_PlayerSlot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.is_ready_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomInfo_PlayerSlot::~RoomInfo_PlayerSlot() {
  // @@protoc_insertion_point(destructor:ProjectJ.RoomInfo.PlayerSlot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomInfo_PlayerSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
}

void RoomInfo_PlayerSlot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomInfo_PlayerSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.RoomInfo.PlayerSlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.is_ready_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfo_PlayerSlot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ProjectJ.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_ready = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_ready_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomInfo_PlayerSlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.RoomInfo.PlayerSlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProjectJ.Player player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // bool is_ready = 3;
  if (this->_internal_is_ready() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_ready(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.RoomInfo.PlayerSlot)
  return target;
}

size_t RoomInfo_PlayerSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.RoomInfo.PlayerSlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProjectJ.Player player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // bool is_ready = 3;
  if (this->_internal_is_ready() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomInfo_PlayerSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomInfo_PlayerSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomInfo_PlayerSlot::GetClassData() const { return &_class_data_; }


void RoomInfo_PlayerSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomInfo_PlayerSlot*>(&to_msg);
  auto& from = static_cast<const RoomInfo_PlayerSlot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.RoomInfo.PlayerSlot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::ProjectJ::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_is_ready() != 0) {
    _this->_internal_set_is_ready(from._internal_is_ready());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomInfo_PlayerSlot::CopyFrom(const RoomInfo_PlayerSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.RoomInfo.PlayerSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo_PlayerSlot::IsInitialized() const {
  return true;
}

void RoomInfo_PlayerSlot::InternalSwap(RoomInfo_PlayerSlot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomInfo_PlayerSlot, _impl_.is_ready_)
      + sizeof(RoomInfo_PlayerSlot::_impl_.is_ready_)
      - PROTOBUF_FIELD_OFFSET(RoomInfo_PlayerSlot, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfo_PlayerSlot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[4]);
}

// ===================================================================

class RoomInfo::_Internal {
 public:
  static const ::ProjectJ::RoomInfo_PlayerSlot& chaser(const RoomInfo* msg);
  static const ::ProjectJ::RoomInfo_PlayerSlot& fugitive_first(const RoomInfo* msg);
  static const ::ProjectJ::RoomInfo_PlayerSlot& fugitive_second(const RoomInfo* msg);
  static const ::ProjectJ::RoomInfo_PlayerSlot& fugitive_third(const RoomInfo* msg);
};

const ::ProjectJ::RoomInfo_PlayerSlot&
RoomInfo::_Internal::chaser(const RoomInfo* msg) {
  return *msg->_impl_.chaser_;
}
const ::ProjectJ::RoomInfo_PlayerSlot&
RoomInfo::_Internal::fugitive_first(const RoomInfo* msg) {
  return *msg->_impl_.fugitive_first_;
}
const ::ProjectJ::RoomInfo_PlayerSlot&
RoomInfo::_Internal::fugitive_second(const RoomInfo* msg) {
  return *msg->_impl_.fugitive_second_;
}
const ::ProjectJ::RoomInfo_PlayerSlot&
RoomInfo::_Internal::fugitive_third(const RoomInfo* msg) {
  return *msg->_impl_.fugitive_third_;
}
RoomInfo::RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.chaser_){nullptr}
    , decltype(_impl_.fugitive_first_){nullptr}
    , decltype(_impl_.fugitive_second_){nullptr}
    , decltype(_impl_.fugitive_third_){nullptr}
    , decltype(_impl_.room_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_chaser()) {
    _this->_impl_.chaser_ = new ::ProjectJ::RoomInfo_PlayerSlot(*from._impl_.chaser_);
  }
  if (from._internal_has_fugitive_first()) {
    _this->_impl_.fugitive_first_ = new ::ProjectJ::RoomInfo_PlayerSlot(*from._impl_.fugitive_first_);
  }
  if (from._internal_has_fugitive_second()) {
    _this->_impl_.fugitive_second_ = new ::ProjectJ::RoomInfo_PlayerSlot(*from._impl_.fugitive_second_);
  }
  if (from._internal_has_fugitive_third()) {
    _this->_impl_.fugitive_third_ = new ::ProjectJ::RoomInfo_PlayerSlot(*from._impl_.fugitive_third_);
  }
  _this->_impl_.room_id_ = from._impl_.room_id_;
  // @@protoc_insertion_point(copy_constructor:ProjectJ.RoomInfo)
}

inline void RoomInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.title_){}
    , decltype(_impl_.chaser_){nullptr}
    , decltype(_impl_.fugitive_first_){nullptr}
    , decltype(_impl_.fugitive_second_){nullptr}
    , decltype(_impl_.fugitive_third_){nullptr}
    , decltype(_impl_.room_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:ProjectJ.RoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.title_.Destroy();
  if (this != internal_default_instance()) delete _impl_.chaser_;
  if (this != internal_default_instance()) delete _impl_.fugitive_first_;
  if (this != internal_default_instance()) delete _impl_.fugitive_second_;
  if (this != internal_default_instance()) delete _impl_.fugitive_third_;
}

void RoomInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.RoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.title_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.chaser_ != nullptr) {
    delete _impl_.chaser_;
  }
  _impl_.chaser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_first_ != nullptr) {
    delete _impl_.fugitive_first_;
  }
  _impl_.fugitive_first_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_second_ != nullptr) {
    delete _impl_.fugitive_second_;
  }
  _impl_.fugitive_second_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_third_ != nullptr) {
    delete _impl_.fugitive_third_;
  }
  _impl_.fugitive_third_ = nullptr;
  _impl_.room_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.room_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProjectJ.RoomInfo.title"));
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.RoomInfo.PlayerSlot chaser = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chaser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.RoomInfo.PlayerSlot fugitive_first = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fugitive_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.RoomInfo.PlayerSlot fugitive_second = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_fugitive_second(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.RoomInfo.PlayerSlot fugitive_third = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fugitive_third(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.RoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_room_id(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProjectJ.RoomInfo.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // .ProjectJ.RoomInfo.PlayerSlot chaser = 3;
  if (this->_internal_has_chaser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::chaser(this),
        _Internal::chaser(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.RoomInfo.PlayerSlot fugitive_first = 4;
  if (this->_internal_has_fugitive_first()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fugitive_first(this),
        _Internal::fugitive_first(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.RoomInfo.PlayerSlot fugitive_second = 5;
  if (this->_internal_has_fugitive_second()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::fugitive_second(this),
        _Internal::fugitive_second(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.RoomInfo.PlayerSlot fugitive_third = 6;
  if (this->_internal_has_fugitive_third()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::fugitive_third(this),
        _Internal::fugitive_third(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.RoomInfo)
  return target;
}

size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.RoomInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .ProjectJ.RoomInfo.PlayerSlot chaser = 3;
  if (this->_internal_has_chaser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chaser_);
  }

  // .ProjectJ.RoomInfo.PlayerSlot fugitive_first = 4;
  if (this->_internal_has_fugitive_first()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fugitive_first_);
  }

  // .ProjectJ.RoomInfo.PlayerSlot fugitive_second = 5;
  if (this->_internal_has_fugitive_second()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fugitive_second_);
  }

  // .ProjectJ.RoomInfo.PlayerSlot fugitive_third = 6;
  if (this->_internal_has_fugitive_third()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fugitive_third_);
  }

  // int32 room_id = 1;
  if (this->_internal_room_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_room_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomInfo::GetClassData() const { return &_class_data_; }


void RoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomInfo*>(&to_msg);
  auto& from = static_cast<const RoomInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.RoomInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_has_chaser()) {
    _this->_internal_mutable_chaser()->::ProjectJ::RoomInfo_PlayerSlot::MergeFrom(
        from._internal_chaser());
  }
  if (from._internal_has_fugitive_first()) {
    _this->_internal_mutable_fugitive_first()->::ProjectJ::RoomInfo_PlayerSlot::MergeFrom(
        from._internal_fugitive_first());
  }
  if (from._internal_has_fugitive_second()) {
    _this->_internal_mutable_fugitive_second()->::ProjectJ::RoomInfo_PlayerSlot::MergeFrom(
        from._internal_fugitive_second());
  }
  if (from._internal_has_fugitive_third()) {
    _this->_internal_mutable_fugitive_third()->::ProjectJ::RoomInfo_PlayerSlot::MergeFrom(
        from._internal_fugitive_third());
  }
  if (from._internal_room_id() != 0) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  return true;
}

void RoomInfo::InternalSwap(RoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.room_id_)
      + sizeof(RoomInfo::_impl_.room_id_)
      - PROTOBUF_FIELD_OFFSET(RoomInfo, _impl_.chaser_)>(
          reinterpret_cast<char*>(&_impl_.chaser_),
          reinterpret_cast<char*>(&other->_impl_.chaser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[5]);
}

// ===================================================================

class Item::_Internal {
 public:
  static const ::ProjectJ::Vector& world_position(const Item* msg);
  static const ::ProjectJ::Rotator& world_rotation(const Item* msg);
};

const ::ProjectJ::Vector&
Item::_Internal::world_position(const Item* msg) {
  return *msg->_impl_.world_position_;
}
const ::ProjectJ::Rotator&
Item::_Internal::world_rotation(const Item* msg) {
  return *msg->_impl_.world_rotation_;
}
Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.world_position_){nullptr}
    , decltype(_impl_.world_rotation_){nullptr}
    , decltype(_impl_.id_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.row_){}
    , decltype(_impl_.colunm_){}
    , decltype(_impl_.weight_){}
    , decltype(_impl_.is_owned_){}
    , decltype(_impl_.is_rotated_){}
    , decltype(_impl_.onwer_player_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_position()) {
    _this->_impl_.world_position_ = new ::ProjectJ::Vector(*from._impl_.world_position_);
  }
  if (from._internal_has_world_rotation()) {
    _this->_impl_.world_rotation_ = new ::ProjectJ::Rotator(*from._impl_.world_rotation_);
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.onwer_player_index_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.onwer_player_index_));
  // @@protoc_insertion_point(copy_constructor:ProjectJ.Item)
}

inline void Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.world_position_){nullptr}
    , decltype(_impl_.world_rotation_){nullptr}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.row_){0}
    , decltype(_impl_.colunm_){0}
    , decltype(_impl_.weight_){0}
    , decltype(_impl_.is_owned_){false}
    , decltype(_impl_.is_rotated_){false}
    , decltype(_impl_.onwer_player_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:ProjectJ.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.world_position_;
  if (this != internal_default_instance()) delete _impl_.world_rotation_;
}

void Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.world_position_ != nullptr) {
    delete _impl_.world_position_;
  }
  _impl_.world_position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.world_rotation_ != nullptr) {
    delete _impl_.world_rotation_;
  }
  _impl_.world_rotation_ = nullptr;
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.onwer_player_index_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.onwer_player_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 colunm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.colunm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 weight = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_owned = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_owned_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.Vector world_position = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.Rotator world_rotation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 onwer_player_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.onwer_player_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_rotated = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.is_rotated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_index(), target);
  }

  // int32 row = 3;
  if (this->_internal_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_row(), target);
  }

  // int32 colunm = 4;
  if (this->_internal_colunm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_colunm(), target);
  }

  // int32 weight = 5;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_weight(), target);
  }

  // bool is_owned = 6;
  if (this->_internal_is_owned() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_owned(), target);
  }

  // .ProjectJ.Vector world_position = 7;
  if (this->_internal_has_world_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::world_position(this),
        _Internal::world_position(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.Rotator world_rotation = 8;
  if (this->_internal_has_world_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::world_rotation(this),
        _Internal::world_rotation(this).GetCachedSize(), target, stream);
  }

  // int32 onwer_player_index = 9;
  if (this->_internal_onwer_player_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_onwer_player_index(), target);
  }

  // bool is_rotated = 10;
  if (this->_internal_is_rotated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_is_rotated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProjectJ.Vector world_position = 7;
  if (this->_internal_has_world_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.world_position_);
  }

  // .ProjectJ.Rotator world_rotation = 8;
  if (this->_internal_has_world_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.world_rotation_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // int32 index = 2;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 row = 3;
  if (this->_internal_row() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_row());
  }

  // int32 colunm = 4;
  if (this->_internal_colunm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_colunm());
  }

  // int32 weight = 5;
  if (this->_internal_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_weight());
  }

  // bool is_owned = 6;
  if (this->_internal_is_owned() != 0) {
    total_size += 1 + 1;
  }

  // bool is_rotated = 10;
  if (this->_internal_is_rotated() != 0) {
    total_size += 1 + 1;
  }

  // int32 onwer_player_index = 9;
  if (this->_internal_onwer_player_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_onwer_player_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }


void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Item*>(&to_msg);
  auto& from = static_cast<const Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_world_position()) {
    _this->_internal_mutable_world_position()->::ProjectJ::Vector::MergeFrom(
        from._internal_world_position());
  }
  if (from._internal_has_world_rotation()) {
    _this->_internal_mutable_world_rotation()->::ProjectJ::Rotator::MergeFrom(
        from._internal_world_rotation());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_row() != 0) {
    _this->_internal_set_row(from._internal_row());
  }
  if (from._internal_colunm() != 0) {
    _this->_internal_set_colunm(from._internal_colunm());
  }
  if (from._internal_weight() != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  if (from._internal_is_owned() != 0) {
    _this->_internal_set_is_owned(from._internal_is_owned());
  }
  if (from._internal_is_rotated() != 0) {
    _this->_internal_set_is_rotated(from._internal_is_rotated());
  }
  if (from._internal_onwer_player_index() != 0) {
    _this->_internal_set_onwer_player_index(from._internal_onwer_player_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Item, _impl_.onwer_player_index_)
      + sizeof(Item::_impl_.onwer_player_index_)
      - PROTOBUF_FIELD_OFFSET(Item, _impl_.world_position_)>(
          reinterpret_cast<char*>(&_impl_.world_position_),
          reinterpret_cast<char*>(&other->_impl_.world_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[6]);
}

// ===================================================================

class PlayerInitInfo::_Internal {
 public:
  static const ::ProjectJ::Player& player(const PlayerInitInfo* msg);
  static const ::ProjectJ::Vector& position(const PlayerInitInfo* msg);
  static const ::ProjectJ::Rotator& rotation(const PlayerInitInfo* msg);
};

const ::ProjectJ::Player&
PlayerInitInfo::_Internal::player(const PlayerInitInfo* msg) {
  return *msg->_impl_.player_;
}
const ::ProjectJ::Vector&
PlayerInitInfo::_Internal::position(const PlayerInitInfo* msg) {
  return *msg->_impl_.position_;
}
const ::ProjectJ::Rotator&
PlayerInitInfo::_Internal::rotation(const PlayerInitInfo* msg) {
  return *msg->_impl_.rotation_;
}
PlayerInitInfo::PlayerInitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.PlayerInitInfo)
}
PlayerInitInfo::PlayerInitInfo(const PlayerInitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInitInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.state_){}
    , decltype(_impl_.player_index_){}
    , decltype(_impl_.inv_size_row_){}
    , decltype(_impl_.inv_size_colunm_){}
    , decltype(_impl_.inv_max_weight_){}
    , decltype(_impl_.move_speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::ProjectJ::Player(*from._impl_.player_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::ProjectJ::Vector(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::ProjectJ::Rotator(*from._impl_.rotation_);
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.move_speed_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.move_speed_));
  // @@protoc_insertion_point(copy_constructor:ProjectJ.PlayerInitInfo)
}

inline void PlayerInitInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.player_index_){0}
    , decltype(_impl_.inv_size_row_){0}
    , decltype(_impl_.inv_size_colunm_){0}
    , decltype(_impl_.inv_max_weight_){0}
    , decltype(_impl_.move_speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerInitInfo::~PlayerInitInfo() {
  // @@protoc_insertion_point(destructor:ProjectJ.PlayerInitInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.player_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
}

void PlayerInitInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.PlayerInitInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  ::memset(&_impl_.state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.move_speed_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.move_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInitInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ProjectJ.MatchPlayerState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::ProjectJ::MatchPlayerState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 player_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.Player player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.Vector position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.Rotator rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inv_size_row = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.inv_size_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inv_size_colunm = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.inv_size_colunm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inv_max_weight = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.inv_max_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float move_speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInitInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.PlayerInitInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProjectJ.MatchPlayerState state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // int32 player_index = 2;
  if (this->_internal_player_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_index(), target);
  }

  // .ProjectJ.Player player = 3;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.Vector position = 4;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.Rotator rotation = 5;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // int32 inv_size_row = 6;
  if (this->_internal_inv_size_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_inv_size_row(), target);
  }

  // int32 inv_size_colunm = 7;
  if (this->_internal_inv_size_colunm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_inv_size_colunm(), target);
  }

  // int32 inv_max_weight = 8;
  if (this->_internal_inv_max_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_inv_max_weight(), target);
  }

  // float move_speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_move_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.PlayerInitInfo)
  return target;
}

size_t PlayerInitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.PlayerInitInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProjectJ.Player player = 3;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .ProjectJ.Vector position = 4;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .ProjectJ.Rotator rotation = 5;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // .ProjectJ.MatchPlayerState state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 player_index = 2;
  if (this->_internal_player_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_index());
  }

  // int32 inv_size_row = 6;
  if (this->_internal_inv_size_row() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inv_size_row());
  }

  // int32 inv_size_colunm = 7;
  if (this->_internal_inv_size_colunm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inv_size_colunm());
  }

  // int32 inv_max_weight = 8;
  if (this->_internal_inv_max_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inv_max_weight());
  }

  // float move_speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInitInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInitInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInitInfo::GetClassData() const { return &_class_data_; }


void PlayerInitInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInitInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInitInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.PlayerInitInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::ProjectJ::Player::MergeFrom(
        from._internal_player());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::ProjectJ::Vector::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::ProjectJ::Rotator::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_player_index() != 0) {
    _this->_internal_set_player_index(from._internal_player_index());
  }
  if (from._internal_inv_size_row() != 0) {
    _this->_internal_set_inv_size_row(from._internal_inv_size_row());
  }
  if (from._internal_inv_size_colunm() != 0) {
    _this->_internal_set_inv_size_colunm(from._internal_inv_size_colunm());
  }
  if (from._internal_inv_max_weight() != 0) {
    _this->_internal_set_inv_max_weight(from._internal_inv_max_weight());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = from._internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    _this->_internal_set_move_speed(from._internal_move_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInitInfo::CopyFrom(const PlayerInitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.PlayerInitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInitInfo::IsInitialized() const {
  return true;
}

void PlayerInitInfo::InternalSwap(PlayerInitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInitInfo, _impl_.move_speed_)
      + sizeof(PlayerInitInfo::_impl_.move_speed_)
      - PROTOBUF_FIELD_OFFSET(PlayerInitInfo, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInitInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[7]);
}

// ===================================================================

class ScaleInitInfo::_Internal {
 public:
};

ScaleInitInfo::ScaleInitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.ScaleInitInfo)
}
ScaleInitInfo::ScaleInitInfo(const ScaleInitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScaleInitInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.operating_weight_){}
    , decltype(_impl_.tolerance_){}
    , decltype(_impl_.inv_size_row_){}
    , decltype(_impl_.inv_size_colunm_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.operating_weight_, &from._impl_.operating_weight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inv_size_colunm_) -
    reinterpret_cast<char*>(&_impl_.operating_weight_)) + sizeof(_impl_.inv_size_colunm_));
  // @@protoc_insertion_point(copy_constructor:ProjectJ.ScaleInitInfo)
}

inline void ScaleInitInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.operating_weight_){0}
    , decltype(_impl_.tolerance_){0}
    , decltype(_impl_.inv_size_row_){0}
    , decltype(_impl_.inv_size_colunm_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScaleInitInfo::~ScaleInitInfo() {
  // @@protoc_insertion_point(destructor:ProjectJ.ScaleInitInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScaleInitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScaleInitInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScaleInitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.ScaleInitInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.operating_weight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.inv_size_colunm_) -
      reinterpret_cast<char*>(&_impl_.operating_weight_)) + sizeof(_impl_.inv_size_colunm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScaleInitInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 operating_weight = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.operating_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tolerance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.tolerance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inv_size_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.inv_size_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 inv_size_colunm = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.inv_size_colunm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScaleInitInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.ScaleInitInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operating_weight = 1;
  if (this->_internal_operating_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_operating_weight(), target);
  }

  // int32 tolerance = 2;
  if (this->_internal_tolerance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tolerance(), target);
  }

  // int32 inv_size_row = 3;
  if (this->_internal_inv_size_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_inv_size_row(), target);
  }

  // int32 inv_size_colunm = 4;
  if (this->_internal_inv_size_colunm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_inv_size_colunm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.ScaleInitInfo)
  return target;
}

size_t ScaleInitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.ScaleInitInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 operating_weight = 1;
  if (this->_internal_operating_weight() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_operating_weight());
  }

  // int32 tolerance = 2;
  if (this->_internal_tolerance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tolerance());
  }

  // int32 inv_size_row = 3;
  if (this->_internal_inv_size_row() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inv_size_row());
  }

  // int32 inv_size_colunm = 4;
  if (this->_internal_inv_size_colunm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inv_size_colunm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScaleInitInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScaleInitInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScaleInitInfo::GetClassData() const { return &_class_data_; }


void ScaleInitInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScaleInitInfo*>(&to_msg);
  auto& from = static_cast<const ScaleInitInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.ScaleInitInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_operating_weight() != 0) {
    _this->_internal_set_operating_weight(from._internal_operating_weight());
  }
  if (from._internal_tolerance() != 0) {
    _this->_internal_set_tolerance(from._internal_tolerance());
  }
  if (from._internal_inv_size_row() != 0) {
    _this->_internal_set_inv_size_row(from._internal_inv_size_row());
  }
  if (from._internal_inv_size_colunm() != 0) {
    _this->_internal_set_inv_size_colunm(from._internal_inv_size_colunm());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScaleInitInfo::CopyFrom(const ScaleInitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.ScaleInitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScaleInitInfo::IsInitialized() const {
  return true;
}

void ScaleInitInfo::InternalSwap(ScaleInitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScaleInitInfo, _impl_.inv_size_colunm_)
      + sizeof(ScaleInitInfo::_impl_.inv_size_colunm_)
      - PROTOBUF_FIELD_OFFSET(ScaleInitInfo, _impl_.operating_weight_)>(
          reinterpret_cast<char*>(&_impl_.operating_weight_),
          reinterpret_cast<char*>(&other->_impl_.operating_weight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScaleInitInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[8]);
}

// ===================================================================

class MatchInitInfo::_Internal {
 public:
  static const ::ProjectJ::PlayerInitInfo& chaser(const MatchInitInfo* msg);
  static const ::ProjectJ::PlayerInitInfo& fugitive_first(const MatchInitInfo* msg);
  static const ::ProjectJ::PlayerInitInfo& fugitive_second(const MatchInitInfo* msg);
  static const ::ProjectJ::PlayerInitInfo& fugitive_third(const MatchInitInfo* msg);
  static const ::ProjectJ::ScaleInitInfo& scale_first(const MatchInitInfo* msg);
  static const ::ProjectJ::ScaleInitInfo& scale_second(const MatchInitInfo* msg);
  static const ::ProjectJ::ScaleInitInfo& scale_third(const MatchInitInfo* msg);
  static const ::ProjectJ::ScaleInitInfo& scale_fourth(const MatchInitInfo* msg);
};

const ::ProjectJ::PlayerInitInfo&
MatchInitInfo::_Internal::chaser(const MatchInitInfo* msg) {
  return *msg->_impl_.chaser_;
}
const ::ProjectJ::PlayerInitInfo&
MatchInitInfo::_Internal::fugitive_first(const MatchInitInfo* msg) {
  return *msg->_impl_.fugitive_first_;
}
const ::ProjectJ::PlayerInitInfo&
MatchInitInfo::_Internal::fugitive_second(const MatchInitInfo* msg) {
  return *msg->_impl_.fugitive_second_;
}
const ::ProjectJ::PlayerInitInfo&
MatchInitInfo::_Internal::fugitive_third(const MatchInitInfo* msg) {
  return *msg->_impl_.fugitive_third_;
}
const ::ProjectJ::ScaleInitInfo&
MatchInitInfo::_Internal::scale_first(const MatchInitInfo* msg) {
  return *msg->_impl_.scale_first_;
}
const ::ProjectJ::ScaleInitInfo&
MatchInitInfo::_Internal::scale_second(const MatchInitInfo* msg) {
  return *msg->_impl_.scale_second_;
}
const ::ProjectJ::ScaleInitInfo&
MatchInitInfo::_Internal::scale_third(const MatchInitInfo* msg) {
  return *msg->_impl_.scale_third_;
}
const ::ProjectJ::ScaleInitInfo&
MatchInitInfo::_Internal::scale_fourth(const MatchInitInfo* msg) {
  return *msg->_impl_.scale_fourth_;
}
MatchInitInfo::MatchInitInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.MatchInitInfo)
}
MatchInitInfo::MatchInitInfo(const MatchInitInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchInitInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chaser_){nullptr}
    , decltype(_impl_.fugitive_first_){nullptr}
    , decltype(_impl_.fugitive_second_){nullptr}
    , decltype(_impl_.fugitive_third_){nullptr}
    , decltype(_impl_.scale_first_){nullptr}
    , decltype(_impl_.scale_second_){nullptr}
    , decltype(_impl_.scale_third_){nullptr}
    , decltype(_impl_.scale_fourth_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chaser()) {
    _this->_impl_.chaser_ = new ::ProjectJ::PlayerInitInfo(*from._impl_.chaser_);
  }
  if (from._internal_has_fugitive_first()) {
    _this->_impl_.fugitive_first_ = new ::ProjectJ::PlayerInitInfo(*from._impl_.fugitive_first_);
  }
  if (from._internal_has_fugitive_second()) {
    _this->_impl_.fugitive_second_ = new ::ProjectJ::PlayerInitInfo(*from._impl_.fugitive_second_);
  }
  if (from._internal_has_fugitive_third()) {
    _this->_impl_.fugitive_third_ = new ::ProjectJ::PlayerInitInfo(*from._impl_.fugitive_third_);
  }
  if (from._internal_has_scale_first()) {
    _this->_impl_.scale_first_ = new ::ProjectJ::ScaleInitInfo(*from._impl_.scale_first_);
  }
  if (from._internal_has_scale_second()) {
    _this->_impl_.scale_second_ = new ::ProjectJ::ScaleInitInfo(*from._impl_.scale_second_);
  }
  if (from._internal_has_scale_third()) {
    _this->_impl_.scale_third_ = new ::ProjectJ::ScaleInitInfo(*from._impl_.scale_third_);
  }
  if (from._internal_has_scale_fourth()) {
    _this->_impl_.scale_fourth_ = new ::ProjectJ::ScaleInitInfo(*from._impl_.scale_fourth_);
  }
  // @@protoc_insertion_point(copy_constructor:ProjectJ.MatchInitInfo)
}

inline void MatchInitInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chaser_){nullptr}
    , decltype(_impl_.fugitive_first_){nullptr}
    , decltype(_impl_.fugitive_second_){nullptr}
    , decltype(_impl_.fugitive_third_){nullptr}
    , decltype(_impl_.scale_first_){nullptr}
    , decltype(_impl_.scale_second_){nullptr}
    , decltype(_impl_.scale_third_){nullptr}
    , decltype(_impl_.scale_fourth_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatchInitInfo::~MatchInitInfo() {
  // @@protoc_insertion_point(destructor:ProjectJ.MatchInitInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchInitInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chaser_;
  if (this != internal_default_instance()) delete _impl_.fugitive_first_;
  if (this != internal_default_instance()) delete _impl_.fugitive_second_;
  if (this != internal_default_instance()) delete _impl_.fugitive_third_;
  if (this != internal_default_instance()) delete _impl_.scale_first_;
  if (this != internal_default_instance()) delete _impl_.scale_second_;
  if (this != internal_default_instance()) delete _impl_.scale_third_;
  if (this != internal_default_instance()) delete _impl_.scale_fourth_;
}

void MatchInitInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchInitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.MatchInitInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.chaser_ != nullptr) {
    delete _impl_.chaser_;
  }
  _impl_.chaser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_first_ != nullptr) {
    delete _impl_.fugitive_first_;
  }
  _impl_.fugitive_first_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_second_ != nullptr) {
    delete _impl_.fugitive_second_;
  }
  _impl_.fugitive_second_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_third_ != nullptr) {
    delete _impl_.fugitive_third_;
  }
  _impl_.fugitive_third_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scale_first_ != nullptr) {
    delete _impl_.scale_first_;
  }
  _impl_.scale_first_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scale_second_ != nullptr) {
    delete _impl_.scale_second_;
  }
  _impl_.scale_second_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scale_third_ != nullptr) {
    delete _impl_.scale_third_;
  }
  _impl_.scale_third_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.scale_fourth_ != nullptr) {
    delete _impl_.scale_fourth_;
  }
  _impl_.scale_fourth_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchInitInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ProjectJ.PlayerInitInfo chaser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chaser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.PlayerInitInfo fugitive_first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fugitive_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.PlayerInitInfo fugitive_second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fugitive_second(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.PlayerInitInfo fugitive_third = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fugitive_third(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.ScaleInitInfo scale_first = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.ScaleInitInfo scale_second = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_second(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.ScaleInitInfo scale_third = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_third(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.ScaleInitInfo scale_fourth = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale_fourth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchInitInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.MatchInitInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProjectJ.PlayerInitInfo chaser = 1;
  if (this->_internal_has_chaser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chaser(this),
        _Internal::chaser(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.PlayerInitInfo fugitive_first = 2;
  if (this->_internal_has_fugitive_first()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fugitive_first(this),
        _Internal::fugitive_first(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.PlayerInitInfo fugitive_second = 3;
  if (this->_internal_has_fugitive_second()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fugitive_second(this),
        _Internal::fugitive_second(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.PlayerInitInfo fugitive_third = 4;
  if (this->_internal_has_fugitive_third()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fugitive_third(this),
        _Internal::fugitive_third(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.ScaleInitInfo scale_first = 5;
  if (this->_internal_has_scale_first()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::scale_first(this),
        _Internal::scale_first(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.ScaleInitInfo scale_second = 6;
  if (this->_internal_has_scale_second()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::scale_second(this),
        _Internal::scale_second(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.ScaleInitInfo scale_third = 7;
  if (this->_internal_has_scale_third()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::scale_third(this),
        _Internal::scale_third(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.ScaleInitInfo scale_fourth = 8;
  if (this->_internal_has_scale_fourth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::scale_fourth(this),
        _Internal::scale_fourth(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.MatchInitInfo)
  return target;
}

size_t MatchInitInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.MatchInitInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProjectJ.PlayerInitInfo chaser = 1;
  if (this->_internal_has_chaser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chaser_);
  }

  // .ProjectJ.PlayerInitInfo fugitive_first = 2;
  if (this->_internal_has_fugitive_first()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fugitive_first_);
  }

  // .ProjectJ.PlayerInitInfo fugitive_second = 3;
  if (this->_internal_has_fugitive_second()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fugitive_second_);
  }

  // .ProjectJ.PlayerInitInfo fugitive_third = 4;
  if (this->_internal_has_fugitive_third()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fugitive_third_);
  }

  // .ProjectJ.ScaleInitInfo scale_first = 5;
  if (this->_internal_has_scale_first()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scale_first_);
  }

  // .ProjectJ.ScaleInitInfo scale_second = 6;
  if (this->_internal_has_scale_second()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scale_second_);
  }

  // .ProjectJ.ScaleInitInfo scale_third = 7;
  if (this->_internal_has_scale_third()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scale_third_);
  }

  // .ProjectJ.ScaleInitInfo scale_fourth = 8;
  if (this->_internal_has_scale_fourth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.scale_fourth_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchInitInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchInitInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchInitInfo::GetClassData() const { return &_class_data_; }


void MatchInitInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchInitInfo*>(&to_msg);
  auto& from = static_cast<const MatchInitInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.MatchInitInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chaser()) {
    _this->_internal_mutable_chaser()->::ProjectJ::PlayerInitInfo::MergeFrom(
        from._internal_chaser());
  }
  if (from._internal_has_fugitive_first()) {
    _this->_internal_mutable_fugitive_first()->::ProjectJ::PlayerInitInfo::MergeFrom(
        from._internal_fugitive_first());
  }
  if (from._internal_has_fugitive_second()) {
    _this->_internal_mutable_fugitive_second()->::ProjectJ::PlayerInitInfo::MergeFrom(
        from._internal_fugitive_second());
  }
  if (from._internal_has_fugitive_third()) {
    _this->_internal_mutable_fugitive_third()->::ProjectJ::PlayerInitInfo::MergeFrom(
        from._internal_fugitive_third());
  }
  if (from._internal_has_scale_first()) {
    _this->_internal_mutable_scale_first()->::ProjectJ::ScaleInitInfo::MergeFrom(
        from._internal_scale_first());
  }
  if (from._internal_has_scale_second()) {
    _this->_internal_mutable_scale_second()->::ProjectJ::ScaleInitInfo::MergeFrom(
        from._internal_scale_second());
  }
  if (from._internal_has_scale_third()) {
    _this->_internal_mutable_scale_third()->::ProjectJ::ScaleInitInfo::MergeFrom(
        from._internal_scale_third());
  }
  if (from._internal_has_scale_fourth()) {
    _this->_internal_mutable_scale_fourth()->::ProjectJ::ScaleInitInfo::MergeFrom(
        from._internal_scale_fourth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchInitInfo::CopyFrom(const MatchInitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.MatchInitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchInitInfo::IsInitialized() const {
  return true;
}

void MatchInitInfo::InternalSwap(MatchInitInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchInitInfo, _impl_.scale_fourth_)
      + sizeof(MatchInitInfo::_impl_.scale_fourth_)
      - PROTOBUF_FIELD_OFFSET(MatchInitInfo, _impl_.chaser_)>(
          reinterpret_cast<char*>(&_impl_.chaser_),
          reinterpret_cast<char*>(&other->_impl_.chaser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchInitInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[9]);
}

// ===================================================================

class PlayerInfo::_Internal {
 public:
  static const ::ProjectJ::Vector& position(const PlayerInfo* msg);
  static const ::ProjectJ::Rotator& rotation(const PlayerInfo* msg);
  static const ::ProjectJ::Vector& velocity(const PlayerInfo* msg);
};

const ::ProjectJ::Vector&
PlayerInfo::_Internal::position(const PlayerInfo* msg) {
  return *msg->_impl_.position_;
}
const ::ProjectJ::Rotator&
PlayerInfo::_Internal::rotation(const PlayerInfo* msg) {
  return *msg->_impl_.rotation_;
}
const ::ProjectJ::Vector&
PlayerInfo::_Internal::velocity(const PlayerInfo* msg) {
  return *msg->_impl_.velocity_;
}
PlayerInfo::PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.PlayerInfo)
}
PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.state_){}
    , decltype(_impl_.player_index_){}
    , decltype(_impl_.move_speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::ProjectJ::Vector(*from._impl_.position_);
  }
  if (from._internal_has_rotation()) {
    _this->_impl_.rotation_ = new ::ProjectJ::Rotator(*from._impl_.rotation_);
  }
  if (from._internal_has_velocity()) {
    _this->_impl_.velocity_ = new ::ProjectJ::Vector(*from._impl_.velocity_);
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.move_speed_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.move_speed_));
  // @@protoc_insertion_point(copy_constructor:ProjectJ.PlayerInfo)
}

inline void PlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.position_){nullptr}
    , decltype(_impl_.rotation_){nullptr}
    , decltype(_impl_.velocity_){nullptr}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.player_index_){0}
    , decltype(_impl_.move_speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:ProjectJ.PlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.rotation_;
  if (this != internal_default_instance()) delete _impl_.velocity_;
}

void PlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.PlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rotation_ != nullptr) {
    delete _impl_.rotation_;
  }
  _impl_.rotation_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.velocity_ != nullptr) {
    delete _impl_.velocity_;
  }
  _impl_.velocity_ = nullptr;
  ::memset(&_impl_.state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.move_speed_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.move_speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ProjectJ.MatchPlayerState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::ProjectJ::MatchPlayerState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 player_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.Vector position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.Rotator rotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.Vector velocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float move_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.PlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProjectJ.MatchPlayerState state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // int32 player_index = 2;
  if (this->_internal_player_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_index(), target);
  }

  // .ProjectJ.Vector position = 3;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.Rotator rotation = 4;
  if (this->_internal_has_rotation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rotation(this),
        _Internal::rotation(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.Vector velocity = 5;
  if (this->_internal_has_velocity()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::velocity(this),
        _Internal::velocity(this).GetCachedSize(), target, stream);
  }

  // float move_speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_move_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.PlayerInfo)
  return target;
}

size_t PlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.PlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProjectJ.Vector position = 3;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .ProjectJ.Rotator rotation = 4;
  if (this->_internal_has_rotation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rotation_);
  }

  // .ProjectJ.Vector velocity = 5;
  if (this->_internal_has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.velocity_);
  }

  // .ProjectJ.MatchPlayerState state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 player_index = 2;
  if (this->_internal_player_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_index());
  }

  // float move_speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInfo::GetClassData() const { return &_class_data_; }


void PlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.PlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::ProjectJ::Vector::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_rotation()) {
    _this->_internal_mutable_rotation()->::ProjectJ::Rotator::MergeFrom(
        from._internal_rotation());
  }
  if (from._internal_has_velocity()) {
    _this->_internal_mutable_velocity()->::ProjectJ::Vector::MergeFrom(
        from._internal_velocity());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_player_index() != 0) {
    _this->_internal_set_player_index(from._internal_player_index());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = from._internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    _this->_internal_set_move_speed(from._internal_move_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  return true;
}

void PlayerInfo::InternalSwap(PlayerInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.move_speed_)
      + sizeof(PlayerInfo::_impl_.move_speed_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.position_)>(
          reinterpret_cast<char*>(&_impl_.position_),
          reinterpret_cast<char*>(&other->_impl_.position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[10]);
}

// ===================================================================

class MatchInfo::_Internal {
 public:
  static const ::ProjectJ::PlayerInfo& chaser(const MatchInfo* msg);
  static const ::ProjectJ::PlayerInfo& fugitive_first(const MatchInfo* msg);
  static const ::ProjectJ::PlayerInfo& fugitive_second(const MatchInfo* msg);
  static const ::ProjectJ::PlayerInfo& fugitive_third(const MatchInfo* msg);
};

const ::ProjectJ::PlayerInfo&
MatchInfo::_Internal::chaser(const MatchInfo* msg) {
  return *msg->_impl_.chaser_;
}
const ::ProjectJ::PlayerInfo&
MatchInfo::_Internal::fugitive_first(const MatchInfo* msg) {
  return *msg->_impl_.fugitive_first_;
}
const ::ProjectJ::PlayerInfo&
MatchInfo::_Internal::fugitive_second(const MatchInfo* msg) {
  return *msg->_impl_.fugitive_second_;
}
const ::ProjectJ::PlayerInfo&
MatchInfo::_Internal::fugitive_third(const MatchInfo* msg) {
  return *msg->_impl_.fugitive_third_;
}
MatchInfo::MatchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.MatchInfo)
}
MatchInfo::MatchInfo(const MatchInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatchInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chaser_){nullptr}
    , decltype(_impl_.fugitive_first_){nullptr}
    , decltype(_impl_.fugitive_second_){nullptr}
    , decltype(_impl_.fugitive_third_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_chaser()) {
    _this->_impl_.chaser_ = new ::ProjectJ::PlayerInfo(*from._impl_.chaser_);
  }
  if (from._internal_has_fugitive_first()) {
    _this->_impl_.fugitive_first_ = new ::ProjectJ::PlayerInfo(*from._impl_.fugitive_first_);
  }
  if (from._internal_has_fugitive_second()) {
    _this->_impl_.fugitive_second_ = new ::ProjectJ::PlayerInfo(*from._impl_.fugitive_second_);
  }
  if (from._internal_has_fugitive_third()) {
    _this->_impl_.fugitive_third_ = new ::ProjectJ::PlayerInfo(*from._impl_.fugitive_third_);
  }
  // @@protoc_insertion_point(copy_constructor:ProjectJ.MatchInfo)
}

inline void MatchInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chaser_){nullptr}
    , decltype(_impl_.fugitive_first_){nullptr}
    , decltype(_impl_.fugitive_second_){nullptr}
    , decltype(_impl_.fugitive_third_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatchInfo::~MatchInfo() {
  // @@protoc_insertion_point(destructor:ProjectJ.MatchInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatchInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.chaser_;
  if (this != internal_default_instance()) delete _impl_.fugitive_first_;
  if (this != internal_default_instance()) delete _impl_.fugitive_second_;
  if (this != internal_default_instance()) delete _impl_.fugitive_third_;
}

void MatchInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatchInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.MatchInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.chaser_ != nullptr) {
    delete _impl_.chaser_;
  }
  _impl_.chaser_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_first_ != nullptr) {
    delete _impl_.fugitive_first_;
  }
  _impl_.fugitive_first_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_second_ != nullptr) {
    delete _impl_.fugitive_second_;
  }
  _impl_.fugitive_second_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fugitive_third_ != nullptr) {
    delete _impl_.fugitive_third_;
  }
  _impl_.fugitive_third_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatchInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .ProjectJ.PlayerInfo chaser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_chaser(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.PlayerInfo fugitive_first = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_fugitive_first(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.PlayerInfo fugitive_second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_fugitive_second(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ProjectJ.PlayerInfo fugitive_third = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_fugitive_third(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatchInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.MatchInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .ProjectJ.PlayerInfo chaser = 1;
  if (this->_internal_has_chaser()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::chaser(this),
        _Internal::chaser(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.PlayerInfo fugitive_first = 2;
  if (this->_internal_has_fugitive_first()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::fugitive_first(this),
        _Internal::fugitive_first(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.PlayerInfo fugitive_second = 3;
  if (this->_internal_has_fugitive_second()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::fugitive_second(this),
        _Internal::fugitive_second(this).GetCachedSize(), target, stream);
  }

  // .ProjectJ.PlayerInfo fugitive_third = 4;
  if (this->_internal_has_fugitive_third()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::fugitive_third(this),
        _Internal::fugitive_third(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.MatchInfo)
  return target;
}

size_t MatchInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.MatchInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ProjectJ.PlayerInfo chaser = 1;
  if (this->_internal_has_chaser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.chaser_);
  }

  // .ProjectJ.PlayerInfo fugitive_first = 2;
  if (this->_internal_has_fugitive_first()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fugitive_first_);
  }

  // .ProjectJ.PlayerInfo fugitive_second = 3;
  if (this->_internal_has_fugitive_second()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fugitive_second_);
  }

  // .ProjectJ.PlayerInfo fugitive_third = 4;
  if (this->_internal_has_fugitive_third()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fugitive_third_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatchInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatchInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatchInfo::GetClassData() const { return &_class_data_; }


void MatchInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatchInfo*>(&to_msg);
  auto& from = static_cast<const MatchInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.MatchInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_chaser()) {
    _this->_internal_mutable_chaser()->::ProjectJ::PlayerInfo::MergeFrom(
        from._internal_chaser());
  }
  if (from._internal_has_fugitive_first()) {
    _this->_internal_mutable_fugitive_first()->::ProjectJ::PlayerInfo::MergeFrom(
        from._internal_fugitive_first());
  }
  if (from._internal_has_fugitive_second()) {
    _this->_internal_mutable_fugitive_second()->::ProjectJ::PlayerInfo::MergeFrom(
        from._internal_fugitive_second());
  }
  if (from._internal_has_fugitive_third()) {
    _this->_internal_mutable_fugitive_third()->::ProjectJ::PlayerInfo::MergeFrom(
        from._internal_fugitive_third());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatchInfo::CopyFrom(const MatchInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.MatchInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchInfo::IsInitialized() const {
  return true;
}

void MatchInfo::InternalSwap(MatchInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatchInfo, _impl_.fugitive_third_)
      + sizeof(MatchInfo::_impl_.fugitive_third_)
      - PROTOBUF_FIELD_OFFSET(MatchInfo, _impl_.chaser_)>(
          reinterpret_cast<char*>(&_impl_.chaser_),
          reinterpret_cast<char*>(&other->_impl_.chaser_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatchInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Struct_2eproto_getter, &descriptor_table_Struct_2eproto_once,
      file_level_metadata_Struct_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ProjectJ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProjectJ::Vector*
Arena::CreateMaybeMessage< ::ProjectJ::Vector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::Vector >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::Rotator*
Arena::CreateMaybeMessage< ::ProjectJ::Rotator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::Rotator >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::Room*
Arena::CreateMaybeMessage< ::ProjectJ::Room >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::Room >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::Player*
Arena::CreateMaybeMessage< ::ProjectJ::Player >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::RoomInfo_PlayerSlot*
Arena::CreateMaybeMessage< ::ProjectJ::RoomInfo_PlayerSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::RoomInfo_PlayerSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::RoomInfo*
Arena::CreateMaybeMessage< ::ProjectJ::RoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::Item*
Arena::CreateMaybeMessage< ::ProjectJ::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::PlayerInitInfo*
Arena::CreateMaybeMessage< ::ProjectJ::PlayerInitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::PlayerInitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::ScaleInitInfo*
Arena::CreateMaybeMessage< ::ProjectJ::ScaleInitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::ScaleInitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::MatchInitInfo*
Arena::CreateMaybeMessage< ::ProjectJ::MatchInitInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::MatchInitInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::PlayerInfo*
Arena::CreateMaybeMessage< ::ProjectJ::PlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::PlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::MatchInfo*
Arena::CreateMaybeMessage< ::ProjectJ::MatchInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::MatchInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
