#pragma warning(disable:4800)
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message_2eproto;
namespace ProjectJ {
class C_LOBBY_CHAT;
struct C_LOBBY_CHATDefaultTypeInternal;
extern C_LOBBY_CHATDefaultTypeInternal _C_LOBBY_CHAT_default_instance_;
class C_LOBBY_CREATE_ROOM;
struct C_LOBBY_CREATE_ROOMDefaultTypeInternal;
extern C_LOBBY_CREATE_ROOMDefaultTypeInternal _C_LOBBY_CREATE_ROOM_default_instance_;
class C_LOBBY_ENTER_ROOM;
struct C_LOBBY_ENTER_ROOMDefaultTypeInternal;
extern C_LOBBY_ENTER_ROOMDefaultTypeInternal _C_LOBBY_ENTER_ROOM_default_instance_;
class C_LOBBY_REFRESH_ROOM;
struct C_LOBBY_REFRESH_ROOMDefaultTypeInternal;
extern C_LOBBY_REFRESH_ROOMDefaultTypeInternal _C_LOBBY_REFRESH_ROOM_default_instance_;
class C_MATCH_ITEM_DROP;
struct C_MATCH_ITEM_DROPDefaultTypeInternal;
extern C_MATCH_ITEM_DROPDefaultTypeInternal _C_MATCH_ITEM_DROP_default_instance_;
class C_MATCH_ITEM_MOVE;
struct C_MATCH_ITEM_MOVEDefaultTypeInternal;
extern C_MATCH_ITEM_MOVEDefaultTypeInternal _C_MATCH_ITEM_MOVE_default_instance_;
class C_MATCH_ITEM_PICKUP;
struct C_MATCH_ITEM_PICKUPDefaultTypeInternal;
extern C_MATCH_ITEM_PICKUPDefaultTypeInternal _C_MATCH_ITEM_PICKUP_default_instance_;
class C_ROOM_LEAVE;
struct C_ROOM_LEAVEDefaultTypeInternal;
extern C_ROOM_LEAVEDefaultTypeInternal _C_ROOM_LEAVE_default_instance_;
class C_ROOM_READY;
struct C_ROOM_READYDefaultTypeInternal;
extern C_ROOM_READYDefaultTypeInternal _C_ROOM_READY_default_instance_;
class C_VERIFY_TOKEN;
struct C_VERIFY_TOKENDefaultTypeInternal;
extern C_VERIFY_TOKENDefaultTypeInternal _C_VERIFY_TOKEN_default_instance_;
class S_LOBBY_CHAT;
struct S_LOBBY_CHATDefaultTypeInternal;
extern S_LOBBY_CHATDefaultTypeInternal _S_LOBBY_CHAT_default_instance_;
class S_LOBBY_CREATE_ROOM;
struct S_LOBBY_CREATE_ROOMDefaultTypeInternal;
extern S_LOBBY_CREATE_ROOMDefaultTypeInternal _S_LOBBY_CREATE_ROOM_default_instance_;
class S_LOBBY_ENTER_ROOM;
struct S_LOBBY_ENTER_ROOMDefaultTypeInternal;
extern S_LOBBY_ENTER_ROOMDefaultTypeInternal _S_LOBBY_ENTER_ROOM_default_instance_;
class S_LOBBY_REFRESH_ROOM;
struct S_LOBBY_REFRESH_ROOMDefaultTypeInternal;
extern S_LOBBY_REFRESH_ROOMDefaultTypeInternal _S_LOBBY_REFRESH_ROOM_default_instance_;
class S_MATCH_INIT_GENERATED_ITEMS;
struct S_MATCH_INIT_GENERATED_ITEMSDefaultTypeInternal;
extern S_MATCH_INIT_GENERATED_ITEMSDefaultTypeInternal _S_MATCH_INIT_GENERATED_ITEMS_default_instance_;
class S_MATCH_ITEM_DROP;
struct S_MATCH_ITEM_DROPDefaultTypeInternal;
extern S_MATCH_ITEM_DROPDefaultTypeInternal _S_MATCH_ITEM_DROP_default_instance_;
class S_MATCH_ITEM_MOVE;
struct S_MATCH_ITEM_MOVEDefaultTypeInternal;
extern S_MATCH_ITEM_MOVEDefaultTypeInternal _S_MATCH_ITEM_MOVE_default_instance_;
class S_MATCH_ITEM_PICKUP;
struct S_MATCH_ITEM_PICKUPDefaultTypeInternal;
extern S_MATCH_ITEM_PICKUPDefaultTypeInternal _S_MATCH_ITEM_PICKUP_default_instance_;
class S_ROOM_LEAVE;
struct S_ROOM_LEAVEDefaultTypeInternal;
extern S_ROOM_LEAVEDefaultTypeInternal _S_ROOM_LEAVE_default_instance_;
class S_ROOM_OTHER_ENTER;
struct S_ROOM_OTHER_ENTERDefaultTypeInternal;
extern S_ROOM_OTHER_ENTERDefaultTypeInternal _S_ROOM_OTHER_ENTER_default_instance_;
class S_ROOM_OTHER_LEAVE;
struct S_ROOM_OTHER_LEAVEDefaultTypeInternal;
extern S_ROOM_OTHER_LEAVEDefaultTypeInternal _S_ROOM_OTHER_LEAVE_default_instance_;
class S_ROOM_READY;
struct S_ROOM_READYDefaultTypeInternal;
extern S_ROOM_READYDefaultTypeInternal _S_ROOM_READY_default_instance_;
class S_VERIFY_TOKEN;
struct S_VERIFY_TOKENDefaultTypeInternal;
extern S_VERIFY_TOKENDefaultTypeInternal _S_VERIFY_TOKEN_default_instance_;
}  // namespace ProjectJ
PROTOBUF_NAMESPACE_OPEN
template<> ::ProjectJ::C_LOBBY_CHAT* Arena::CreateMaybeMessage<::ProjectJ::C_LOBBY_CHAT>(Arena*);
template<> ::ProjectJ::C_LOBBY_CREATE_ROOM* Arena::CreateMaybeMessage<::ProjectJ::C_LOBBY_CREATE_ROOM>(Arena*);
template<> ::ProjectJ::C_LOBBY_ENTER_ROOM* Arena::CreateMaybeMessage<::ProjectJ::C_LOBBY_ENTER_ROOM>(Arena*);
template<> ::ProjectJ::C_LOBBY_REFRESH_ROOM* Arena::CreateMaybeMessage<::ProjectJ::C_LOBBY_REFRESH_ROOM>(Arena*);
template<> ::ProjectJ::C_MATCH_ITEM_DROP* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_ITEM_DROP>(Arena*);
template<> ::ProjectJ::C_MATCH_ITEM_MOVE* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_ITEM_MOVE>(Arena*);
template<> ::ProjectJ::C_MATCH_ITEM_PICKUP* Arena::CreateMaybeMessage<::ProjectJ::C_MATCH_ITEM_PICKUP>(Arena*);
template<> ::ProjectJ::C_ROOM_LEAVE* Arena::CreateMaybeMessage<::ProjectJ::C_ROOM_LEAVE>(Arena*);
template<> ::ProjectJ::C_ROOM_READY* Arena::CreateMaybeMessage<::ProjectJ::C_ROOM_READY>(Arena*);
template<> ::ProjectJ::C_VERIFY_TOKEN* Arena::CreateMaybeMessage<::ProjectJ::C_VERIFY_TOKEN>(Arena*);
template<> ::ProjectJ::S_LOBBY_CHAT* Arena::CreateMaybeMessage<::ProjectJ::S_LOBBY_CHAT>(Arena*);
template<> ::ProjectJ::S_LOBBY_CREATE_ROOM* Arena::CreateMaybeMessage<::ProjectJ::S_LOBBY_CREATE_ROOM>(Arena*);
template<> ::ProjectJ::S_LOBBY_ENTER_ROOM* Arena::CreateMaybeMessage<::ProjectJ::S_LOBBY_ENTER_ROOM>(Arena*);
template<> ::ProjectJ::S_LOBBY_REFRESH_ROOM* Arena::CreateMaybeMessage<::ProjectJ::S_LOBBY_REFRESH_ROOM>(Arena*);
template<> ::ProjectJ::S_MATCH_INIT_GENERATED_ITEMS* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_INIT_GENERATED_ITEMS>(Arena*);
template<> ::ProjectJ::S_MATCH_ITEM_DROP* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_ITEM_DROP>(Arena*);
template<> ::ProjectJ::S_MATCH_ITEM_MOVE* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_ITEM_MOVE>(Arena*);
template<> ::ProjectJ::S_MATCH_ITEM_PICKUP* Arena::CreateMaybeMessage<::ProjectJ::S_MATCH_ITEM_PICKUP>(Arena*);
template<> ::ProjectJ::S_ROOM_LEAVE* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_LEAVE>(Arena*);
template<> ::ProjectJ::S_ROOM_OTHER_ENTER* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_OTHER_ENTER>(Arena*);
template<> ::ProjectJ::S_ROOM_OTHER_LEAVE* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_OTHER_LEAVE>(Arena*);
template<> ::ProjectJ::S_ROOM_READY* Arena::CreateMaybeMessage<::ProjectJ::S_ROOM_READY>(Arena*);
template<> ::ProjectJ::S_VERIFY_TOKEN* Arena::CreateMaybeMessage<::ProjectJ::S_VERIFY_TOKEN>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ProjectJ {

// ===================================================================

class C_VERIFY_TOKEN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_VERIFY_TOKEN) */ {
 public:
  inline C_VERIFY_TOKEN() : C_VERIFY_TOKEN(nullptr) {}
  ~C_VERIFY_TOKEN() override;
  explicit PROTOBUF_CONSTEXPR C_VERIFY_TOKEN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_VERIFY_TOKEN(const C_VERIFY_TOKEN& from);
  C_VERIFY_TOKEN(C_VERIFY_TOKEN&& from) noexcept
    : C_VERIFY_TOKEN() {
    *this = ::std::move(from);
  }

  inline C_VERIFY_TOKEN& operator=(const C_VERIFY_TOKEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_VERIFY_TOKEN& operator=(C_VERIFY_TOKEN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_VERIFY_TOKEN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_VERIFY_TOKEN* internal_default_instance() {
    return reinterpret_cast<const C_VERIFY_TOKEN*>(
               &_C_VERIFY_TOKEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_VERIFY_TOKEN& a, C_VERIFY_TOKEN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_VERIFY_TOKEN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_VERIFY_TOKEN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_VERIFY_TOKEN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_VERIFY_TOKEN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_VERIFY_TOKEN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_VERIFY_TOKEN& from) {
    C_VERIFY_TOKEN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_VERIFY_TOKEN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_VERIFY_TOKEN";
  }
  protected:
  explicit C_VERIFY_TOKEN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // string token = 2;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_VERIFY_TOKEN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_VERIFY_TOKEN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_VERIFY_TOKEN) */ {
 public:
  inline S_VERIFY_TOKEN() : S_VERIFY_TOKEN(nullptr) {}
  ~S_VERIFY_TOKEN() override;
  explicit PROTOBUF_CONSTEXPR S_VERIFY_TOKEN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_VERIFY_TOKEN(const S_VERIFY_TOKEN& from);
  S_VERIFY_TOKEN(S_VERIFY_TOKEN&& from) noexcept
    : S_VERIFY_TOKEN() {
    *this = ::std::move(from);
  }

  inline S_VERIFY_TOKEN& operator=(const S_VERIFY_TOKEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_VERIFY_TOKEN& operator=(S_VERIFY_TOKEN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_VERIFY_TOKEN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_VERIFY_TOKEN* internal_default_instance() {
    return reinterpret_cast<const S_VERIFY_TOKEN*>(
               &_S_VERIFY_TOKEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_VERIFY_TOKEN& a, S_VERIFY_TOKEN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_VERIFY_TOKEN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_VERIFY_TOKEN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_VERIFY_TOKEN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_VERIFY_TOKEN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_VERIFY_TOKEN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_VERIFY_TOKEN& from) {
    S_VERIFY_TOKEN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_VERIFY_TOKEN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_VERIFY_TOKEN";
  }
  protected:
  explicit S_VERIFY_TOKEN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_VERIFY_TOKEN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_LOBBY_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_LOBBY_CHAT) */ {
 public:
  inline C_LOBBY_CHAT() : C_LOBBY_CHAT(nullptr) {}
  ~C_LOBBY_CHAT() override;
  explicit PROTOBUF_CONSTEXPR C_LOBBY_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOBBY_CHAT(const C_LOBBY_CHAT& from);
  C_LOBBY_CHAT(C_LOBBY_CHAT&& from) noexcept
    : C_LOBBY_CHAT() {
    *this = ::std::move(from);
  }

  inline C_LOBBY_CHAT& operator=(const C_LOBBY_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOBBY_CHAT& operator=(C_LOBBY_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOBBY_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOBBY_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_LOBBY_CHAT*>(
               &_C_LOBBY_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_LOBBY_CHAT& a, C_LOBBY_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOBBY_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOBBY_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOBBY_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOBBY_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOBBY_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOBBY_CHAT& from) {
    C_LOBBY_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOBBY_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_LOBBY_CHAT";
  }
  protected:
  explicit C_LOBBY_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kChatFieldNumber = 3,
    kAccountIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string chat = 3;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_LOBBY_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_LOBBY_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_LOBBY_CHAT) */ {
 public:
  inline S_LOBBY_CHAT() : S_LOBBY_CHAT(nullptr) {}
  ~S_LOBBY_CHAT() override;
  explicit PROTOBUF_CONSTEXPR S_LOBBY_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOBBY_CHAT(const S_LOBBY_CHAT& from);
  S_LOBBY_CHAT(S_LOBBY_CHAT&& from) noexcept
    : S_LOBBY_CHAT() {
    *this = ::std::move(from);
  }

  inline S_LOBBY_CHAT& operator=(const S_LOBBY_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOBBY_CHAT& operator=(S_LOBBY_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOBBY_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOBBY_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_LOBBY_CHAT*>(
               &_S_LOBBY_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_LOBBY_CHAT& a, S_LOBBY_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOBBY_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOBBY_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOBBY_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOBBY_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOBBY_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOBBY_CHAT& from) {
    S_LOBBY_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOBBY_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_LOBBY_CHAT";
  }
  protected:
  explicit S_LOBBY_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kChatFieldNumber = 3,
    kAccountIdFieldNumber = 1,
  };
  // string nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_NODISCARD std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // string chat = 3;
  void clear_chat();
  const std::string& chat() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat();
  PROTOBUF_NODISCARD std::string* release_chat();
  void set_allocated_chat(std::string* chat);
  private:
  const std::string& _internal_chat() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat(const std::string& value);
  std::string* _internal_mutable_chat();
  public:

  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_LOBBY_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_;
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_LOBBY_REFRESH_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_LOBBY_REFRESH_ROOM) */ {
 public:
  inline C_LOBBY_REFRESH_ROOM() : C_LOBBY_REFRESH_ROOM(nullptr) {}
  ~C_LOBBY_REFRESH_ROOM() override;
  explicit PROTOBUF_CONSTEXPR C_LOBBY_REFRESH_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOBBY_REFRESH_ROOM(const C_LOBBY_REFRESH_ROOM& from);
  C_LOBBY_REFRESH_ROOM(C_LOBBY_REFRESH_ROOM&& from) noexcept
    : C_LOBBY_REFRESH_ROOM() {
    *this = ::std::move(from);
  }

  inline C_LOBBY_REFRESH_ROOM& operator=(const C_LOBBY_REFRESH_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOBBY_REFRESH_ROOM& operator=(C_LOBBY_REFRESH_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOBBY_REFRESH_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOBBY_REFRESH_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_LOBBY_REFRESH_ROOM*>(
               &_C_LOBBY_REFRESH_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_LOBBY_REFRESH_ROOM& a, C_LOBBY_REFRESH_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOBBY_REFRESH_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOBBY_REFRESH_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOBBY_REFRESH_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOBBY_REFRESH_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOBBY_REFRESH_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOBBY_REFRESH_ROOM& from) {
    C_LOBBY_REFRESH_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOBBY_REFRESH_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_LOBBY_REFRESH_ROOM";
  }
  protected:
  explicit C_LOBBY_REFRESH_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
  };
  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_LOBBY_REFRESH_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_LOBBY_REFRESH_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_LOBBY_REFRESH_ROOM) */ {
 public:
  inline S_LOBBY_REFRESH_ROOM() : S_LOBBY_REFRESH_ROOM(nullptr) {}
  ~S_LOBBY_REFRESH_ROOM() override;
  explicit PROTOBUF_CONSTEXPR S_LOBBY_REFRESH_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOBBY_REFRESH_ROOM(const S_LOBBY_REFRESH_ROOM& from);
  S_LOBBY_REFRESH_ROOM(S_LOBBY_REFRESH_ROOM&& from) noexcept
    : S_LOBBY_REFRESH_ROOM() {
    *this = ::std::move(from);
  }

  inline S_LOBBY_REFRESH_ROOM& operator=(const S_LOBBY_REFRESH_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOBBY_REFRESH_ROOM& operator=(S_LOBBY_REFRESH_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOBBY_REFRESH_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOBBY_REFRESH_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_LOBBY_REFRESH_ROOM*>(
               &_S_LOBBY_REFRESH_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(S_LOBBY_REFRESH_ROOM& a, S_LOBBY_REFRESH_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOBBY_REFRESH_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOBBY_REFRESH_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOBBY_REFRESH_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOBBY_REFRESH_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOBBY_REFRESH_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOBBY_REFRESH_ROOM& from) {
    S_LOBBY_REFRESH_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOBBY_REFRESH_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_LOBBY_REFRESH_ROOM";
  }
  protected:
  explicit S_LOBBY_REFRESH_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomsFieldNumber = 1,
  };
  // repeated .ProjectJ.Room rooms = 1;
  int rooms_size() const;
  private:
  int _internal_rooms_size() const;
  public:
  void clear_rooms();
  ::ProjectJ::Room* mutable_rooms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Room >*
      mutable_rooms();
  private:
  const ::ProjectJ::Room& _internal_rooms(int index) const;
  ::ProjectJ::Room* _internal_add_rooms();
  public:
  const ::ProjectJ::Room& rooms(int index) const;
  ::ProjectJ::Room* add_rooms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Room >&
      rooms() const;

  // @@protoc_insertion_point(class_scope:ProjectJ.S_LOBBY_REFRESH_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Room > rooms_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_LOBBY_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_LOBBY_CREATE_ROOM) */ {
 public:
  inline C_LOBBY_CREATE_ROOM() : C_LOBBY_CREATE_ROOM(nullptr) {}
  ~C_LOBBY_CREATE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR C_LOBBY_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOBBY_CREATE_ROOM(const C_LOBBY_CREATE_ROOM& from);
  C_LOBBY_CREATE_ROOM(C_LOBBY_CREATE_ROOM&& from) noexcept
    : C_LOBBY_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline C_LOBBY_CREATE_ROOM& operator=(const C_LOBBY_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOBBY_CREATE_ROOM& operator=(C_LOBBY_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOBBY_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOBBY_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_LOBBY_CREATE_ROOM*>(
               &_C_LOBBY_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(C_LOBBY_CREATE_ROOM& a, C_LOBBY_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOBBY_CREATE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOBBY_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOBBY_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOBBY_CREATE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOBBY_CREATE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOBBY_CREATE_ROOM& from) {
    C_LOBBY_CREATE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOBBY_CREATE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_LOBBY_CREATE_ROOM";
  }
  protected:
  explicit C_LOBBY_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kAccountIdFieldNumber = 1,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_LOBBY_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
    int32_t account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_LOBBY_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_LOBBY_CREATE_ROOM) */ {
 public:
  inline S_LOBBY_CREATE_ROOM() : S_LOBBY_CREATE_ROOM(nullptr) {}
  ~S_LOBBY_CREATE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR S_LOBBY_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOBBY_CREATE_ROOM(const S_LOBBY_CREATE_ROOM& from);
  S_LOBBY_CREATE_ROOM(S_LOBBY_CREATE_ROOM&& from) noexcept
    : S_LOBBY_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline S_LOBBY_CREATE_ROOM& operator=(const S_LOBBY_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOBBY_CREATE_ROOM& operator=(S_LOBBY_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOBBY_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOBBY_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_LOBBY_CREATE_ROOM*>(
               &_S_LOBBY_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_LOBBY_CREATE_ROOM& a, S_LOBBY_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOBBY_CREATE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOBBY_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOBBY_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOBBY_CREATE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOBBY_CREATE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOBBY_CREATE_ROOM& from) {
    S_LOBBY_CREATE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOBBY_CREATE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_LOBBY_CREATE_ROOM";
  }
  protected:
  explicit S_LOBBY_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // .ProjectJ.RoomInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ProjectJ::RoomInfo& info() const;
  PROTOBUF_NODISCARD ::ProjectJ::RoomInfo* release_info();
  ::ProjectJ::RoomInfo* mutable_info();
  void set_allocated_info(::ProjectJ::RoomInfo* info);
  private:
  const ::ProjectJ::RoomInfo& _internal_info() const;
  ::ProjectJ::RoomInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ProjectJ::RoomInfo* info);
  ::ProjectJ::RoomInfo* unsafe_arena_release_info();

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_LOBBY_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::RoomInfo* info_;
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_LOBBY_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_LOBBY_ENTER_ROOM) */ {
 public:
  inline C_LOBBY_ENTER_ROOM() : C_LOBBY_ENTER_ROOM(nullptr) {}
  ~C_LOBBY_ENTER_ROOM() override;
  explicit PROTOBUF_CONSTEXPR C_LOBBY_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOBBY_ENTER_ROOM(const C_LOBBY_ENTER_ROOM& from);
  C_LOBBY_ENTER_ROOM(C_LOBBY_ENTER_ROOM&& from) noexcept
    : C_LOBBY_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline C_LOBBY_ENTER_ROOM& operator=(const C_LOBBY_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOBBY_ENTER_ROOM& operator=(C_LOBBY_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOBBY_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOBBY_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_LOBBY_ENTER_ROOM*>(
               &_C_LOBBY_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_LOBBY_ENTER_ROOM& a, C_LOBBY_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOBBY_ENTER_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOBBY_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOBBY_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOBBY_ENTER_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOBBY_ENTER_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOBBY_ENTER_ROOM& from) {
    C_LOBBY_ENTER_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOBBY_ENTER_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_LOBBY_ENTER_ROOM";
  }
  protected:
  explicit C_LOBBY_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
  };
  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_LOBBY_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t account_id_;
    int32_t room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_LOBBY_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_LOBBY_ENTER_ROOM) */ {
 public:
  inline S_LOBBY_ENTER_ROOM() : S_LOBBY_ENTER_ROOM(nullptr) {}
  ~S_LOBBY_ENTER_ROOM() override;
  explicit PROTOBUF_CONSTEXPR S_LOBBY_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOBBY_ENTER_ROOM(const S_LOBBY_ENTER_ROOM& from);
  S_LOBBY_ENTER_ROOM(S_LOBBY_ENTER_ROOM&& from) noexcept
    : S_LOBBY_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline S_LOBBY_ENTER_ROOM& operator=(const S_LOBBY_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOBBY_ENTER_ROOM& operator=(S_LOBBY_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOBBY_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOBBY_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_LOBBY_ENTER_ROOM*>(
               &_S_LOBBY_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(S_LOBBY_ENTER_ROOM& a, S_LOBBY_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOBBY_ENTER_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOBBY_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOBBY_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOBBY_ENTER_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOBBY_ENTER_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOBBY_ENTER_ROOM& from) {
    S_LOBBY_ENTER_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOBBY_ENTER_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_LOBBY_ENTER_ROOM";
  }
  protected:
  explicit S_LOBBY_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 3,
    kResultFieldNumber = 1,
    kRoomIdFieldNumber = 2,
  };
  // .ProjectJ.RoomInfo info = 3;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ProjectJ::RoomInfo& info() const;
  PROTOBUF_NODISCARD ::ProjectJ::RoomInfo* release_info();
  ::ProjectJ::RoomInfo* mutable_info();
  void set_allocated_info(::ProjectJ::RoomInfo* info);
  private:
  const ::ProjectJ::RoomInfo& _internal_info() const;
  ::ProjectJ::RoomInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ProjectJ::RoomInfo* info);
  ::ProjectJ::RoomInfo* unsafe_arena_release_info();

  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_LOBBY_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::RoomInfo* info_;
    bool result_;
    int32_t room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_LEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_ROOM_LEAVE) */ {
 public:
  inline C_ROOM_LEAVE() : C_ROOM_LEAVE(nullptr) {}
  ~C_ROOM_LEAVE() override;
  explicit PROTOBUF_CONSTEXPR C_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_LEAVE(const C_ROOM_LEAVE& from);
  C_ROOM_LEAVE(C_ROOM_LEAVE&& from) noexcept
    : C_ROOM_LEAVE() {
    *this = ::std::move(from);
  }

  inline C_ROOM_LEAVE& operator=(const C_ROOM_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_LEAVE& operator=(C_ROOM_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_LEAVE* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_LEAVE*>(
               &_C_ROOM_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(C_ROOM_LEAVE& a, C_ROOM_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_LEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOM_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOM_LEAVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ROOM_LEAVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ROOM_LEAVE& from) {
    C_ROOM_LEAVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_LEAVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_ROOM_LEAVE";
  }
  protected:
  explicit C_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
  };
  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_ROOM_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t account_id_;
    int32_t room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_LEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_LEAVE) */ {
 public:
  inline S_ROOM_LEAVE() : S_ROOM_LEAVE(nullptr) {}
  ~S_ROOM_LEAVE() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_LEAVE(const S_ROOM_LEAVE& from);
  S_ROOM_LEAVE(S_ROOM_LEAVE&& from) noexcept
    : S_ROOM_LEAVE() {
    *this = ::std::move(from);
  }

  inline S_ROOM_LEAVE& operator=(const S_ROOM_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_LEAVE& operator=(S_ROOM_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_LEAVE* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_LEAVE*>(
               &_S_ROOM_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_ROOM_LEAVE& a, S_ROOM_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_LEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_LEAVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_LEAVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_LEAVE& from) {
    S_ROOM_LEAVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_LEAVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_LEAVE";
  }
  protected:
  explicit S_ROOM_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_OTHER_ENTER final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_OTHER_ENTER) */ {
 public:
  inline S_ROOM_OTHER_ENTER() : S_ROOM_OTHER_ENTER(nullptr) {}
  ~S_ROOM_OTHER_ENTER() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_OTHER_ENTER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_OTHER_ENTER(const S_ROOM_OTHER_ENTER& from);
  S_ROOM_OTHER_ENTER(S_ROOM_OTHER_ENTER&& from) noexcept
    : S_ROOM_OTHER_ENTER() {
    *this = ::std::move(from);
  }

  inline S_ROOM_OTHER_ENTER& operator=(const S_ROOM_OTHER_ENTER& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_OTHER_ENTER& operator=(S_ROOM_OTHER_ENTER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_OTHER_ENTER& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_OTHER_ENTER* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_OTHER_ENTER*>(
               &_S_ROOM_OTHER_ENTER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_ROOM_OTHER_ENTER& a, S_ROOM_OTHER_ENTER& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_OTHER_ENTER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_OTHER_ENTER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_OTHER_ENTER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_OTHER_ENTER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_OTHER_ENTER& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_OTHER_ENTER& from) {
    S_ROOM_OTHER_ENTER::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_OTHER_ENTER* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_OTHER_ENTER";
  }
  protected:
  explicit S_ROOM_OTHER_ENTER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // .ProjectJ.Player other = 1;
  bool has_other() const;
  private:
  bool _internal_has_other() const;
  public:
  void clear_other();
  const ::ProjectJ::Player& other() const;
  PROTOBUF_NODISCARD ::ProjectJ::Player* release_other();
  ::ProjectJ::Player* mutable_other();
  void set_allocated_other(::ProjectJ::Player* other);
  private:
  const ::ProjectJ::Player& _internal_other() const;
  ::ProjectJ::Player* _internal_mutable_other();
  public:
  void unsafe_arena_set_allocated_other(
      ::ProjectJ::Player* other);
  ::ProjectJ::Player* unsafe_arena_release_other();

  // .ProjectJ.RoomInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ProjectJ::RoomInfo& info() const;
  PROTOBUF_NODISCARD ::ProjectJ::RoomInfo* release_info();
  ::ProjectJ::RoomInfo* mutable_info();
  void set_allocated_info(::ProjectJ::RoomInfo* info);
  private:
  const ::ProjectJ::RoomInfo& _internal_info() const;
  ::ProjectJ::RoomInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ProjectJ::RoomInfo* info);
  ::ProjectJ::RoomInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_OTHER_ENTER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Player* other_;
    ::ProjectJ::RoomInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_OTHER_LEAVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_OTHER_LEAVE) */ {
 public:
  inline S_ROOM_OTHER_LEAVE() : S_ROOM_OTHER_LEAVE(nullptr) {}
  ~S_ROOM_OTHER_LEAVE() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_OTHER_LEAVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_OTHER_LEAVE(const S_ROOM_OTHER_LEAVE& from);
  S_ROOM_OTHER_LEAVE(S_ROOM_OTHER_LEAVE&& from) noexcept
    : S_ROOM_OTHER_LEAVE() {
    *this = ::std::move(from);
  }

  inline S_ROOM_OTHER_LEAVE& operator=(const S_ROOM_OTHER_LEAVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_OTHER_LEAVE& operator=(S_ROOM_OTHER_LEAVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_OTHER_LEAVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_OTHER_LEAVE* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_OTHER_LEAVE*>(
               &_S_ROOM_OTHER_LEAVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(S_ROOM_OTHER_LEAVE& a, S_ROOM_OTHER_LEAVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_OTHER_LEAVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_OTHER_LEAVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_OTHER_LEAVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_OTHER_LEAVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_OTHER_LEAVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_OTHER_LEAVE& from) {
    S_ROOM_OTHER_LEAVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_OTHER_LEAVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_OTHER_LEAVE";
  }
  protected:
  explicit S_ROOM_OTHER_LEAVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOtherFieldNumber = 1,
    kInfoFieldNumber = 2,
  };
  // .ProjectJ.Player other = 1;
  bool has_other() const;
  private:
  bool _internal_has_other() const;
  public:
  void clear_other();
  const ::ProjectJ::Player& other() const;
  PROTOBUF_NODISCARD ::ProjectJ::Player* release_other();
  ::ProjectJ::Player* mutable_other();
  void set_allocated_other(::ProjectJ::Player* other);
  private:
  const ::ProjectJ::Player& _internal_other() const;
  ::ProjectJ::Player* _internal_mutable_other();
  public:
  void unsafe_arena_set_allocated_other(
      ::ProjectJ::Player* other);
  ::ProjectJ::Player* unsafe_arena_release_other();

  // .ProjectJ.RoomInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ProjectJ::RoomInfo& info() const;
  PROTOBUF_NODISCARD ::ProjectJ::RoomInfo* release_info();
  ::ProjectJ::RoomInfo* mutable_info();
  void set_allocated_info(::ProjectJ::RoomInfo* info);
  private:
  const ::ProjectJ::RoomInfo& _internal_info() const;
  ::ProjectJ::RoomInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ProjectJ::RoomInfo* info);
  ::ProjectJ::RoomInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_OTHER_LEAVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Player* other_;
    ::ProjectJ::RoomInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_ROOM_READY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_ROOM_READY) */ {
 public:
  inline C_ROOM_READY() : C_ROOM_READY(nullptr) {}
  ~C_ROOM_READY() override;
  explicit PROTOBUF_CONSTEXPR C_ROOM_READY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ROOM_READY(const C_ROOM_READY& from);
  C_ROOM_READY(C_ROOM_READY&& from) noexcept
    : C_ROOM_READY() {
    *this = ::std::move(from);
  }

  inline C_ROOM_READY& operator=(const C_ROOM_READY& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ROOM_READY& operator=(C_ROOM_READY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ROOM_READY& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ROOM_READY* internal_default_instance() {
    return reinterpret_cast<const C_ROOM_READY*>(
               &_C_ROOM_READY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(C_ROOM_READY& a, C_ROOM_READY& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ROOM_READY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ROOM_READY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ROOM_READY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ROOM_READY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ROOM_READY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ROOM_READY& from) {
    C_ROOM_READY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ROOM_READY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_ROOM_READY";
  }
  protected:
  explicit C_ROOM_READY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
  };
  // int32 account_id = 1;
  void clear_account_id();
  int32_t account_id() const;
  void set_account_id(int32_t value);
  private:
  int32_t _internal_account_id() const;
  void _internal_set_account_id(int32_t value);
  public:

  // int32 room_id = 2;
  void clear_room_id();
  int32_t room_id() const;
  void set_room_id(int32_t value);
  private:
  int32_t _internal_room_id() const;
  void _internal_set_room_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_ROOM_READY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t account_id_;
    int32_t room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_ROOM_READY final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_ROOM_READY) */ {
 public:
  inline S_ROOM_READY() : S_ROOM_READY(nullptr) {}
  ~S_ROOM_READY() override;
  explicit PROTOBUF_CONSTEXPR S_ROOM_READY(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ROOM_READY(const S_ROOM_READY& from);
  S_ROOM_READY(S_ROOM_READY&& from) noexcept
    : S_ROOM_READY() {
    *this = ::std::move(from);
  }

  inline S_ROOM_READY& operator=(const S_ROOM_READY& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ROOM_READY& operator=(S_ROOM_READY&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ROOM_READY& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ROOM_READY* internal_default_instance() {
    return reinterpret_cast<const S_ROOM_READY*>(
               &_S_ROOM_READY_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(S_ROOM_READY& a, S_ROOM_READY& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ROOM_READY* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ROOM_READY* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ROOM_READY* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ROOM_READY>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ROOM_READY& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ROOM_READY& from) {
    S_ROOM_READY::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ROOM_READY* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_ROOM_READY";
  }
  protected:
  explicit S_ROOM_READY(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 2,
  };
  // .ProjectJ.RoomInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::ProjectJ::RoomInfo& info() const;
  PROTOBUF_NODISCARD ::ProjectJ::RoomInfo* release_info();
  ::ProjectJ::RoomInfo* mutable_info();
  void set_allocated_info(::ProjectJ::RoomInfo* info);
  private:
  const ::ProjectJ::RoomInfo& _internal_info() const;
  ::ProjectJ::RoomInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::ProjectJ::RoomInfo* info);
  ::ProjectJ::RoomInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:ProjectJ.S_ROOM_READY)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::RoomInfo* info_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_INIT_GENERATED_ITEMS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_INIT_GENERATED_ITEMS) */ {
 public:
  inline S_MATCH_INIT_GENERATED_ITEMS() : S_MATCH_INIT_GENERATED_ITEMS(nullptr) {}
  ~S_MATCH_INIT_GENERATED_ITEMS() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_INIT_GENERATED_ITEMS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_INIT_GENERATED_ITEMS(const S_MATCH_INIT_GENERATED_ITEMS& from);
  S_MATCH_INIT_GENERATED_ITEMS(S_MATCH_INIT_GENERATED_ITEMS&& from) noexcept
    : S_MATCH_INIT_GENERATED_ITEMS() {
    *this = ::std::move(from);
  }

  inline S_MATCH_INIT_GENERATED_ITEMS& operator=(const S_MATCH_INIT_GENERATED_ITEMS& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_INIT_GENERATED_ITEMS& operator=(S_MATCH_INIT_GENERATED_ITEMS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_INIT_GENERATED_ITEMS& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_INIT_GENERATED_ITEMS* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_INIT_GENERATED_ITEMS*>(
               &_S_MATCH_INIT_GENERATED_ITEMS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S_MATCH_INIT_GENERATED_ITEMS& a, S_MATCH_INIT_GENERATED_ITEMS& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_INIT_GENERATED_ITEMS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_INIT_GENERATED_ITEMS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_INIT_GENERATED_ITEMS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_INIT_GENERATED_ITEMS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_INIT_GENERATED_ITEMS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_INIT_GENERATED_ITEMS& from) {
    S_MATCH_INIT_GENERATED_ITEMS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_INIT_GENERATED_ITEMS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_INIT_GENERATED_ITEMS";
  }
  protected:
  explicit S_MATCH_INIT_GENERATED_ITEMS(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .ProjectJ.Item items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::ProjectJ::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >*
      mutable_items();
  private:
  const ::ProjectJ::Item& _internal_items(int index) const;
  ::ProjectJ::Item* _internal_add_items();
  public:
  const ::ProjectJ::Item& items(int index) const;
  ::ProjectJ::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >&
      items() const;

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_INIT_GENERATED_ITEMS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item > items_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_ITEM_PICKUP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_ITEM_PICKUP) */ {
 public:
  inline C_MATCH_ITEM_PICKUP() : C_MATCH_ITEM_PICKUP(nullptr) {}
  ~C_MATCH_ITEM_PICKUP() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_ITEM_PICKUP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_ITEM_PICKUP(const C_MATCH_ITEM_PICKUP& from);
  C_MATCH_ITEM_PICKUP(C_MATCH_ITEM_PICKUP&& from) noexcept
    : C_MATCH_ITEM_PICKUP() {
    *this = ::std::move(from);
  }

  inline C_MATCH_ITEM_PICKUP& operator=(const C_MATCH_ITEM_PICKUP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_ITEM_PICKUP& operator=(C_MATCH_ITEM_PICKUP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_ITEM_PICKUP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_ITEM_PICKUP* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_ITEM_PICKUP*>(
               &_C_MATCH_ITEM_PICKUP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(C_MATCH_ITEM_PICKUP& a, C_MATCH_ITEM_PICKUP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_ITEM_PICKUP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_ITEM_PICKUP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_ITEM_PICKUP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_ITEM_PICKUP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_ITEM_PICKUP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_ITEM_PICKUP& from) {
    C_MATCH_ITEM_PICKUP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_ITEM_PICKUP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_ITEM_PICKUP";
  }
  protected:
  explicit C_MATCH_ITEM_PICKUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
    kItemIdFieldNumber = 2,
  };
  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // int32 item_id = 2;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_ITEM_PICKUP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t player_index_;
    int32_t item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_ITEM_PICKUP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_ITEM_PICKUP) */ {
 public:
  inline S_MATCH_ITEM_PICKUP() : S_MATCH_ITEM_PICKUP(nullptr) {}
  ~S_MATCH_ITEM_PICKUP() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_ITEM_PICKUP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_ITEM_PICKUP(const S_MATCH_ITEM_PICKUP& from);
  S_MATCH_ITEM_PICKUP(S_MATCH_ITEM_PICKUP&& from) noexcept
    : S_MATCH_ITEM_PICKUP() {
    *this = ::std::move(from);
  }

  inline S_MATCH_ITEM_PICKUP& operator=(const S_MATCH_ITEM_PICKUP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_ITEM_PICKUP& operator=(S_MATCH_ITEM_PICKUP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_ITEM_PICKUP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_ITEM_PICKUP* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_ITEM_PICKUP*>(
               &_S_MATCH_ITEM_PICKUP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(S_MATCH_ITEM_PICKUP& a, S_MATCH_ITEM_PICKUP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_ITEM_PICKUP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_ITEM_PICKUP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_ITEM_PICKUP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_ITEM_PICKUP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_ITEM_PICKUP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_ITEM_PICKUP& from) {
    S_MATCH_ITEM_PICKUP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_ITEM_PICKUP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_ITEM_PICKUP";
  }
  protected:
  explicit S_MATCH_ITEM_PICKUP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kPlayerIndexFieldNumber = 2,
    kItemIdFieldNumber = 3,
    kTopLeftIndexFieldNumber = 4,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // int32 player_index = 2;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // int32 item_id = 3;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 top_left_index = 4;
  void clear_top_left_index();
  int32_t top_left_index() const;
  void set_top_left_index(int32_t value);
  private:
  int32_t _internal_top_left_index() const;
  void _internal_set_top_left_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_ITEM_PICKUP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    int32_t player_index_;
    int32_t item_id_;
    int32_t top_left_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_ITEM_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_ITEM_MOVE) */ {
 public:
  inline C_MATCH_ITEM_MOVE() : C_MATCH_ITEM_MOVE(nullptr) {}
  ~C_MATCH_ITEM_MOVE() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_ITEM_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_ITEM_MOVE(const C_MATCH_ITEM_MOVE& from);
  C_MATCH_ITEM_MOVE(C_MATCH_ITEM_MOVE&& from) noexcept
    : C_MATCH_ITEM_MOVE() {
    *this = ::std::move(from);
  }

  inline C_MATCH_ITEM_MOVE& operator=(const C_MATCH_ITEM_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_ITEM_MOVE& operator=(C_MATCH_ITEM_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_ITEM_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_ITEM_MOVE* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_ITEM_MOVE*>(
               &_C_MATCH_ITEM_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(C_MATCH_ITEM_MOVE& a, C_MATCH_ITEM_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_ITEM_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_ITEM_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_ITEM_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_ITEM_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_ITEM_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_ITEM_MOVE& from) {
    C_MATCH_ITEM_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_ITEM_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_ITEM_MOVE";
  }
  protected:
  explicit C_MATCH_ITEM_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIndexFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kIsItemRotatedFieldNumber = 3,
    kTargetTopLeftIndexFieldNumber = 4,
  };
  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // int32 item_id = 2;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 is_item_rotated = 3;
  void clear_is_item_rotated();
  int32_t is_item_rotated() const;
  void set_is_item_rotated(int32_t value);
  private:
  int32_t _internal_is_item_rotated() const;
  void _internal_set_is_item_rotated(int32_t value);
  public:

  // int32 target_top_left_index = 4;
  void clear_target_top_left_index();
  int32_t target_top_left_index() const;
  void set_target_top_left_index(int32_t value);
  private:
  int32_t _internal_target_top_left_index() const;
  void _internal_set_target_top_left_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_ITEM_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t player_index_;
    int32_t item_id_;
    int32_t is_item_rotated_;
    int32_t target_top_left_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_ITEM_MOVE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_ITEM_MOVE) */ {
 public:
  inline S_MATCH_ITEM_MOVE() : S_MATCH_ITEM_MOVE(nullptr) {}
  ~S_MATCH_ITEM_MOVE() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_ITEM_MOVE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_ITEM_MOVE(const S_MATCH_ITEM_MOVE& from);
  S_MATCH_ITEM_MOVE(S_MATCH_ITEM_MOVE&& from) noexcept
    : S_MATCH_ITEM_MOVE() {
    *this = ::std::move(from);
  }

  inline S_MATCH_ITEM_MOVE& operator=(const S_MATCH_ITEM_MOVE& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_ITEM_MOVE& operator=(S_MATCH_ITEM_MOVE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_ITEM_MOVE& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_ITEM_MOVE* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_ITEM_MOVE*>(
               &_S_MATCH_ITEM_MOVE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(S_MATCH_ITEM_MOVE& a, S_MATCH_ITEM_MOVE& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_ITEM_MOVE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_ITEM_MOVE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_ITEM_MOVE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_ITEM_MOVE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_ITEM_MOVE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_ITEM_MOVE& from) {
    S_MATCH_ITEM_MOVE::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_ITEM_MOVE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_ITEM_MOVE";
  }
  protected:
  explicit S_MATCH_ITEM_MOVE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kIsItemRotatedFieldNumber = 3,
    kTopLeftIndexFieldNumber = 4,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // int32 item_id = 2;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // int32 is_item_rotated = 3;
  void clear_is_item_rotated();
  int32_t is_item_rotated() const;
  void set_is_item_rotated(int32_t value);
  private:
  int32_t _internal_is_item_rotated() const;
  void _internal_set_is_item_rotated(int32_t value);
  public:

  // int32 top_left_index = 4;
  void clear_top_left_index();
  int32_t top_left_index() const;
  void set_top_left_index(int32_t value);
  private:
  int32_t _internal_top_left_index() const;
  void _internal_set_top_left_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_ITEM_MOVE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    int32_t item_id_;
    int32_t is_item_rotated_;
    int32_t top_left_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class C_MATCH_ITEM_DROP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.C_MATCH_ITEM_DROP) */ {
 public:
  inline C_MATCH_ITEM_DROP() : C_MATCH_ITEM_DROP(nullptr) {}
  ~C_MATCH_ITEM_DROP() override;
  explicit PROTOBUF_CONSTEXPR C_MATCH_ITEM_DROP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MATCH_ITEM_DROP(const C_MATCH_ITEM_DROP& from);
  C_MATCH_ITEM_DROP(C_MATCH_ITEM_DROP&& from) noexcept
    : C_MATCH_ITEM_DROP() {
    *this = ::std::move(from);
  }

  inline C_MATCH_ITEM_DROP& operator=(const C_MATCH_ITEM_DROP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MATCH_ITEM_DROP& operator=(C_MATCH_ITEM_DROP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MATCH_ITEM_DROP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MATCH_ITEM_DROP* internal_default_instance() {
    return reinterpret_cast<const C_MATCH_ITEM_DROP*>(
               &_C_MATCH_ITEM_DROP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(C_MATCH_ITEM_DROP& a, C_MATCH_ITEM_DROP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MATCH_ITEM_DROP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MATCH_ITEM_DROP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MATCH_ITEM_DROP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MATCH_ITEM_DROP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MATCH_ITEM_DROP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MATCH_ITEM_DROP& from) {
    C_MATCH_ITEM_DROP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MATCH_ITEM_DROP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.C_MATCH_ITEM_DROP";
  }
  protected:
  explicit C_MATCH_ITEM_DROP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropItemPositionFieldNumber = 2,
    kDropItemRotationFieldNumber = 3,
    kPlayerIndexFieldNumber = 1,
    kItemIdFieldNumber = 4,
  };
  // .ProjectJ.Vector drop_item_position = 2;
  bool has_drop_item_position() const;
  private:
  bool _internal_has_drop_item_position() const;
  public:
  void clear_drop_item_position();
  const ::ProjectJ::Vector& drop_item_position() const;
  PROTOBUF_NODISCARD ::ProjectJ::Vector* release_drop_item_position();
  ::ProjectJ::Vector* mutable_drop_item_position();
  void set_allocated_drop_item_position(::ProjectJ::Vector* drop_item_position);
  private:
  const ::ProjectJ::Vector& _internal_drop_item_position() const;
  ::ProjectJ::Vector* _internal_mutable_drop_item_position();
  public:
  void unsafe_arena_set_allocated_drop_item_position(
      ::ProjectJ::Vector* drop_item_position);
  ::ProjectJ::Vector* unsafe_arena_release_drop_item_position();

  // .ProjectJ.Rotator drop_item_rotation = 3;
  bool has_drop_item_rotation() const;
  private:
  bool _internal_has_drop_item_rotation() const;
  public:
  void clear_drop_item_rotation();
  const ::ProjectJ::Rotator& drop_item_rotation() const;
  PROTOBUF_NODISCARD ::ProjectJ::Rotator* release_drop_item_rotation();
  ::ProjectJ::Rotator* mutable_drop_item_rotation();
  void set_allocated_drop_item_rotation(::ProjectJ::Rotator* drop_item_rotation);
  private:
  const ::ProjectJ::Rotator& _internal_drop_item_rotation() const;
  ::ProjectJ::Rotator* _internal_mutable_drop_item_rotation();
  public:
  void unsafe_arena_set_allocated_drop_item_rotation(
      ::ProjectJ::Rotator* drop_item_rotation);
  ::ProjectJ::Rotator* unsafe_arena_release_drop_item_rotation();

  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // int32 item_id = 4;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.C_MATCH_ITEM_DROP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Vector* drop_item_position_;
    ::ProjectJ::Rotator* drop_item_rotation_;
    int32_t player_index_;
    int32_t item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// -------------------------------------------------------------------

class S_MATCH_ITEM_DROP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ProjectJ.S_MATCH_ITEM_DROP) */ {
 public:
  inline S_MATCH_ITEM_DROP() : S_MATCH_ITEM_DROP(nullptr) {}
  ~S_MATCH_ITEM_DROP() override;
  explicit PROTOBUF_CONSTEXPR S_MATCH_ITEM_DROP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MATCH_ITEM_DROP(const S_MATCH_ITEM_DROP& from);
  S_MATCH_ITEM_DROP(S_MATCH_ITEM_DROP&& from) noexcept
    : S_MATCH_ITEM_DROP() {
    *this = ::std::move(from);
  }

  inline S_MATCH_ITEM_DROP& operator=(const S_MATCH_ITEM_DROP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MATCH_ITEM_DROP& operator=(S_MATCH_ITEM_DROP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MATCH_ITEM_DROP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MATCH_ITEM_DROP* internal_default_instance() {
    return reinterpret_cast<const S_MATCH_ITEM_DROP*>(
               &_S_MATCH_ITEM_DROP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(S_MATCH_ITEM_DROP& a, S_MATCH_ITEM_DROP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MATCH_ITEM_DROP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MATCH_ITEM_DROP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MATCH_ITEM_DROP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MATCH_ITEM_DROP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MATCH_ITEM_DROP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MATCH_ITEM_DROP& from) {
    S_MATCH_ITEM_DROP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MATCH_ITEM_DROP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ProjectJ.S_MATCH_ITEM_DROP";
  }
  protected:
  explicit S_MATCH_ITEM_DROP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDropItemPositionFieldNumber = 2,
    kDropItemRotationFieldNumber = 3,
    kPlayerIndexFieldNumber = 1,
    kItemIdFieldNumber = 4,
  };
  // .ProjectJ.Vector drop_item_position = 2;
  bool has_drop_item_position() const;
  private:
  bool _internal_has_drop_item_position() const;
  public:
  void clear_drop_item_position();
  const ::ProjectJ::Vector& drop_item_position() const;
  PROTOBUF_NODISCARD ::ProjectJ::Vector* release_drop_item_position();
  ::ProjectJ::Vector* mutable_drop_item_position();
  void set_allocated_drop_item_position(::ProjectJ::Vector* drop_item_position);
  private:
  const ::ProjectJ::Vector& _internal_drop_item_position() const;
  ::ProjectJ::Vector* _internal_mutable_drop_item_position();
  public:
  void unsafe_arena_set_allocated_drop_item_position(
      ::ProjectJ::Vector* drop_item_position);
  ::ProjectJ::Vector* unsafe_arena_release_drop_item_position();

  // .ProjectJ.Rotator drop_item_rotation = 3;
  bool has_drop_item_rotation() const;
  private:
  bool _internal_has_drop_item_rotation() const;
  public:
  void clear_drop_item_rotation();
  const ::ProjectJ::Rotator& drop_item_rotation() const;
  PROTOBUF_NODISCARD ::ProjectJ::Rotator* release_drop_item_rotation();
  ::ProjectJ::Rotator* mutable_drop_item_rotation();
  void set_allocated_drop_item_rotation(::ProjectJ::Rotator* drop_item_rotation);
  private:
  const ::ProjectJ::Rotator& _internal_drop_item_rotation() const;
  ::ProjectJ::Rotator* _internal_mutable_drop_item_rotation();
  public:
  void unsafe_arena_set_allocated_drop_item_rotation(
      ::ProjectJ::Rotator* drop_item_rotation);
  ::ProjectJ::Rotator* unsafe_arena_release_drop_item_rotation();

  // int32 player_index = 1;
  void clear_player_index();
  int32_t player_index() const;
  void set_player_index(int32_t value);
  private:
  int32_t _internal_player_index() const;
  void _internal_set_player_index(int32_t value);
  public:

  // int32 item_id = 4;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ProjectJ.S_MATCH_ITEM_DROP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::ProjectJ::Vector* drop_item_position_;
    ::ProjectJ::Rotator* drop_item_rotation_;
    int32_t player_index_;
    int32_t item_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_VERIFY_TOKEN

// int32 account_id = 1;
inline void C_VERIFY_TOKEN::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_VERIFY_TOKEN::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_VERIFY_TOKEN::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_VERIFY_TOKEN.account_id)
  return _internal_account_id();
}
inline void C_VERIFY_TOKEN::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_VERIFY_TOKEN::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_VERIFY_TOKEN.account_id)
}

// string token = 2;
inline void C_VERIFY_TOKEN::clear_token() {
  _impl_.token_.ClearToEmpty();
}
inline const std::string& C_VERIFY_TOKEN::token() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_VERIFY_TOKEN.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_VERIFY_TOKEN::set_token(ArgT0&& arg0, ArgT... args) {
 
 _impl_.token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.C_VERIFY_TOKEN.token)
}
inline std::string* C_VERIFY_TOKEN::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_VERIFY_TOKEN.token)
  return _s;
}
inline const std::string& C_VERIFY_TOKEN::_internal_token() const {
  return _impl_.token_.Get();
}
inline void C_VERIFY_TOKEN::_internal_set_token(const std::string& value) {
  
  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* C_VERIFY_TOKEN::_internal_mutable_token() {
  
  return _impl_.token_.Mutable(GetArenaForAllocation());
}
inline std::string* C_VERIFY_TOKEN::release_token() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_VERIFY_TOKEN.token)
  return _impl_.token_.Release();
}
inline void C_VERIFY_TOKEN::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  _impl_.token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.token_.IsDefault()) {
    _impl_.token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_VERIFY_TOKEN.token)
}

// -------------------------------------------------------------------

// S_VERIFY_TOKEN

// bool result = 1;
inline void S_VERIFY_TOKEN::clear_result() {
  _impl_.result_ = false;
}
inline bool S_VERIFY_TOKEN::_internal_result() const {
  return _impl_.result_;
}
inline bool S_VERIFY_TOKEN::result() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_VERIFY_TOKEN.result)
  return _internal_result();
}
inline void S_VERIFY_TOKEN::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S_VERIFY_TOKEN::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_VERIFY_TOKEN.result)
}

// -------------------------------------------------------------------

// C_LOBBY_CHAT

// int32 account_id = 1;
inline void C_LOBBY_CHAT::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_LOBBY_CHAT::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_LOBBY_CHAT::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_CHAT.account_id)
  return _internal_account_id();
}
inline void C_LOBBY_CHAT::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_LOBBY_CHAT::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_CHAT.account_id)
}

// string nickname = 2;
inline void C_LOBBY_CHAT::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& C_LOBBY_CHAT::nickname() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_CHAT.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOBBY_CHAT::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_CHAT.nickname)
}
inline std::string* C_LOBBY_CHAT::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_LOBBY_CHAT.nickname)
  return _s;
}
inline const std::string& C_LOBBY_CHAT::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void C_LOBBY_CHAT::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOBBY_CHAT::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOBBY_CHAT::release_nickname() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_LOBBY_CHAT.nickname)
  return _impl_.nickname_.Release();
}
inline void C_LOBBY_CHAT::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_LOBBY_CHAT.nickname)
}

// string chat = 3;
inline void C_LOBBY_CHAT::clear_chat() {
  _impl_.chat_.ClearToEmpty();
}
inline const std::string& C_LOBBY_CHAT::chat() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_CHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOBBY_CHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_CHAT.chat)
}
inline std::string* C_LOBBY_CHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_LOBBY_CHAT.chat)
  return _s;
}
inline const std::string& C_LOBBY_CHAT::_internal_chat() const {
  return _impl_.chat_.Get();
}
inline void C_LOBBY_CHAT::_internal_set_chat(const std::string& value) {
  
  _impl_.chat_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOBBY_CHAT::_internal_mutable_chat() {
  
  return _impl_.chat_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOBBY_CHAT::release_chat() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_LOBBY_CHAT.chat)
  return _impl_.chat_.Release();
}
inline void C_LOBBY_CHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  _impl_.chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_.IsDefault()) {
    _impl_.chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_LOBBY_CHAT.chat)
}

// -------------------------------------------------------------------

// S_LOBBY_CHAT

// int32 account_id = 1;
inline void S_LOBBY_CHAT::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t S_LOBBY_CHAT::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t S_LOBBY_CHAT::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_CHAT.account_id)
  return _internal_account_id();
}
inline void S_LOBBY_CHAT::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void S_LOBBY_CHAT::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_CHAT.account_id)
}

// string nickname = 2;
inline void S_LOBBY_CHAT::clear_nickname() {
  _impl_.nickname_.ClearToEmpty();
}
inline const std::string& S_LOBBY_CHAT::nickname() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_CHAT.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_LOBBY_CHAT::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.nickname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_CHAT.nickname)
}
inline std::string* S_LOBBY_CHAT::mutable_nickname() {
  std::string* _s = _internal_mutable_nickname();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_LOBBY_CHAT.nickname)
  return _s;
}
inline const std::string& S_LOBBY_CHAT::_internal_nickname() const {
  return _impl_.nickname_.Get();
}
inline void S_LOBBY_CHAT::_internal_set_nickname(const std::string& value) {
  
  _impl_.nickname_.Set(value, GetArenaForAllocation());
}
inline std::string* S_LOBBY_CHAT::_internal_mutable_nickname() {
  
  return _impl_.nickname_.Mutable(GetArenaForAllocation());
}
inline std::string* S_LOBBY_CHAT::release_nickname() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_LOBBY_CHAT.nickname)
  return _impl_.nickname_.Release();
}
inline void S_LOBBY_CHAT::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  _impl_.nickname_.SetAllocated(nickname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.nickname_.IsDefault()) {
    _impl_.nickname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_LOBBY_CHAT.nickname)
}

// string chat = 3;
inline void S_LOBBY_CHAT::clear_chat() {
  _impl_.chat_.ClearToEmpty();
}
inline const std::string& S_LOBBY_CHAT::chat() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_CHAT.chat)
  return _internal_chat();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_LOBBY_CHAT::set_chat(ArgT0&& arg0, ArgT... args) {
 
 _impl_.chat_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_CHAT.chat)
}
inline std::string* S_LOBBY_CHAT::mutable_chat() {
  std::string* _s = _internal_mutable_chat();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_LOBBY_CHAT.chat)
  return _s;
}
inline const std::string& S_LOBBY_CHAT::_internal_chat() const {
  return _impl_.chat_.Get();
}
inline void S_LOBBY_CHAT::_internal_set_chat(const std::string& value) {
  
  _impl_.chat_.Set(value, GetArenaForAllocation());
}
inline std::string* S_LOBBY_CHAT::_internal_mutable_chat() {
  
  return _impl_.chat_.Mutable(GetArenaForAllocation());
}
inline std::string* S_LOBBY_CHAT::release_chat() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_LOBBY_CHAT.chat)
  return _impl_.chat_.Release();
}
inline void S_LOBBY_CHAT::set_allocated_chat(std::string* chat) {
  if (chat != nullptr) {
    
  } else {
    
  }
  _impl_.chat_.SetAllocated(chat, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.chat_.IsDefault()) {
    _impl_.chat_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_LOBBY_CHAT.chat)
}

// -------------------------------------------------------------------

// C_LOBBY_REFRESH_ROOM

// int32 account_id = 1;
inline void C_LOBBY_REFRESH_ROOM::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_LOBBY_REFRESH_ROOM::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_LOBBY_REFRESH_ROOM::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_REFRESH_ROOM.account_id)
  return _internal_account_id();
}
inline void C_LOBBY_REFRESH_ROOM::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_LOBBY_REFRESH_ROOM::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_REFRESH_ROOM.account_id)
}

// -------------------------------------------------------------------

// S_LOBBY_REFRESH_ROOM

// repeated .ProjectJ.Room rooms = 1;
inline int S_LOBBY_REFRESH_ROOM::_internal_rooms_size() const {
  return _impl_.rooms_.size();
}
inline int S_LOBBY_REFRESH_ROOM::rooms_size() const {
  return _internal_rooms_size();
}
inline ::ProjectJ::Room* S_LOBBY_REFRESH_ROOM::mutable_rooms(int index) {
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_LOBBY_REFRESH_ROOM.rooms)
  return _impl_.rooms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Room >*
S_LOBBY_REFRESH_ROOM::mutable_rooms() {
  // @@protoc_insertion_point(field_mutable_list:ProjectJ.S_LOBBY_REFRESH_ROOM.rooms)
  return &_impl_.rooms_;
}
inline const ::ProjectJ::Room& S_LOBBY_REFRESH_ROOM::_internal_rooms(int index) const {
  return _impl_.rooms_.Get(index);
}
inline const ::ProjectJ::Room& S_LOBBY_REFRESH_ROOM::rooms(int index) const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_REFRESH_ROOM.rooms)
  return _internal_rooms(index);
}
inline ::ProjectJ::Room* S_LOBBY_REFRESH_ROOM::_internal_add_rooms() {
  return _impl_.rooms_.Add();
}
inline ::ProjectJ::Room* S_LOBBY_REFRESH_ROOM::add_rooms() {
  ::ProjectJ::Room* _add = _internal_add_rooms();
  // @@protoc_insertion_point(field_add:ProjectJ.S_LOBBY_REFRESH_ROOM.rooms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Room >&
S_LOBBY_REFRESH_ROOM::rooms() const {
  // @@protoc_insertion_point(field_list:ProjectJ.S_LOBBY_REFRESH_ROOM.rooms)
  return _impl_.rooms_;
}

// -------------------------------------------------------------------

// C_LOBBY_CREATE_ROOM

// int32 account_id = 1;
inline void C_LOBBY_CREATE_ROOM::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_LOBBY_CREATE_ROOM::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_LOBBY_CREATE_ROOM::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_CREATE_ROOM.account_id)
  return _internal_account_id();
}
inline void C_LOBBY_CREATE_ROOM::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_LOBBY_CREATE_ROOM::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_CREATE_ROOM.account_id)
}

// string title = 2;
inline void C_LOBBY_CREATE_ROOM::clear_title() {
  _impl_.title_.ClearToEmpty();
}
inline const std::string& C_LOBBY_CREATE_ROOM::title() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_CREATE_ROOM.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOBBY_CREATE_ROOM::set_title(ArgT0&& arg0, ArgT... args) {
 
 _impl_.title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_CREATE_ROOM.title)
}
inline std::string* C_LOBBY_CREATE_ROOM::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_LOBBY_CREATE_ROOM.title)
  return _s;
}
inline const std::string& C_LOBBY_CREATE_ROOM::_internal_title() const {
  return _impl_.title_.Get();
}
inline void C_LOBBY_CREATE_ROOM::_internal_set_title(const std::string& value) {
  
  _impl_.title_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOBBY_CREATE_ROOM::_internal_mutable_title() {
  
  return _impl_.title_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOBBY_CREATE_ROOM::release_title() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_LOBBY_CREATE_ROOM.title)
  return _impl_.title_.Release();
}
inline void C_LOBBY_CREATE_ROOM::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  _impl_.title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.title_.IsDefault()) {
    _impl_.title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_LOBBY_CREATE_ROOM.title)
}

// -------------------------------------------------------------------

// S_LOBBY_CREATE_ROOM

// bool result = 1;
inline void S_LOBBY_CREATE_ROOM::clear_result() {
  _impl_.result_ = false;
}
inline bool S_LOBBY_CREATE_ROOM::_internal_result() const {
  return _impl_.result_;
}
inline bool S_LOBBY_CREATE_ROOM::result() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_CREATE_ROOM.result)
  return _internal_result();
}
inline void S_LOBBY_CREATE_ROOM::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S_LOBBY_CREATE_ROOM::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_CREATE_ROOM.result)
}

// .ProjectJ.RoomInfo info = 2;
inline bool S_LOBBY_CREATE_ROOM::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_LOBBY_CREATE_ROOM::has_info() const {
  return _internal_has_info();
}
inline const ::ProjectJ::RoomInfo& S_LOBBY_CREATE_ROOM::_internal_info() const {
  const ::ProjectJ::RoomInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::RoomInfo&>(
      ::ProjectJ::_RoomInfo_default_instance_);
}
inline const ::ProjectJ::RoomInfo& S_LOBBY_CREATE_ROOM::info() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_CREATE_ROOM.info)
  return _internal_info();
}
inline void S_LOBBY_CREATE_ROOM::unsafe_arena_set_allocated_info(
    ::ProjectJ::RoomInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_LOBBY_CREATE_ROOM.info)
}
inline ::ProjectJ::RoomInfo* S_LOBBY_CREATE_ROOM::release_info() {
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::RoomInfo* S_LOBBY_CREATE_ROOM::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_LOBBY_CREATE_ROOM.info)
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::ProjectJ::RoomInfo* S_LOBBY_CREATE_ROOM::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::RoomInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::ProjectJ::RoomInfo* S_LOBBY_CREATE_ROOM::mutable_info() {
  ::ProjectJ::RoomInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_LOBBY_CREATE_ROOM.info)
  return _msg;
}
inline void S_LOBBY_CREATE_ROOM::set_allocated_info(::ProjectJ::RoomInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_LOBBY_CREATE_ROOM.info)
}

// -------------------------------------------------------------------

// C_LOBBY_ENTER_ROOM

// int32 account_id = 1;
inline void C_LOBBY_ENTER_ROOM::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_LOBBY_ENTER_ROOM::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_LOBBY_ENTER_ROOM::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_ENTER_ROOM.account_id)
  return _internal_account_id();
}
inline void C_LOBBY_ENTER_ROOM::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_LOBBY_ENTER_ROOM::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_ENTER_ROOM.account_id)
}

// int32 room_id = 2;
inline void C_LOBBY_ENTER_ROOM::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t C_LOBBY_ENTER_ROOM::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t C_LOBBY_ENTER_ROOM::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_LOBBY_ENTER_ROOM.room_id)
  return _internal_room_id();
}
inline void C_LOBBY_ENTER_ROOM::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void C_LOBBY_ENTER_ROOM::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_LOBBY_ENTER_ROOM.room_id)
}

// -------------------------------------------------------------------

// S_LOBBY_ENTER_ROOM

// bool result = 1;
inline void S_LOBBY_ENTER_ROOM::clear_result() {
  _impl_.result_ = false;
}
inline bool S_LOBBY_ENTER_ROOM::_internal_result() const {
  return _impl_.result_;
}
inline bool S_LOBBY_ENTER_ROOM::result() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_ENTER_ROOM.result)
  return _internal_result();
}
inline void S_LOBBY_ENTER_ROOM::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S_LOBBY_ENTER_ROOM::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_ENTER_ROOM.result)
}

// int32 room_id = 2;
inline void S_LOBBY_ENTER_ROOM::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t S_LOBBY_ENTER_ROOM::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t S_LOBBY_ENTER_ROOM::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_ENTER_ROOM.room_id)
  return _internal_room_id();
}
inline void S_LOBBY_ENTER_ROOM::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void S_LOBBY_ENTER_ROOM::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_LOBBY_ENTER_ROOM.room_id)
}

// .ProjectJ.RoomInfo info = 3;
inline bool S_LOBBY_ENTER_ROOM::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_LOBBY_ENTER_ROOM::has_info() const {
  return _internal_has_info();
}
inline const ::ProjectJ::RoomInfo& S_LOBBY_ENTER_ROOM::_internal_info() const {
  const ::ProjectJ::RoomInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::RoomInfo&>(
      ::ProjectJ::_RoomInfo_default_instance_);
}
inline const ::ProjectJ::RoomInfo& S_LOBBY_ENTER_ROOM::info() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_LOBBY_ENTER_ROOM.info)
  return _internal_info();
}
inline void S_LOBBY_ENTER_ROOM::unsafe_arena_set_allocated_info(
    ::ProjectJ::RoomInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_LOBBY_ENTER_ROOM.info)
}
inline ::ProjectJ::RoomInfo* S_LOBBY_ENTER_ROOM::release_info() {
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::RoomInfo* S_LOBBY_ENTER_ROOM::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_LOBBY_ENTER_ROOM.info)
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::ProjectJ::RoomInfo* S_LOBBY_ENTER_ROOM::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::RoomInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::ProjectJ::RoomInfo* S_LOBBY_ENTER_ROOM::mutable_info() {
  ::ProjectJ::RoomInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_LOBBY_ENTER_ROOM.info)
  return _msg;
}
inline void S_LOBBY_ENTER_ROOM::set_allocated_info(::ProjectJ::RoomInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_LOBBY_ENTER_ROOM.info)
}

// -------------------------------------------------------------------

// C_ROOM_LEAVE

// int32 account_id = 1;
inline void C_ROOM_LEAVE::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_ROOM_LEAVE::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_ROOM_LEAVE::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_LEAVE.account_id)
  return _internal_account_id();
}
inline void C_ROOM_LEAVE::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_ROOM_LEAVE::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_LEAVE.account_id)
}

// int32 room_id = 2;
inline void C_ROOM_LEAVE::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t C_ROOM_LEAVE::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t C_ROOM_LEAVE::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_LEAVE.room_id)
  return _internal_room_id();
}
inline void C_ROOM_LEAVE::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void C_ROOM_LEAVE::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_LEAVE.room_id)
}

// -------------------------------------------------------------------

// S_ROOM_LEAVE

// bool result = 1;
inline void S_ROOM_LEAVE::clear_result() {
  _impl_.result_ = false;
}
inline bool S_ROOM_LEAVE::_internal_result() const {
  return _impl_.result_;
}
inline bool S_ROOM_LEAVE::result() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_LEAVE.result)
  return _internal_result();
}
inline void S_ROOM_LEAVE::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S_ROOM_LEAVE::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_ROOM_LEAVE.result)
}

// -------------------------------------------------------------------

// S_ROOM_OTHER_ENTER

// .ProjectJ.Player other = 1;
inline bool S_ROOM_OTHER_ENTER::_internal_has_other() const {
  return this != internal_default_instance() && _impl_.other_ != nullptr;
}
inline bool S_ROOM_OTHER_ENTER::has_other() const {
  return _internal_has_other();
}
inline const ::ProjectJ::Player& S_ROOM_OTHER_ENTER::_internal_other() const {
  const ::ProjectJ::Player* p = _impl_.other_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Player&>(
      ::ProjectJ::_Player_default_instance_);
}
inline const ::ProjectJ::Player& S_ROOM_OTHER_ENTER::other() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_OTHER_ENTER.other)
  return _internal_other();
}
inline void S_ROOM_OTHER_ENTER::unsafe_arena_set_allocated_other(
    ::ProjectJ::Player* other) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.other_);
  }
  _impl_.other_ = other;
  if (other) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_ROOM_OTHER_ENTER.other)
}
inline ::ProjectJ::Player* S_ROOM_OTHER_ENTER::release_other() {
  
  ::ProjectJ::Player* temp = _impl_.other_;
  _impl_.other_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Player* S_ROOM_OTHER_ENTER::unsafe_arena_release_other() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_ROOM_OTHER_ENTER.other)
  
  ::ProjectJ::Player* temp = _impl_.other_;
  _impl_.other_ = nullptr;
  return temp;
}
inline ::ProjectJ::Player* S_ROOM_OTHER_ENTER::_internal_mutable_other() {
  
  if (_impl_.other_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Player>(GetArenaForAllocation());
    _impl_.other_ = p;
  }
  return _impl_.other_;
}
inline ::ProjectJ::Player* S_ROOM_OTHER_ENTER::mutable_other() {
  ::ProjectJ::Player* _msg = _internal_mutable_other();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_ROOM_OTHER_ENTER.other)
  return _msg;
}
inline void S_ROOM_OTHER_ENTER::set_allocated_other(::ProjectJ::Player* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.other_);
  }
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other));
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.other_ = other;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_ROOM_OTHER_ENTER.other)
}

// .ProjectJ.RoomInfo info = 2;
inline bool S_ROOM_OTHER_ENTER::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_ROOM_OTHER_ENTER::has_info() const {
  return _internal_has_info();
}
inline const ::ProjectJ::RoomInfo& S_ROOM_OTHER_ENTER::_internal_info() const {
  const ::ProjectJ::RoomInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::RoomInfo&>(
      ::ProjectJ::_RoomInfo_default_instance_);
}
inline const ::ProjectJ::RoomInfo& S_ROOM_OTHER_ENTER::info() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_OTHER_ENTER.info)
  return _internal_info();
}
inline void S_ROOM_OTHER_ENTER::unsafe_arena_set_allocated_info(
    ::ProjectJ::RoomInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_ROOM_OTHER_ENTER.info)
}
inline ::ProjectJ::RoomInfo* S_ROOM_OTHER_ENTER::release_info() {
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::RoomInfo* S_ROOM_OTHER_ENTER::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_ROOM_OTHER_ENTER.info)
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::ProjectJ::RoomInfo* S_ROOM_OTHER_ENTER::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::RoomInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::ProjectJ::RoomInfo* S_ROOM_OTHER_ENTER::mutable_info() {
  ::ProjectJ::RoomInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_ROOM_OTHER_ENTER.info)
  return _msg;
}
inline void S_ROOM_OTHER_ENTER::set_allocated_info(::ProjectJ::RoomInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_ROOM_OTHER_ENTER.info)
}

// -------------------------------------------------------------------

// S_ROOM_OTHER_LEAVE

// .ProjectJ.Player other = 1;
inline bool S_ROOM_OTHER_LEAVE::_internal_has_other() const {
  return this != internal_default_instance() && _impl_.other_ != nullptr;
}
inline bool S_ROOM_OTHER_LEAVE::has_other() const {
  return _internal_has_other();
}
inline const ::ProjectJ::Player& S_ROOM_OTHER_LEAVE::_internal_other() const {
  const ::ProjectJ::Player* p = _impl_.other_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Player&>(
      ::ProjectJ::_Player_default_instance_);
}
inline const ::ProjectJ::Player& S_ROOM_OTHER_LEAVE::other() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_OTHER_LEAVE.other)
  return _internal_other();
}
inline void S_ROOM_OTHER_LEAVE::unsafe_arena_set_allocated_other(
    ::ProjectJ::Player* other) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.other_);
  }
  _impl_.other_ = other;
  if (other) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_ROOM_OTHER_LEAVE.other)
}
inline ::ProjectJ::Player* S_ROOM_OTHER_LEAVE::release_other() {
  
  ::ProjectJ::Player* temp = _impl_.other_;
  _impl_.other_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Player* S_ROOM_OTHER_LEAVE::unsafe_arena_release_other() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_ROOM_OTHER_LEAVE.other)
  
  ::ProjectJ::Player* temp = _impl_.other_;
  _impl_.other_ = nullptr;
  return temp;
}
inline ::ProjectJ::Player* S_ROOM_OTHER_LEAVE::_internal_mutable_other() {
  
  if (_impl_.other_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Player>(GetArenaForAllocation());
    _impl_.other_ = p;
  }
  return _impl_.other_;
}
inline ::ProjectJ::Player* S_ROOM_OTHER_LEAVE::mutable_other() {
  ::ProjectJ::Player* _msg = _internal_mutable_other();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_ROOM_OTHER_LEAVE.other)
  return _msg;
}
inline void S_ROOM_OTHER_LEAVE::set_allocated_other(::ProjectJ::Player* other) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.other_);
  }
  if (other) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other));
    if (message_arena != submessage_arena) {
      other = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.other_ = other;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_ROOM_OTHER_LEAVE.other)
}

// .ProjectJ.RoomInfo info = 2;
inline bool S_ROOM_OTHER_LEAVE::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_ROOM_OTHER_LEAVE::has_info() const {
  return _internal_has_info();
}
inline const ::ProjectJ::RoomInfo& S_ROOM_OTHER_LEAVE::_internal_info() const {
  const ::ProjectJ::RoomInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::RoomInfo&>(
      ::ProjectJ::_RoomInfo_default_instance_);
}
inline const ::ProjectJ::RoomInfo& S_ROOM_OTHER_LEAVE::info() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_OTHER_LEAVE.info)
  return _internal_info();
}
inline void S_ROOM_OTHER_LEAVE::unsafe_arena_set_allocated_info(
    ::ProjectJ::RoomInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_ROOM_OTHER_LEAVE.info)
}
inline ::ProjectJ::RoomInfo* S_ROOM_OTHER_LEAVE::release_info() {
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::RoomInfo* S_ROOM_OTHER_LEAVE::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_ROOM_OTHER_LEAVE.info)
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::ProjectJ::RoomInfo* S_ROOM_OTHER_LEAVE::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::RoomInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::ProjectJ::RoomInfo* S_ROOM_OTHER_LEAVE::mutable_info() {
  ::ProjectJ::RoomInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_ROOM_OTHER_LEAVE.info)
  return _msg;
}
inline void S_ROOM_OTHER_LEAVE::set_allocated_info(::ProjectJ::RoomInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_ROOM_OTHER_LEAVE.info)
}

// -------------------------------------------------------------------

// C_ROOM_READY

// int32 account_id = 1;
inline void C_ROOM_READY::clear_account_id() {
  _impl_.account_id_ = 0;
}
inline int32_t C_ROOM_READY::_internal_account_id() const {
  return _impl_.account_id_;
}
inline int32_t C_ROOM_READY::account_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_READY.account_id)
  return _internal_account_id();
}
inline void C_ROOM_READY::_internal_set_account_id(int32_t value) {
  
  _impl_.account_id_ = value;
}
inline void C_ROOM_READY::set_account_id(int32_t value) {
  _internal_set_account_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_READY.account_id)
}

// int32 room_id = 2;
inline void C_ROOM_READY::clear_room_id() {
  _impl_.room_id_ = 0;
}
inline int32_t C_ROOM_READY::_internal_room_id() const {
  return _impl_.room_id_;
}
inline int32_t C_ROOM_READY::room_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_ROOM_READY.room_id)
  return _internal_room_id();
}
inline void C_ROOM_READY::_internal_set_room_id(int32_t value) {
  
  _impl_.room_id_ = value;
}
inline void C_ROOM_READY::set_room_id(int32_t value) {
  _internal_set_room_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_ROOM_READY.room_id)
}

// -------------------------------------------------------------------

// S_ROOM_READY

// .ProjectJ.RoomInfo info = 2;
inline bool S_ROOM_READY::_internal_has_info() const {
  return this != internal_default_instance() && _impl_.info_ != nullptr;
}
inline bool S_ROOM_READY::has_info() const {
  return _internal_has_info();
}
inline const ::ProjectJ::RoomInfo& S_ROOM_READY::_internal_info() const {
  const ::ProjectJ::RoomInfo* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::RoomInfo&>(
      ::ProjectJ::_RoomInfo_default_instance_);
}
inline const ::ProjectJ::RoomInfo& S_ROOM_READY::info() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_ROOM_READY.info)
  return _internal_info();
}
inline void S_ROOM_READY::unsafe_arena_set_allocated_info(
    ::ProjectJ::RoomInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_ROOM_READY.info)
}
inline ::ProjectJ::RoomInfo* S_ROOM_READY::release_info() {
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::RoomInfo* S_ROOM_READY::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_ROOM_READY.info)
  
  ::ProjectJ::RoomInfo* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::ProjectJ::RoomInfo* S_ROOM_READY::_internal_mutable_info() {
  
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::RoomInfo>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::ProjectJ::RoomInfo* S_ROOM_READY::mutable_info() {
  ::ProjectJ::RoomInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_ROOM_READY.info)
  return _msg;
}
inline void S_ROOM_READY::set_allocated_info(::ProjectJ::RoomInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_ROOM_READY.info)
}

// -------------------------------------------------------------------

// S_MATCH_INIT_GENERATED_ITEMS

// repeated .ProjectJ.Item items = 1;
inline int S_MATCH_INIT_GENERATED_ITEMS::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int S_MATCH_INIT_GENERATED_ITEMS::items_size() const {
  return _internal_items_size();
}
inline ::ProjectJ::Item* S_MATCH_INIT_GENERATED_ITEMS::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_MATCH_INIT_GENERATED_ITEMS.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >*
S_MATCH_INIT_GENERATED_ITEMS::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:ProjectJ.S_MATCH_INIT_GENERATED_ITEMS.items)
  return &_impl_.items_;
}
inline const ::ProjectJ::Item& S_MATCH_INIT_GENERATED_ITEMS::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::ProjectJ::Item& S_MATCH_INIT_GENERATED_ITEMS::items(int index) const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_INIT_GENERATED_ITEMS.items)
  return _internal_items(index);
}
inline ::ProjectJ::Item* S_MATCH_INIT_GENERATED_ITEMS::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::ProjectJ::Item* S_MATCH_INIT_GENERATED_ITEMS::add_items() {
  ::ProjectJ::Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:ProjectJ.S_MATCH_INIT_GENERATED_ITEMS.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ProjectJ::Item >&
S_MATCH_INIT_GENERATED_ITEMS::items() const {
  // @@protoc_insertion_point(field_list:ProjectJ.S_MATCH_INIT_GENERATED_ITEMS.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// C_MATCH_ITEM_PICKUP

// int32 player_index = 1;
inline void C_MATCH_ITEM_PICKUP::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t C_MATCH_ITEM_PICKUP::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t C_MATCH_ITEM_PICKUP::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_PICKUP.player_index)
  return _internal_player_index();
}
inline void C_MATCH_ITEM_PICKUP::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void C_MATCH_ITEM_PICKUP::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_PICKUP.player_index)
}

// int32 item_id = 2;
inline void C_MATCH_ITEM_PICKUP::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t C_MATCH_ITEM_PICKUP::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t C_MATCH_ITEM_PICKUP::item_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_PICKUP.item_id)
  return _internal_item_id();
}
inline void C_MATCH_ITEM_PICKUP::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void C_MATCH_ITEM_PICKUP::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_PICKUP.item_id)
}

// -------------------------------------------------------------------

// S_MATCH_ITEM_PICKUP

// bool result = 1;
inline void S_MATCH_ITEM_PICKUP::clear_result() {
  _impl_.result_ = false;
}
inline bool S_MATCH_ITEM_PICKUP::_internal_result() const {
  return _impl_.result_;
}
inline bool S_MATCH_ITEM_PICKUP::result() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_PICKUP.result)
  return _internal_result();
}
inline void S_MATCH_ITEM_PICKUP::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S_MATCH_ITEM_PICKUP::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_PICKUP.result)
}

// int32 player_index = 2;
inline void S_MATCH_ITEM_PICKUP::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t S_MATCH_ITEM_PICKUP::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t S_MATCH_ITEM_PICKUP::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_PICKUP.player_index)
  return _internal_player_index();
}
inline void S_MATCH_ITEM_PICKUP::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void S_MATCH_ITEM_PICKUP::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_PICKUP.player_index)
}

// int32 item_id = 3;
inline void S_MATCH_ITEM_PICKUP::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t S_MATCH_ITEM_PICKUP::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t S_MATCH_ITEM_PICKUP::item_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_PICKUP.item_id)
  return _internal_item_id();
}
inline void S_MATCH_ITEM_PICKUP::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void S_MATCH_ITEM_PICKUP::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_PICKUP.item_id)
}

// int32 top_left_index = 4;
inline void S_MATCH_ITEM_PICKUP::clear_top_left_index() {
  _impl_.top_left_index_ = 0;
}
inline int32_t S_MATCH_ITEM_PICKUP::_internal_top_left_index() const {
  return _impl_.top_left_index_;
}
inline int32_t S_MATCH_ITEM_PICKUP::top_left_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_PICKUP.top_left_index)
  return _internal_top_left_index();
}
inline void S_MATCH_ITEM_PICKUP::_internal_set_top_left_index(int32_t value) {
  
  _impl_.top_left_index_ = value;
}
inline void S_MATCH_ITEM_PICKUP::set_top_left_index(int32_t value) {
  _internal_set_top_left_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_PICKUP.top_left_index)
}

// -------------------------------------------------------------------

// C_MATCH_ITEM_MOVE

// int32 player_index = 1;
inline void C_MATCH_ITEM_MOVE::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t C_MATCH_ITEM_MOVE::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t C_MATCH_ITEM_MOVE::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_MOVE.player_index)
  return _internal_player_index();
}
inline void C_MATCH_ITEM_MOVE::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void C_MATCH_ITEM_MOVE::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_MOVE.player_index)
}

// int32 item_id = 2;
inline void C_MATCH_ITEM_MOVE::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t C_MATCH_ITEM_MOVE::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t C_MATCH_ITEM_MOVE::item_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_MOVE.item_id)
  return _internal_item_id();
}
inline void C_MATCH_ITEM_MOVE::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void C_MATCH_ITEM_MOVE::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_MOVE.item_id)
}

// int32 is_item_rotated = 3;
inline void C_MATCH_ITEM_MOVE::clear_is_item_rotated() {
  _impl_.is_item_rotated_ = 0;
}
inline int32_t C_MATCH_ITEM_MOVE::_internal_is_item_rotated() const {
  return _impl_.is_item_rotated_;
}
inline int32_t C_MATCH_ITEM_MOVE::is_item_rotated() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_MOVE.is_item_rotated)
  return _internal_is_item_rotated();
}
inline void C_MATCH_ITEM_MOVE::_internal_set_is_item_rotated(int32_t value) {
  
  _impl_.is_item_rotated_ = value;
}
inline void C_MATCH_ITEM_MOVE::set_is_item_rotated(int32_t value) {
  _internal_set_is_item_rotated(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_MOVE.is_item_rotated)
}

// int32 target_top_left_index = 4;
inline void C_MATCH_ITEM_MOVE::clear_target_top_left_index() {
  _impl_.target_top_left_index_ = 0;
}
inline int32_t C_MATCH_ITEM_MOVE::_internal_target_top_left_index() const {
  return _impl_.target_top_left_index_;
}
inline int32_t C_MATCH_ITEM_MOVE::target_top_left_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_MOVE.target_top_left_index)
  return _internal_target_top_left_index();
}
inline void C_MATCH_ITEM_MOVE::_internal_set_target_top_left_index(int32_t value) {
  
  _impl_.target_top_left_index_ = value;
}
inline void C_MATCH_ITEM_MOVE::set_target_top_left_index(int32_t value) {
  _internal_set_target_top_left_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_MOVE.target_top_left_index)
}

// -------------------------------------------------------------------

// S_MATCH_ITEM_MOVE

// bool result = 1;
inline void S_MATCH_ITEM_MOVE::clear_result() {
  _impl_.result_ = false;
}
inline bool S_MATCH_ITEM_MOVE::_internal_result() const {
  return _impl_.result_;
}
inline bool S_MATCH_ITEM_MOVE::result() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_MOVE.result)
  return _internal_result();
}
inline void S_MATCH_ITEM_MOVE::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void S_MATCH_ITEM_MOVE::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_MOVE.result)
}

// int32 item_id = 2;
inline void S_MATCH_ITEM_MOVE::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t S_MATCH_ITEM_MOVE::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t S_MATCH_ITEM_MOVE::item_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_MOVE.item_id)
  return _internal_item_id();
}
inline void S_MATCH_ITEM_MOVE::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void S_MATCH_ITEM_MOVE::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_MOVE.item_id)
}

// int32 is_item_rotated = 3;
inline void S_MATCH_ITEM_MOVE::clear_is_item_rotated() {
  _impl_.is_item_rotated_ = 0;
}
inline int32_t S_MATCH_ITEM_MOVE::_internal_is_item_rotated() const {
  return _impl_.is_item_rotated_;
}
inline int32_t S_MATCH_ITEM_MOVE::is_item_rotated() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_MOVE.is_item_rotated)
  return _internal_is_item_rotated();
}
inline void S_MATCH_ITEM_MOVE::_internal_set_is_item_rotated(int32_t value) {
  
  _impl_.is_item_rotated_ = value;
}
inline void S_MATCH_ITEM_MOVE::set_is_item_rotated(int32_t value) {
  _internal_set_is_item_rotated(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_MOVE.is_item_rotated)
}

// int32 top_left_index = 4;
inline void S_MATCH_ITEM_MOVE::clear_top_left_index() {
  _impl_.top_left_index_ = 0;
}
inline int32_t S_MATCH_ITEM_MOVE::_internal_top_left_index() const {
  return _impl_.top_left_index_;
}
inline int32_t S_MATCH_ITEM_MOVE::top_left_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_MOVE.top_left_index)
  return _internal_top_left_index();
}
inline void S_MATCH_ITEM_MOVE::_internal_set_top_left_index(int32_t value) {
  
  _impl_.top_left_index_ = value;
}
inline void S_MATCH_ITEM_MOVE::set_top_left_index(int32_t value) {
  _internal_set_top_left_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_MOVE.top_left_index)
}

// -------------------------------------------------------------------

// C_MATCH_ITEM_DROP

// int32 player_index = 1;
inline void C_MATCH_ITEM_DROP::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t C_MATCH_ITEM_DROP::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t C_MATCH_ITEM_DROP::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_DROP.player_index)
  return _internal_player_index();
}
inline void C_MATCH_ITEM_DROP::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void C_MATCH_ITEM_DROP::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_DROP.player_index)
}

// .ProjectJ.Vector drop_item_position = 2;
inline bool C_MATCH_ITEM_DROP::_internal_has_drop_item_position() const {
  return this != internal_default_instance() && _impl_.drop_item_position_ != nullptr;
}
inline bool C_MATCH_ITEM_DROP::has_drop_item_position() const {
  return _internal_has_drop_item_position();
}
inline const ::ProjectJ::Vector& C_MATCH_ITEM_DROP::_internal_drop_item_position() const {
  const ::ProjectJ::Vector* p = _impl_.drop_item_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Vector&>(
      ::ProjectJ::_Vector_default_instance_);
}
inline const ::ProjectJ::Vector& C_MATCH_ITEM_DROP::drop_item_position() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_DROP.drop_item_position)
  return _internal_drop_item_position();
}
inline void C_MATCH_ITEM_DROP::unsafe_arena_set_allocated_drop_item_position(
    ::ProjectJ::Vector* drop_item_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_position_);
  }
  _impl_.drop_item_position_ = drop_item_position;
  if (drop_item_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.C_MATCH_ITEM_DROP.drop_item_position)
}
inline ::ProjectJ::Vector* C_MATCH_ITEM_DROP::release_drop_item_position() {
  
  ::ProjectJ::Vector* temp = _impl_.drop_item_position_;
  _impl_.drop_item_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Vector* C_MATCH_ITEM_DROP::unsafe_arena_release_drop_item_position() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_MATCH_ITEM_DROP.drop_item_position)
  
  ::ProjectJ::Vector* temp = _impl_.drop_item_position_;
  _impl_.drop_item_position_ = nullptr;
  return temp;
}
inline ::ProjectJ::Vector* C_MATCH_ITEM_DROP::_internal_mutable_drop_item_position() {
  
  if (_impl_.drop_item_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Vector>(GetArenaForAllocation());
    _impl_.drop_item_position_ = p;
  }
  return _impl_.drop_item_position_;
}
inline ::ProjectJ::Vector* C_MATCH_ITEM_DROP::mutable_drop_item_position() {
  ::ProjectJ::Vector* _msg = _internal_mutable_drop_item_position();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_MATCH_ITEM_DROP.drop_item_position)
  return _msg;
}
inline void C_MATCH_ITEM_DROP::set_allocated_drop_item_position(::ProjectJ::Vector* drop_item_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_position_);
  }
  if (drop_item_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_item_position));
    if (message_arena != submessage_arena) {
      drop_item_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_item_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.drop_item_position_ = drop_item_position;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_MATCH_ITEM_DROP.drop_item_position)
}

// .ProjectJ.Rotator drop_item_rotation = 3;
inline bool C_MATCH_ITEM_DROP::_internal_has_drop_item_rotation() const {
  return this != internal_default_instance() && _impl_.drop_item_rotation_ != nullptr;
}
inline bool C_MATCH_ITEM_DROP::has_drop_item_rotation() const {
  return _internal_has_drop_item_rotation();
}
inline const ::ProjectJ::Rotator& C_MATCH_ITEM_DROP::_internal_drop_item_rotation() const {
  const ::ProjectJ::Rotator* p = _impl_.drop_item_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Rotator&>(
      ::ProjectJ::_Rotator_default_instance_);
}
inline const ::ProjectJ::Rotator& C_MATCH_ITEM_DROP::drop_item_rotation() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_DROP.drop_item_rotation)
  return _internal_drop_item_rotation();
}
inline void C_MATCH_ITEM_DROP::unsafe_arena_set_allocated_drop_item_rotation(
    ::ProjectJ::Rotator* drop_item_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_rotation_);
  }
  _impl_.drop_item_rotation_ = drop_item_rotation;
  if (drop_item_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.C_MATCH_ITEM_DROP.drop_item_rotation)
}
inline ::ProjectJ::Rotator* C_MATCH_ITEM_DROP::release_drop_item_rotation() {
  
  ::ProjectJ::Rotator* temp = _impl_.drop_item_rotation_;
  _impl_.drop_item_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Rotator* C_MATCH_ITEM_DROP::unsafe_arena_release_drop_item_rotation() {
  // @@protoc_insertion_point(field_release:ProjectJ.C_MATCH_ITEM_DROP.drop_item_rotation)
  
  ::ProjectJ::Rotator* temp = _impl_.drop_item_rotation_;
  _impl_.drop_item_rotation_ = nullptr;
  return temp;
}
inline ::ProjectJ::Rotator* C_MATCH_ITEM_DROP::_internal_mutable_drop_item_rotation() {
  
  if (_impl_.drop_item_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Rotator>(GetArenaForAllocation());
    _impl_.drop_item_rotation_ = p;
  }
  return _impl_.drop_item_rotation_;
}
inline ::ProjectJ::Rotator* C_MATCH_ITEM_DROP::mutable_drop_item_rotation() {
  ::ProjectJ::Rotator* _msg = _internal_mutable_drop_item_rotation();
  // @@protoc_insertion_point(field_mutable:ProjectJ.C_MATCH_ITEM_DROP.drop_item_rotation)
  return _msg;
}
inline void C_MATCH_ITEM_DROP::set_allocated_drop_item_rotation(::ProjectJ::Rotator* drop_item_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_rotation_);
  }
  if (drop_item_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_item_rotation));
    if (message_arena != submessage_arena) {
      drop_item_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_item_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.drop_item_rotation_ = drop_item_rotation;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.C_MATCH_ITEM_DROP.drop_item_rotation)
}

// int32 item_id = 4;
inline void C_MATCH_ITEM_DROP::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t C_MATCH_ITEM_DROP::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t C_MATCH_ITEM_DROP::item_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.C_MATCH_ITEM_DROP.item_id)
  return _internal_item_id();
}
inline void C_MATCH_ITEM_DROP::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void C_MATCH_ITEM_DROP::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.C_MATCH_ITEM_DROP.item_id)
}

// -------------------------------------------------------------------

// S_MATCH_ITEM_DROP

// int32 player_index = 1;
inline void S_MATCH_ITEM_DROP::clear_player_index() {
  _impl_.player_index_ = 0;
}
inline int32_t S_MATCH_ITEM_DROP::_internal_player_index() const {
  return _impl_.player_index_;
}
inline int32_t S_MATCH_ITEM_DROP::player_index() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_DROP.player_index)
  return _internal_player_index();
}
inline void S_MATCH_ITEM_DROP::_internal_set_player_index(int32_t value) {
  
  _impl_.player_index_ = value;
}
inline void S_MATCH_ITEM_DROP::set_player_index(int32_t value) {
  _internal_set_player_index(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_DROP.player_index)
}

// .ProjectJ.Vector drop_item_position = 2;
inline bool S_MATCH_ITEM_DROP::_internal_has_drop_item_position() const {
  return this != internal_default_instance() && _impl_.drop_item_position_ != nullptr;
}
inline bool S_MATCH_ITEM_DROP::has_drop_item_position() const {
  return _internal_has_drop_item_position();
}
inline const ::ProjectJ::Vector& S_MATCH_ITEM_DROP::_internal_drop_item_position() const {
  const ::ProjectJ::Vector* p = _impl_.drop_item_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Vector&>(
      ::ProjectJ::_Vector_default_instance_);
}
inline const ::ProjectJ::Vector& S_MATCH_ITEM_DROP::drop_item_position() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_DROP.drop_item_position)
  return _internal_drop_item_position();
}
inline void S_MATCH_ITEM_DROP::unsafe_arena_set_allocated_drop_item_position(
    ::ProjectJ::Vector* drop_item_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_position_);
  }
  _impl_.drop_item_position_ = drop_item_position;
  if (drop_item_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_MATCH_ITEM_DROP.drop_item_position)
}
inline ::ProjectJ::Vector* S_MATCH_ITEM_DROP::release_drop_item_position() {
  
  ::ProjectJ::Vector* temp = _impl_.drop_item_position_;
  _impl_.drop_item_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Vector* S_MATCH_ITEM_DROP::unsafe_arena_release_drop_item_position() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_MATCH_ITEM_DROP.drop_item_position)
  
  ::ProjectJ::Vector* temp = _impl_.drop_item_position_;
  _impl_.drop_item_position_ = nullptr;
  return temp;
}
inline ::ProjectJ::Vector* S_MATCH_ITEM_DROP::_internal_mutable_drop_item_position() {
  
  if (_impl_.drop_item_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Vector>(GetArenaForAllocation());
    _impl_.drop_item_position_ = p;
  }
  return _impl_.drop_item_position_;
}
inline ::ProjectJ::Vector* S_MATCH_ITEM_DROP::mutable_drop_item_position() {
  ::ProjectJ::Vector* _msg = _internal_mutable_drop_item_position();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_MATCH_ITEM_DROP.drop_item_position)
  return _msg;
}
inline void S_MATCH_ITEM_DROP::set_allocated_drop_item_position(::ProjectJ::Vector* drop_item_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_position_);
  }
  if (drop_item_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_item_position));
    if (message_arena != submessage_arena) {
      drop_item_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_item_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.drop_item_position_ = drop_item_position;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_MATCH_ITEM_DROP.drop_item_position)
}

// .ProjectJ.Rotator drop_item_rotation = 3;
inline bool S_MATCH_ITEM_DROP::_internal_has_drop_item_rotation() const {
  return this != internal_default_instance() && _impl_.drop_item_rotation_ != nullptr;
}
inline bool S_MATCH_ITEM_DROP::has_drop_item_rotation() const {
  return _internal_has_drop_item_rotation();
}
inline const ::ProjectJ::Rotator& S_MATCH_ITEM_DROP::_internal_drop_item_rotation() const {
  const ::ProjectJ::Rotator* p = _impl_.drop_item_rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::ProjectJ::Rotator&>(
      ::ProjectJ::_Rotator_default_instance_);
}
inline const ::ProjectJ::Rotator& S_MATCH_ITEM_DROP::drop_item_rotation() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_DROP.drop_item_rotation)
  return _internal_drop_item_rotation();
}
inline void S_MATCH_ITEM_DROP::unsafe_arena_set_allocated_drop_item_rotation(
    ::ProjectJ::Rotator* drop_item_rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_rotation_);
  }
  _impl_.drop_item_rotation_ = drop_item_rotation;
  if (drop_item_rotation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ProjectJ.S_MATCH_ITEM_DROP.drop_item_rotation)
}
inline ::ProjectJ::Rotator* S_MATCH_ITEM_DROP::release_drop_item_rotation() {
  
  ::ProjectJ::Rotator* temp = _impl_.drop_item_rotation_;
  _impl_.drop_item_rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ProjectJ::Rotator* S_MATCH_ITEM_DROP::unsafe_arena_release_drop_item_rotation() {
  // @@protoc_insertion_point(field_release:ProjectJ.S_MATCH_ITEM_DROP.drop_item_rotation)
  
  ::ProjectJ::Rotator* temp = _impl_.drop_item_rotation_;
  _impl_.drop_item_rotation_ = nullptr;
  return temp;
}
inline ::ProjectJ::Rotator* S_MATCH_ITEM_DROP::_internal_mutable_drop_item_rotation() {
  
  if (_impl_.drop_item_rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ProjectJ::Rotator>(GetArenaForAllocation());
    _impl_.drop_item_rotation_ = p;
  }
  return _impl_.drop_item_rotation_;
}
inline ::ProjectJ::Rotator* S_MATCH_ITEM_DROP::mutable_drop_item_rotation() {
  ::ProjectJ::Rotator* _msg = _internal_mutable_drop_item_rotation();
  // @@protoc_insertion_point(field_mutable:ProjectJ.S_MATCH_ITEM_DROP.drop_item_rotation)
  return _msg;
}
inline void S_MATCH_ITEM_DROP::set_allocated_drop_item_rotation(::ProjectJ::Rotator* drop_item_rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.drop_item_rotation_);
  }
  if (drop_item_rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drop_item_rotation));
    if (message_arena != submessage_arena) {
      drop_item_rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drop_item_rotation, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.drop_item_rotation_ = drop_item_rotation;
  // @@protoc_insertion_point(field_set_allocated:ProjectJ.S_MATCH_ITEM_DROP.drop_item_rotation)
}

// int32 item_id = 4;
inline void S_MATCH_ITEM_DROP::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t S_MATCH_ITEM_DROP::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t S_MATCH_ITEM_DROP::item_id() const {
  // @@protoc_insertion_point(field_get:ProjectJ.S_MATCH_ITEM_DROP.item_id)
  return _internal_item_id();
}
inline void S_MATCH_ITEM_DROP::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void S_MATCH_ITEM_DROP::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:ProjectJ.S_MATCH_ITEM_DROP.item_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProjectJ

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message_2eproto
