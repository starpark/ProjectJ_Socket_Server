// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message.proto

#include "Message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace ProjectJ {
PROTOBUF_CONSTEXPR C_VERIFY_TOKEN::C_VERIFY_TOKEN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.account_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_VERIFY_TOKENDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_VERIFY_TOKENDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_VERIFY_TOKENDefaultTypeInternal() {}
  union {
    C_VERIFY_TOKEN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_VERIFY_TOKENDefaultTypeInternal _C_VERIFY_TOKEN_default_instance_;
PROTOBUF_CONSTEXPR S_VERIFY_TOKEN::S_VERIFY_TOKEN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_VERIFY_TOKENDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_VERIFY_TOKENDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_VERIFY_TOKENDefaultTypeInternal() {}
  union {
    S_VERIFY_TOKEN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_VERIFY_TOKENDefaultTypeInternal _S_VERIFY_TOKEN_default_instance_;
PROTOBUF_CONSTEXPR C_LOBBY_CHAT::C_LOBBY_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chat_time_)*/int64_t{0}
  , /*decltype(_impl_.account_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_LOBBY_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOBBY_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOBBY_CHATDefaultTypeInternal() {}
  union {
    C_LOBBY_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOBBY_CHATDefaultTypeInternal _C_LOBBY_CHAT_default_instance_;
PROTOBUF_CONSTEXPR S_LOBBY_CHAT::S_LOBBY_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chat_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chat_time_)*/int64_t{0}
  , /*decltype(_impl_.account_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LOBBY_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOBBY_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOBBY_CHATDefaultTypeInternal() {}
  union {
    S_LOBBY_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOBBY_CHATDefaultTypeInternal _S_LOBBY_CHAT_default_instance_;
}  // namespace ProjectJ
static ::_pb::Metadata file_level_metadata_Message_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Message_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Message_2eproto = nullptr;

const uint32_t TableStruct_Message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::C_VERIFY_TOKEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::C_VERIFY_TOKEN, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::C_VERIFY_TOKEN, _impl_.token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::S_VERIFY_TOKEN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::S_VERIFY_TOKEN, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::C_LOBBY_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::C_LOBBY_CHAT, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::C_LOBBY_CHAT, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::C_LOBBY_CHAT, _impl_.chat_time_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::C_LOBBY_CHAT, _impl_.chat_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::S_LOBBY_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ProjectJ::S_LOBBY_CHAT, _impl_.account_id_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::S_LOBBY_CHAT, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::S_LOBBY_CHAT, _impl_.chat_time_),
  PROTOBUF_FIELD_OFFSET(::ProjectJ::S_LOBBY_CHAT, _impl_.chat_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::ProjectJ::C_VERIFY_TOKEN)},
  { 8, -1, -1, sizeof(::ProjectJ::S_VERIFY_TOKEN)},
  { 15, -1, -1, sizeof(::ProjectJ::C_LOBBY_CHAT)},
  { 25, -1, -1, sizeof(::ProjectJ::S_LOBBY_CHAT)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::ProjectJ::_C_VERIFY_TOKEN_default_instance_._instance,
  &::ProjectJ::_S_VERIFY_TOKEN_default_instance_._instance,
  &::ProjectJ::_C_LOBBY_CHAT_default_instance_._instance,
  &::ProjectJ::_S_LOBBY_CHAT_default_instance_._instance,
};

const char descriptor_table_protodef_Message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rMessage.proto\022\010ProjectJ\032\nEnum.proto\032\014S"
  "truct.proto\"3\n\016C_VERIFY_TOKEN\022\022\n\naccount"
  "_id\030\001 \001(\005\022\r\n\005token\030\002 \001(\t\" \n\016S_VERIFY_TOK"
  "EN\022\016\n\006result\030\001 \001(\010\"U\n\014C_LOBBY_CHAT\022\022\n\nac"
  "count_id\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022\021\n\tchat"
  "_time\030\003 \001(\003\022\014\n\004chat\030\004 \001(\t\"U\n\014S_LOBBY_CHA"
  "T\022\022\n\naccount_id\030\001 \001(\005\022\020\n\010nickname\030\002 \001(\t\022"
  "\021\n\tchat_time\030\003 \001(\003\022\014\n\004chat\030\004 \001(\tb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Message_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Message_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Message_2eproto = {
    false, false, 320, descriptor_table_protodef_Message_2eproto,
    "Message.proto",
    &descriptor_table_Message_2eproto_once, descriptor_table_Message_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_Message_2eproto::offsets,
    file_level_metadata_Message_2eproto, file_level_enum_descriptors_Message_2eproto,
    file_level_service_descriptors_Message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Message_2eproto_getter() {
  return &descriptor_table_Message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Message_2eproto(&descriptor_table_Message_2eproto);
namespace ProjectJ {

// ===================================================================

class C_VERIFY_TOKEN::_Internal {
 public:
};

C_VERIFY_TOKEN::C_VERIFY_TOKEN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.C_VERIFY_TOKEN)
}
C_VERIFY_TOKEN::C_VERIFY_TOKEN(const C_VERIFY_TOKEN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_VERIFY_TOKEN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token().empty()) {
    _this->_impl_.token_.Set(from._internal_token(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.account_id_ = from._impl_.account_id_;
  // @@protoc_insertion_point(copy_constructor:ProjectJ.C_VERIFY_TOKEN)
}

inline void C_VERIFY_TOKEN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_){}
    , decltype(_impl_.account_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_VERIFY_TOKEN::~C_VERIFY_TOKEN() {
  // @@protoc_insertion_point(destructor:ProjectJ.C_VERIFY_TOKEN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_VERIFY_TOKEN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_.Destroy();
}

void C_VERIFY_TOKEN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_VERIFY_TOKEN::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.C_VERIFY_TOKEN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_.ClearToEmpty();
  _impl_.account_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_VERIFY_TOKEN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProjectJ.C_VERIFY_TOKEN.token"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_VERIFY_TOKEN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.C_VERIFY_TOKEN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_account_id(), target);
  }

  // string token = 2;
  if (!this->_internal_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProjectJ.C_VERIFY_TOKEN.token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.C_VERIFY_TOKEN)
  return target;
}

size_t C_VERIFY_TOKEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.C_VERIFY_TOKEN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 2;
  if (!this->_internal_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // int32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_VERIFY_TOKEN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_VERIFY_TOKEN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_VERIFY_TOKEN::GetClassData() const { return &_class_data_; }


void C_VERIFY_TOKEN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_VERIFY_TOKEN*>(&to_msg);
  auto& from = static_cast<const C_VERIFY_TOKEN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.C_VERIFY_TOKEN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token().empty()) {
    _this->_internal_set_token(from._internal_token());
  }
  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_VERIFY_TOKEN::CopyFrom(const C_VERIFY_TOKEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.C_VERIFY_TOKEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_VERIFY_TOKEN::IsInitialized() const {
  return true;
}

void C_VERIFY_TOKEN::InternalSwap(C_VERIFY_TOKEN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_, lhs_arena,
      &other->_impl_.token_, rhs_arena
  );
  swap(_impl_.account_id_, other->_impl_.account_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_VERIFY_TOKEN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message_2eproto_getter, &descriptor_table_Message_2eproto_once,
      file_level_metadata_Message_2eproto[0]);
}

// ===================================================================

class S_VERIFY_TOKEN::_Internal {
 public:
};

S_VERIFY_TOKEN::S_VERIFY_TOKEN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.S_VERIFY_TOKEN)
}
S_VERIFY_TOKEN::S_VERIFY_TOKEN(const S_VERIFY_TOKEN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_VERIFY_TOKEN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:ProjectJ.S_VERIFY_TOKEN)
}

inline void S_VERIFY_TOKEN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_VERIFY_TOKEN::~S_VERIFY_TOKEN() {
  // @@protoc_insertion_point(destructor:ProjectJ.S_VERIFY_TOKEN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_VERIFY_TOKEN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_VERIFY_TOKEN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_VERIFY_TOKEN::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.S_VERIFY_TOKEN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_VERIFY_TOKEN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_VERIFY_TOKEN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.S_VERIFY_TOKEN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.S_VERIFY_TOKEN)
  return target;
}

size_t S_VERIFY_TOKEN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.S_VERIFY_TOKEN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_VERIFY_TOKEN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_VERIFY_TOKEN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_VERIFY_TOKEN::GetClassData() const { return &_class_data_; }


void S_VERIFY_TOKEN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_VERIFY_TOKEN*>(&to_msg);
  auto& from = static_cast<const S_VERIFY_TOKEN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.S_VERIFY_TOKEN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_VERIFY_TOKEN::CopyFrom(const S_VERIFY_TOKEN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.S_VERIFY_TOKEN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_VERIFY_TOKEN::IsInitialized() const {
  return true;
}

void S_VERIFY_TOKEN::InternalSwap(S_VERIFY_TOKEN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_VERIFY_TOKEN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message_2eproto_getter, &descriptor_table_Message_2eproto_once,
      file_level_metadata_Message_2eproto[1]);
}

// ===================================================================

class C_LOBBY_CHAT::_Internal {
 public:
};

C_LOBBY_CHAT::C_LOBBY_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.C_LOBBY_CHAT)
}
C_LOBBY_CHAT::C_LOBBY_CHAT(const C_LOBBY_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_LOBBY_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.chat_){}
    , decltype(_impl_.chat_time_){}
    , decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat().empty()) {
    _this->_impl_.chat_.Set(from._internal_chat(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chat_time_, &from._impl_.chat_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.account_id_) -
    reinterpret_cast<char*>(&_impl_.chat_time_)) + sizeof(_impl_.account_id_));
  // @@protoc_insertion_point(copy_constructor:ProjectJ.C_LOBBY_CHAT)
}

inline void C_LOBBY_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.chat_){}
    , decltype(_impl_.chat_time_){int64_t{0}}
    , decltype(_impl_.account_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_LOBBY_CHAT::~C_LOBBY_CHAT() {
  // @@protoc_insertion_point(destructor:ProjectJ.C_LOBBY_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LOBBY_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.chat_.Destroy();
}

void C_LOBBY_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_LOBBY_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.C_LOBBY_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.chat_.ClearToEmpty();
  ::memset(&_impl_.chat_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.account_id_) -
      reinterpret_cast<char*>(&_impl_.chat_time_)) + sizeof(_impl_.account_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOBBY_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProjectJ.C_LOBBY_CHAT.nickname"));
        } else
          goto handle_unusual;
        continue;
      // int64 chat_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.chat_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProjectJ.C_LOBBY_CHAT.chat"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LOBBY_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.C_LOBBY_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_account_id(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProjectJ.C_LOBBY_CHAT.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // int64 chat_time = 3;
  if (this->_internal_chat_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_chat_time(), target);
  }

  // string chat = 4;
  if (!this->_internal_chat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat().data(), static_cast<int>(this->_internal_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProjectJ.C_LOBBY_CHAT.chat");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.C_LOBBY_CHAT)
  return target;
}

size_t C_LOBBY_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.C_LOBBY_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string chat = 4;
  if (!this->_internal_chat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat());
  }

  // int64 chat_time = 3;
  if (this->_internal_chat_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_chat_time());
  }

  // int32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOBBY_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_LOBBY_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOBBY_CHAT::GetClassData() const { return &_class_data_; }


void C_LOBBY_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_LOBBY_CHAT*>(&to_msg);
  auto& from = static_cast<const C_LOBBY_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.C_LOBBY_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_chat().empty()) {
    _this->_internal_set_chat(from._internal_chat());
  }
  if (from._internal_chat_time() != 0) {
    _this->_internal_set_chat_time(from._internal_chat_time());
  }
  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LOBBY_CHAT::CopyFrom(const C_LOBBY_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.C_LOBBY_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOBBY_CHAT::IsInitialized() const {
  return true;
}

void C_LOBBY_CHAT::InternalSwap(C_LOBBY_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_, lhs_arena,
      &other->_impl_.chat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_LOBBY_CHAT, _impl_.account_id_)
      + sizeof(C_LOBBY_CHAT::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(C_LOBBY_CHAT, _impl_.chat_time_)>(
          reinterpret_cast<char*>(&_impl_.chat_time_),
          reinterpret_cast<char*>(&other->_impl_.chat_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOBBY_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message_2eproto_getter, &descriptor_table_Message_2eproto_once,
      file_level_metadata_Message_2eproto[2]);
}

// ===================================================================

class S_LOBBY_CHAT::_Internal {
 public:
};

S_LOBBY_CHAT::S_LOBBY_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:ProjectJ.S_LOBBY_CHAT)
}
S_LOBBY_CHAT::S_LOBBY_CHAT(const S_LOBBY_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LOBBY_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.chat_){}
    , decltype(_impl_.chat_time_){}
    , decltype(_impl_.account_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat().empty()) {
    _this->_impl_.chat_.Set(from._internal_chat(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chat_time_, &from._impl_.chat_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.account_id_) -
    reinterpret_cast<char*>(&_impl_.chat_time_)) + sizeof(_impl_.account_id_));
  // @@protoc_insertion_point(copy_constructor:ProjectJ.S_LOBBY_CHAT)
}

inline void S_LOBBY_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nickname_){}
    , decltype(_impl_.chat_){}
    , decltype(_impl_.chat_time_){int64_t{0}}
    , decltype(_impl_.account_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chat_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_LOBBY_CHAT::~S_LOBBY_CHAT() {
  // @@protoc_insertion_point(destructor:ProjectJ.S_LOBBY_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOBBY_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nickname_.Destroy();
  _impl_.chat_.Destroy();
}

void S_LOBBY_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LOBBY_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:ProjectJ.S_LOBBY_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  _impl_.chat_.ClearToEmpty();
  ::memset(&_impl_.chat_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.account_id_) -
      reinterpret_cast<char*>(&_impl_.chat_time_)) + sizeof(_impl_.account_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOBBY_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.account_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProjectJ.S_LOBBY_CHAT.nickname"));
        } else
          goto handle_unusual;
        continue;
      // int64 chat_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.chat_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chat = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_chat();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "ProjectJ.S_LOBBY_CHAT.chat"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOBBY_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProjectJ.S_LOBBY_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_account_id(), target);
  }

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProjectJ.S_LOBBY_CHAT.nickname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // int64 chat_time = 3;
  if (this->_internal_chat_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_chat_time(), target);
  }

  // string chat = 4;
  if (!this->_internal_chat().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat().data(), static_cast<int>(this->_internal_chat().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ProjectJ.S_LOBBY_CHAT.chat");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_chat(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProjectJ.S_LOBBY_CHAT)
  return target;
}

size_t S_LOBBY_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ProjectJ.S_LOBBY_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string nickname = 2;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // string chat = 4;
  if (!this->_internal_chat().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat());
  }

  // int64 chat_time = 3;
  if (this->_internal_chat_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_chat_time());
  }

  // int32 account_id = 1;
  if (this->_internal_account_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_account_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOBBY_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LOBBY_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOBBY_CHAT::GetClassData() const { return &_class_data_; }


void S_LOBBY_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LOBBY_CHAT*>(&to_msg);
  auto& from = static_cast<const S_LOBBY_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ProjectJ.S_LOBBY_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (!from._internal_chat().empty()) {
    _this->_internal_set_chat(from._internal_chat());
  }
  if (from._internal_chat_time() != 0) {
    _this->_internal_set_chat_time(from._internal_chat_time());
  }
  if (from._internal_account_id() != 0) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOBBY_CHAT::CopyFrom(const S_LOBBY_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProjectJ.S_LOBBY_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOBBY_CHAT::IsInitialized() const {
  return true;
}

void S_LOBBY_CHAT::InternalSwap(S_LOBBY_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_, lhs_arena,
      &other->_impl_.chat_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LOBBY_CHAT, _impl_.account_id_)
      + sizeof(S_LOBBY_CHAT::_impl_.account_id_)
      - PROTOBUF_FIELD_OFFSET(S_LOBBY_CHAT, _impl_.chat_time_)>(
          reinterpret_cast<char*>(&_impl_.chat_time_),
          reinterpret_cast<char*>(&other->_impl_.chat_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOBBY_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Message_2eproto_getter, &descriptor_table_Message_2eproto_once,
      file_level_metadata_Message_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace ProjectJ
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ProjectJ::C_VERIFY_TOKEN*
Arena::CreateMaybeMessage< ::ProjectJ::C_VERIFY_TOKEN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::C_VERIFY_TOKEN >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::S_VERIFY_TOKEN*
Arena::CreateMaybeMessage< ::ProjectJ::S_VERIFY_TOKEN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::S_VERIFY_TOKEN >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::C_LOBBY_CHAT*
Arena::CreateMaybeMessage< ::ProjectJ::C_LOBBY_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::C_LOBBY_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::ProjectJ::S_LOBBY_CHAT*
Arena::CreateMaybeMessage< ::ProjectJ::S_LOBBY_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ProjectJ::S_LOBBY_CHAT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
